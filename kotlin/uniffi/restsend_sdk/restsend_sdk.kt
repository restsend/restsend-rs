// This file was autogenerated by some hot garbage in the `uniffi` crate.
// Trust me, you don't want to mess with it!

@file:Suppress("NAME_SHADOWING")

package uniffi.restsend_sdk

// Common helper code.
//
// Ideally this would live in a separate .kt file where it can be unittested etc
// in isolation, and perhaps even published as a re-useable package.
//
// However, it's important that the details of how this helper code works (e.g. the
// way that different builtin types are passed across the FFI) exactly match what's
// expected by the Rust code on the other side of the interface. In practice right
// now that means coming from the exact some version of `uniffi` that was used to
// compile the Rust component. The easiest way to ensure this is to bundle the Kotlin
// helpers directly inline like we're doing here.

import com.sun.jna.Library
import com.sun.jna.IntegerType
import com.sun.jna.Native
import com.sun.jna.Pointer
import com.sun.jna.Structure
import com.sun.jna.Callback
import com.sun.jna.ptr.*
import java.nio.ByteBuffer
import java.nio.ByteOrder
import java.nio.CharBuffer
import java.nio.charset.CodingErrorAction
import java.util.concurrent.atomic.AtomicLong
import java.util.concurrent.ConcurrentHashMap
import java.util.concurrent.atomic.AtomicBoolean
import kotlin.coroutines.resume
import kotlinx.coroutines.CancellableContinuation
import kotlinx.coroutines.DelicateCoroutinesApi
import kotlinx.coroutines.GlobalScope
import kotlinx.coroutines.Job
import kotlinx.coroutines.launch
import kotlinx.coroutines.suspendCancellableCoroutine

// This is a helper for safely working with byte buffers returned from the Rust code.
// A rust-owned buffer is represented by its capacity, its current length, and a
// pointer to the underlying data.

/**
 * @suppress
 */
@Structure.FieldOrder("capacity", "len", "data")
open class RustBuffer : Structure() {
    // Note: `capacity` and `len` are actually `ULong` values, but JVM only supports signed values.
    // When dealing with these fields, make sure to call `toULong()`.
    @JvmField var capacity: Long = 0
    @JvmField var len: Long = 0
    @JvmField var data: Pointer? = null

    class ByValue: RustBuffer(), Structure.ByValue
    class ByReference: RustBuffer(), Structure.ByReference

   internal fun setValue(other: RustBuffer) {
        capacity = other.capacity
        len = other.len
        data = other.data
    }

    companion object {
        internal fun alloc(size: ULong = 0UL) = uniffiRustCall() { status ->
            // Note: need to convert the size to a `Long` value to make this work with JVM.
            UniffiLib.INSTANCE.ffi_restsend_sdk_rustbuffer_alloc(size.toLong(), status)
        }.also {
            if(it.data == null) {
               throw RuntimeException("RustBuffer.alloc() returned null data pointer (size=${size})")
           }
        }

        internal fun create(capacity: ULong, len: ULong, data: Pointer?): RustBuffer.ByValue {
            var buf = RustBuffer.ByValue()
            buf.capacity = capacity.toLong()
            buf.len = len.toLong()
            buf.data = data
            return buf
        }

        internal fun free(buf: RustBuffer.ByValue) = uniffiRustCall() { status ->
            UniffiLib.INSTANCE.ffi_restsend_sdk_rustbuffer_free(buf, status)
        }
    }

    @Suppress("TooGenericExceptionThrown")
    fun asByteBuffer() =
        this.data?.getByteBuffer(0, this.len.toLong())?.also {
            it.order(ByteOrder.BIG_ENDIAN)
        }
}

/**
 * The equivalent of the `*mut RustBuffer` type.
 * Required for callbacks taking in an out pointer.
 *
 * Size is the sum of all values in the struct.
 *
 * @suppress
 */
class RustBufferByReference : ByReference(16) {
    /**
     * Set the pointed-to `RustBuffer` to the given value.
     */
    fun setValue(value: RustBuffer.ByValue) {
        // NOTE: The offsets are as they are in the C-like struct.
        val pointer = getPointer()
        pointer.setLong(0, value.capacity)
        pointer.setLong(8, value.len)
        pointer.setPointer(16, value.data)
    }

    /**
     * Get a `RustBuffer.ByValue` from this reference.
     */
    fun getValue(): RustBuffer.ByValue {
        val pointer = getPointer()
        val value = RustBuffer.ByValue()
        value.writeField("capacity", pointer.getLong(0))
        value.writeField("len", pointer.getLong(8))
        value.writeField("data", pointer.getLong(16))

        return value
    }
}

// This is a helper for safely passing byte references into the rust code.
// It's not actually used at the moment, because there aren't many things that you
// can take a direct pointer to in the JVM, and if we're going to copy something
// then we might as well copy it into a `RustBuffer`. But it's here for API
// completeness.

@Structure.FieldOrder("len", "data")
internal open class ForeignBytes : Structure() {
    @JvmField var len: Int = 0
    @JvmField var data: Pointer? = null

    class ByValue : ForeignBytes(), Structure.ByValue
}
/**
 * The FfiConverter interface handles converter types to and from the FFI
 *
 * All implementing objects should be public to support external types.  When a
 * type is external we need to import it's FfiConverter.
 *
 * @suppress
 */
public interface FfiConverter<KotlinType, FfiType> {
    // Convert an FFI type to a Kotlin type
    fun lift(value: FfiType): KotlinType

    // Convert an Kotlin type to an FFI type
    fun lower(value: KotlinType): FfiType

    // Read a Kotlin type from a `ByteBuffer`
    fun read(buf: ByteBuffer): KotlinType

    // Calculate bytes to allocate when creating a `RustBuffer`
    //
    // This must return at least as many bytes as the write() function will
    // write. It can return more bytes than needed, for example when writing
    // Strings we can't know the exact bytes needed until we the UTF-8
    // encoding, so we pessimistically allocate the largest size possible (3
    // bytes per codepoint).  Allocating extra bytes is not really a big deal
    // because the `RustBuffer` is short-lived.
    fun allocationSize(value: KotlinType): ULong

    // Write a Kotlin type to a `ByteBuffer`
    fun write(value: KotlinType, buf: ByteBuffer)

    // Lower a value into a `RustBuffer`
    //
    // This method lowers a value into a `RustBuffer` rather than the normal
    // FfiType.  It's used by the callback interface code.  Callback interface
    // returns are always serialized into a `RustBuffer` regardless of their
    // normal FFI type.
    fun lowerIntoRustBuffer(value: KotlinType): RustBuffer.ByValue {
        val rbuf = RustBuffer.alloc(allocationSize(value))
        try {
            val bbuf = rbuf.data!!.getByteBuffer(0, rbuf.capacity).also {
                it.order(ByteOrder.BIG_ENDIAN)
            }
            write(value, bbuf)
            rbuf.writeField("len", bbuf.position().toLong())
            return rbuf
        } catch (e: Throwable) {
            RustBuffer.free(rbuf)
            throw e
        }
    }

    // Lift a value from a `RustBuffer`.
    //
    // This here mostly because of the symmetry with `lowerIntoRustBuffer()`.
    // It's currently only used by the `FfiConverterRustBuffer` class below.
    fun liftFromRustBuffer(rbuf: RustBuffer.ByValue): KotlinType {
        val byteBuf = rbuf.asByteBuffer()!!
        try {
           val item = read(byteBuf)
           if (byteBuf.hasRemaining()) {
               throw RuntimeException("junk remaining in buffer after lifting, something is very wrong!!")
           }
           return item
        } finally {
            RustBuffer.free(rbuf)
        }
    }
}

/**
 * FfiConverter that uses `RustBuffer` as the FfiType
 *
 * @suppress
 */
public interface FfiConverterRustBuffer<KotlinType>: FfiConverter<KotlinType, RustBuffer.ByValue> {
    override fun lift(value: RustBuffer.ByValue) = liftFromRustBuffer(value)
    override fun lower(value: KotlinType) = lowerIntoRustBuffer(value)
}
// A handful of classes and functions to support the generated data structures.
// This would be a good candidate for isolating in its own ffi-support lib.

internal const val UNIFFI_CALL_SUCCESS = 0.toByte()
internal const val UNIFFI_CALL_ERROR = 1.toByte()
internal const val UNIFFI_CALL_UNEXPECTED_ERROR = 2.toByte()

@Structure.FieldOrder("code", "error_buf")
internal open class UniffiRustCallStatus : Structure() {
    @JvmField var code: Byte = 0
    @JvmField var error_buf: RustBuffer.ByValue = RustBuffer.ByValue()

    class ByValue: UniffiRustCallStatus(), Structure.ByValue

    fun isSuccess(): Boolean {
        return code == UNIFFI_CALL_SUCCESS
    }

    fun isError(): Boolean {
        return code == UNIFFI_CALL_ERROR
    }

    fun isPanic(): Boolean {
        return code == UNIFFI_CALL_UNEXPECTED_ERROR
    }

    companion object {
        fun create(code: Byte, errorBuf: RustBuffer.ByValue): UniffiRustCallStatus.ByValue {
            val callStatus = UniffiRustCallStatus.ByValue()
            callStatus.code = code
            callStatus.error_buf = errorBuf
            return callStatus
        }
    }
}

class InternalException(message: String) : kotlin.Exception(message)

/**
 * Each top-level error class has a companion object that can lift the error from the call status's rust buffer
 *
 * @suppress
 */
interface UniffiRustCallStatusErrorHandler<E> {
    fun lift(error_buf: RustBuffer.ByValue): E;
}

// Helpers for calling Rust
// In practice we usually need to be synchronized to call this safely, so it doesn't
// synchronize itself

// Call a rust function that returns a Result<>.  Pass in the Error class companion that corresponds to the Err
private inline fun <U, E: kotlin.Exception> uniffiRustCallWithError(errorHandler: UniffiRustCallStatusErrorHandler<E>, callback: (UniffiRustCallStatus) -> U): U {
    var status = UniffiRustCallStatus()
    val return_value = callback(status)
    uniffiCheckCallStatus(errorHandler, status)
    return return_value
}

// Check UniffiRustCallStatus and throw an error if the call wasn't successful
private fun<E: kotlin.Exception> uniffiCheckCallStatus(errorHandler: UniffiRustCallStatusErrorHandler<E>, status: UniffiRustCallStatus) {
    if (status.isSuccess()) {
        return
    } else if (status.isError()) {
        throw errorHandler.lift(status.error_buf)
    } else if (status.isPanic()) {
        // when the rust code sees a panic, it tries to construct a rustbuffer
        // with the message.  but if that code panics, then it just sends back
        // an empty buffer.
        if (status.error_buf.len > 0) {
            throw InternalException(FfiConverterString.lift(status.error_buf))
        } else {
            throw InternalException("Rust panic")
        }
    } else {
        throw InternalException("Unknown rust call status: $status.code")
    }
}

/**
 * UniffiRustCallStatusErrorHandler implementation for times when we don't expect a CALL_ERROR
 *
 * @suppress
 */
object UniffiNullRustCallStatusErrorHandler: UniffiRustCallStatusErrorHandler<InternalException> {
    override fun lift(error_buf: RustBuffer.ByValue): InternalException {
        RustBuffer.free(error_buf)
        return InternalException("Unexpected CALL_ERROR")
    }
}

// Call a rust function that returns a plain value
private inline fun <U> uniffiRustCall(callback: (UniffiRustCallStatus) -> U): U {
    return uniffiRustCallWithError(UniffiNullRustCallStatusErrorHandler, callback)
}

internal inline fun<T> uniffiTraitInterfaceCall(
    callStatus: UniffiRustCallStatus,
    makeCall: () -> T,
    writeReturn: (T) -> Unit,
) {
    try {
        writeReturn(makeCall())
    } catch(e: kotlin.Exception) {
        callStatus.code = UNIFFI_CALL_UNEXPECTED_ERROR
        callStatus.error_buf = FfiConverterString.lower(e.toString())
    }
}

internal inline fun<T, reified E: Throwable> uniffiTraitInterfaceCallWithError(
    callStatus: UniffiRustCallStatus,
    makeCall: () -> T,
    writeReturn: (T) -> Unit,
    lowerError: (E) -> RustBuffer.ByValue
) {
    try {
        writeReturn(makeCall())
    } catch(e: kotlin.Exception) {
        if (e is E) {
            callStatus.code = UNIFFI_CALL_ERROR
            callStatus.error_buf = lowerError(e)
        } else {
            callStatus.code = UNIFFI_CALL_UNEXPECTED_ERROR
            callStatus.error_buf = FfiConverterString.lower(e.toString())
        }
    }
}
// Map handles to objects
//
// This is used pass an opaque 64-bit handle representing a foreign object to the Rust code.
internal class UniffiHandleMap<T: Any> {
    private val map = ConcurrentHashMap<Long, T>()
    private val counter = java.util.concurrent.atomic.AtomicLong(0)

    val size: Int
        get() = map.size

    // Insert a new object into the handle map and get a handle for it
    fun insert(obj: T): Long {
        val handle = counter.getAndAdd(1)
        map.put(handle, obj)
        return handle
    }

    // Get an object from the handle map
    fun get(handle: Long): T {
        return map.get(handle) ?: throw InternalException("UniffiHandleMap.get: Invalid handle")
    }

    // Remove an entry from the handlemap and get the Kotlin object back
    fun remove(handle: Long): T {
        return map.remove(handle) ?: throw InternalException("UniffiHandleMap: Invalid handle")
    }
}

// Contains loading, initialization code,
// and the FFI Function declarations in a com.sun.jna.Library.
@Synchronized
private fun findLibraryName(componentName: String): String {
    val libOverride = System.getProperty("uniffi.component.$componentName.libraryOverride")
    if (libOverride != null) {
        return libOverride
    }
    return "restsend_sdk"
}

private inline fun <reified Lib : Library> loadIndirect(
    componentName: String
): Lib {
    return Native.load<Lib>(findLibraryName(componentName), Lib::class.java)
}

// Define FFI callback types
internal interface UniffiRustFutureContinuationCallback : com.sun.jna.Callback {
    fun callback(`data`: Long,`pollResult`: Byte,)
}
internal interface UniffiForeignFutureFree : com.sun.jna.Callback {
    fun callback(`handle`: Long,)
}
internal interface UniffiCallbackInterfaceFree : com.sun.jna.Callback {
    fun callback(`handle`: Long,)
}
@Structure.FieldOrder("handle", "free")
internal open class UniffiForeignFuture(
    @JvmField internal var `handle`: Long = 0.toLong(),
    @JvmField internal var `free`: UniffiForeignFutureFree? = null,
) : Structure() {
    class UniffiByValue(
        `handle`: Long = 0.toLong(),
        `free`: UniffiForeignFutureFree? = null,
    ): UniffiForeignFuture(`handle`,`free`,), Structure.ByValue

   internal fun uniffiSetValue(other: UniffiForeignFuture) {
        `handle` = other.`handle`
        `free` = other.`free`
    }

}
@Structure.FieldOrder("returnValue", "callStatus")
internal open class UniffiForeignFutureStructU8(
    @JvmField internal var `returnValue`: Byte = 0.toByte(),
    @JvmField internal var `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
) : Structure() {
    class UniffiByValue(
        `returnValue`: Byte = 0.toByte(),
        `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
    ): UniffiForeignFutureStructU8(`returnValue`,`callStatus`,), Structure.ByValue

   internal fun uniffiSetValue(other: UniffiForeignFutureStructU8) {
        `returnValue` = other.`returnValue`
        `callStatus` = other.`callStatus`
    }

}
internal interface UniffiForeignFutureCompleteU8 : com.sun.jna.Callback {
    fun callback(`callbackData`: Long,`result`: UniffiForeignFutureStructU8.UniffiByValue,)
}
@Structure.FieldOrder("returnValue", "callStatus")
internal open class UniffiForeignFutureStructI8(
    @JvmField internal var `returnValue`: Byte = 0.toByte(),
    @JvmField internal var `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
) : Structure() {
    class UniffiByValue(
        `returnValue`: Byte = 0.toByte(),
        `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
    ): UniffiForeignFutureStructI8(`returnValue`,`callStatus`,), Structure.ByValue

   internal fun uniffiSetValue(other: UniffiForeignFutureStructI8) {
        `returnValue` = other.`returnValue`
        `callStatus` = other.`callStatus`
    }

}
internal interface UniffiForeignFutureCompleteI8 : com.sun.jna.Callback {
    fun callback(`callbackData`: Long,`result`: UniffiForeignFutureStructI8.UniffiByValue,)
}
@Structure.FieldOrder("returnValue", "callStatus")
internal open class UniffiForeignFutureStructU16(
    @JvmField internal var `returnValue`: Short = 0.toShort(),
    @JvmField internal var `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
) : Structure() {
    class UniffiByValue(
        `returnValue`: Short = 0.toShort(),
        `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
    ): UniffiForeignFutureStructU16(`returnValue`,`callStatus`,), Structure.ByValue

   internal fun uniffiSetValue(other: UniffiForeignFutureStructU16) {
        `returnValue` = other.`returnValue`
        `callStatus` = other.`callStatus`
    }

}
internal interface UniffiForeignFutureCompleteU16 : com.sun.jna.Callback {
    fun callback(`callbackData`: Long,`result`: UniffiForeignFutureStructU16.UniffiByValue,)
}
@Structure.FieldOrder("returnValue", "callStatus")
internal open class UniffiForeignFutureStructI16(
    @JvmField internal var `returnValue`: Short = 0.toShort(),
    @JvmField internal var `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
) : Structure() {
    class UniffiByValue(
        `returnValue`: Short = 0.toShort(),
        `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
    ): UniffiForeignFutureStructI16(`returnValue`,`callStatus`,), Structure.ByValue

   internal fun uniffiSetValue(other: UniffiForeignFutureStructI16) {
        `returnValue` = other.`returnValue`
        `callStatus` = other.`callStatus`
    }

}
internal interface UniffiForeignFutureCompleteI16 : com.sun.jna.Callback {
    fun callback(`callbackData`: Long,`result`: UniffiForeignFutureStructI16.UniffiByValue,)
}
@Structure.FieldOrder("returnValue", "callStatus")
internal open class UniffiForeignFutureStructU32(
    @JvmField internal var `returnValue`: Int = 0,
    @JvmField internal var `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
) : Structure() {
    class UniffiByValue(
        `returnValue`: Int = 0,
        `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
    ): UniffiForeignFutureStructU32(`returnValue`,`callStatus`,), Structure.ByValue

   internal fun uniffiSetValue(other: UniffiForeignFutureStructU32) {
        `returnValue` = other.`returnValue`
        `callStatus` = other.`callStatus`
    }

}
internal interface UniffiForeignFutureCompleteU32 : com.sun.jna.Callback {
    fun callback(`callbackData`: Long,`result`: UniffiForeignFutureStructU32.UniffiByValue,)
}
@Structure.FieldOrder("returnValue", "callStatus")
internal open class UniffiForeignFutureStructI32(
    @JvmField internal var `returnValue`: Int = 0,
    @JvmField internal var `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
) : Structure() {
    class UniffiByValue(
        `returnValue`: Int = 0,
        `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
    ): UniffiForeignFutureStructI32(`returnValue`,`callStatus`,), Structure.ByValue

   internal fun uniffiSetValue(other: UniffiForeignFutureStructI32) {
        `returnValue` = other.`returnValue`
        `callStatus` = other.`callStatus`
    }

}
internal interface UniffiForeignFutureCompleteI32 : com.sun.jna.Callback {
    fun callback(`callbackData`: Long,`result`: UniffiForeignFutureStructI32.UniffiByValue,)
}
@Structure.FieldOrder("returnValue", "callStatus")
internal open class UniffiForeignFutureStructU64(
    @JvmField internal var `returnValue`: Long = 0.toLong(),
    @JvmField internal var `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
) : Structure() {
    class UniffiByValue(
        `returnValue`: Long = 0.toLong(),
        `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
    ): UniffiForeignFutureStructU64(`returnValue`,`callStatus`,), Structure.ByValue

   internal fun uniffiSetValue(other: UniffiForeignFutureStructU64) {
        `returnValue` = other.`returnValue`
        `callStatus` = other.`callStatus`
    }

}
internal interface UniffiForeignFutureCompleteU64 : com.sun.jna.Callback {
    fun callback(`callbackData`: Long,`result`: UniffiForeignFutureStructU64.UniffiByValue,)
}
@Structure.FieldOrder("returnValue", "callStatus")
internal open class UniffiForeignFutureStructI64(
    @JvmField internal var `returnValue`: Long = 0.toLong(),
    @JvmField internal var `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
) : Structure() {
    class UniffiByValue(
        `returnValue`: Long = 0.toLong(),
        `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
    ): UniffiForeignFutureStructI64(`returnValue`,`callStatus`,), Structure.ByValue

   internal fun uniffiSetValue(other: UniffiForeignFutureStructI64) {
        `returnValue` = other.`returnValue`
        `callStatus` = other.`callStatus`
    }

}
internal interface UniffiForeignFutureCompleteI64 : com.sun.jna.Callback {
    fun callback(`callbackData`: Long,`result`: UniffiForeignFutureStructI64.UniffiByValue,)
}
@Structure.FieldOrder("returnValue", "callStatus")
internal open class UniffiForeignFutureStructF32(
    @JvmField internal var `returnValue`: Float = 0.0f,
    @JvmField internal var `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
) : Structure() {
    class UniffiByValue(
        `returnValue`: Float = 0.0f,
        `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
    ): UniffiForeignFutureStructF32(`returnValue`,`callStatus`,), Structure.ByValue

   internal fun uniffiSetValue(other: UniffiForeignFutureStructF32) {
        `returnValue` = other.`returnValue`
        `callStatus` = other.`callStatus`
    }

}
internal interface UniffiForeignFutureCompleteF32 : com.sun.jna.Callback {
    fun callback(`callbackData`: Long,`result`: UniffiForeignFutureStructF32.UniffiByValue,)
}
@Structure.FieldOrder("returnValue", "callStatus")
internal open class UniffiForeignFutureStructF64(
    @JvmField internal var `returnValue`: Double = 0.0,
    @JvmField internal var `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
) : Structure() {
    class UniffiByValue(
        `returnValue`: Double = 0.0,
        `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
    ): UniffiForeignFutureStructF64(`returnValue`,`callStatus`,), Structure.ByValue

   internal fun uniffiSetValue(other: UniffiForeignFutureStructF64) {
        `returnValue` = other.`returnValue`
        `callStatus` = other.`callStatus`
    }

}
internal interface UniffiForeignFutureCompleteF64 : com.sun.jna.Callback {
    fun callback(`callbackData`: Long,`result`: UniffiForeignFutureStructF64.UniffiByValue,)
}
@Structure.FieldOrder("returnValue", "callStatus")
internal open class UniffiForeignFutureStructPointer(
    @JvmField internal var `returnValue`: Pointer = Pointer.NULL,
    @JvmField internal var `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
) : Structure() {
    class UniffiByValue(
        `returnValue`: Pointer = Pointer.NULL,
        `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
    ): UniffiForeignFutureStructPointer(`returnValue`,`callStatus`,), Structure.ByValue

   internal fun uniffiSetValue(other: UniffiForeignFutureStructPointer) {
        `returnValue` = other.`returnValue`
        `callStatus` = other.`callStatus`
    }

}
internal interface UniffiForeignFutureCompletePointer : com.sun.jna.Callback {
    fun callback(`callbackData`: Long,`result`: UniffiForeignFutureStructPointer.UniffiByValue,)
}
@Structure.FieldOrder("returnValue", "callStatus")
internal open class UniffiForeignFutureStructRustBuffer(
    @JvmField internal var `returnValue`: RustBuffer.ByValue = RustBuffer.ByValue(),
    @JvmField internal var `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
) : Structure() {
    class UniffiByValue(
        `returnValue`: RustBuffer.ByValue = RustBuffer.ByValue(),
        `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
    ): UniffiForeignFutureStructRustBuffer(`returnValue`,`callStatus`,), Structure.ByValue

   internal fun uniffiSetValue(other: UniffiForeignFutureStructRustBuffer) {
        `returnValue` = other.`returnValue`
        `callStatus` = other.`callStatus`
    }

}
internal interface UniffiForeignFutureCompleteRustBuffer : com.sun.jna.Callback {
    fun callback(`callbackData`: Long,`result`: UniffiForeignFutureStructRustBuffer.UniffiByValue,)
}
@Structure.FieldOrder("callStatus")
internal open class UniffiForeignFutureStructVoid(
    @JvmField internal var `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
) : Structure() {
    class UniffiByValue(
        `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
    ): UniffiForeignFutureStructVoid(`callStatus`,), Structure.ByValue

   internal fun uniffiSetValue(other: UniffiForeignFutureStructVoid) {
        `callStatus` = other.`callStatus`
    }

}
internal interface UniffiForeignFutureCompleteVoid : com.sun.jna.Callback {
    fun callback(`callbackData`: Long,`result`: UniffiForeignFutureStructVoid.UniffiByValue,)
}
internal interface UniffiCallbackInterfaceCountableCallbackMethod0 : com.sun.jna.Callback {
    fun callback(`uniffiHandle`: Long,`content`: RustBuffer.ByValue,`uniffiOutReturn`: ByteByReference,uniffiCallStatus: UniffiRustCallStatus,)
}
internal interface UniffiCallbackInterfaceDownloadCallbackMethod0 : com.sun.jna.Callback {
    fun callback(`uniffiHandle`: Long,`progress`: Long,`total`: Long,`uniffiOutReturn`: Pointer,uniffiCallStatus: UniffiRustCallStatus,)
}
internal interface UniffiCallbackInterfaceDownloadCallbackMethod1 : com.sun.jna.Callback {
    fun callback(`uniffiHandle`: Long,`url`: RustBuffer.ByValue,`fileName`: RustBuffer.ByValue,`uniffiOutReturn`: Pointer,uniffiCallStatus: UniffiRustCallStatus,)
}
internal interface UniffiCallbackInterfaceDownloadCallbackMethod2 : com.sun.jna.Callback {
    fun callback(`uniffiHandle`: Long,`e`: RustBuffer.ByValue,`uniffiOutReturn`: Pointer,uniffiCallStatus: UniffiRustCallStatus,)
}
internal interface UniffiCallbackInterfaceMessageCallbackMethod0 : com.sun.jna.Callback {
    fun callback(`uniffiHandle`: Long,`chatId`: RustBuffer.ByValue,`uniffiOutReturn`: Pointer,uniffiCallStatus: UniffiRustCallStatus,)
}
internal interface UniffiCallbackInterfaceMessageCallbackMethod1 : com.sun.jna.Callback {
    fun callback(`uniffiHandle`: Long,`progress`: Long,`total`: Long,`uniffiOutReturn`: Pointer,uniffiCallStatus: UniffiRustCallStatus,)
}
internal interface UniffiCallbackInterfaceMessageCallbackMethod2 : com.sun.jna.Callback {
    fun callback(`uniffiHandle`: Long,`result`: RustBuffer.ByValue,`uniffiOutReturn`: RustBuffer,uniffiCallStatus: UniffiRustCallStatus,)
}
internal interface UniffiCallbackInterfaceMessageCallbackMethod3 : com.sun.jna.Callback {
    fun callback(`uniffiHandle`: Long,`req`: RustBuffer.ByValue,`uniffiOutReturn`: Pointer,uniffiCallStatus: UniffiRustCallStatus,)
}
internal interface UniffiCallbackInterfaceMessageCallbackMethod4 : com.sun.jna.Callback {
    fun callback(`uniffiHandle`: Long,`reason`: RustBuffer.ByValue,`uniffiOutReturn`: Pointer,uniffiCallStatus: UniffiRustCallStatus,)
}
internal interface UniffiCallbackInterfaceRsCallbackMethod0 : com.sun.jna.Callback {
    fun callback(`uniffiHandle`: Long,`uniffiOutReturn`: Pointer,uniffiCallStatus: UniffiRustCallStatus,)
}
internal interface UniffiCallbackInterfaceRsCallbackMethod1 : com.sun.jna.Callback {
    fun callback(`uniffiHandle`: Long,`uniffiOutReturn`: Pointer,uniffiCallStatus: UniffiRustCallStatus,)
}
internal interface UniffiCallbackInterfaceRsCallbackMethod2 : com.sun.jna.Callback {
    fun callback(`uniffiHandle`: Long,`reason`: RustBuffer.ByValue,`uniffiOutReturn`: Pointer,uniffiCallStatus: UniffiRustCallStatus,)
}
internal interface UniffiCallbackInterfaceRsCallbackMethod3 : com.sun.jna.Callback {
    fun callback(`uniffiHandle`: Long,`reason`: RustBuffer.ByValue,`uniffiOutReturn`: Pointer,uniffiCallStatus: UniffiRustCallStatus,)
}
internal interface UniffiCallbackInterfaceRsCallbackMethod4 : com.sun.jna.Callback {
    fun callback(`uniffiHandle`: Long,`reason`: RustBuffer.ByValue,`uniffiOutReturn`: Pointer,uniffiCallStatus: UniffiRustCallStatus,)
}
internal interface UniffiCallbackInterfaceRsCallbackMethod5 : com.sun.jna.Callback {
    fun callback(`uniffiHandle`: Long,`req`: RustBuffer.ByValue,`uniffiOutReturn`: RustBuffer,uniffiCallStatus: UniffiRustCallStatus,)
}
internal interface UniffiCallbackInterfaceRsCallbackMethod6 : com.sun.jna.Callback {
    fun callback(`uniffiHandle`: Long,`req`: RustBuffer.ByValue,`uniffiOutReturn`: RustBuffer,uniffiCallStatus: UniffiRustCallStatus,)
}
internal interface UniffiCallbackInterfaceRsCallbackMethod7 : com.sun.jna.Callback {
    fun callback(`uniffiHandle`: Long,`topicId`: RustBuffer.ByValue,`message`: RustBuffer.ByValue,`uniffiOutReturn`: Pointer,uniffiCallStatus: UniffiRustCallStatus,)
}
internal interface UniffiCallbackInterfaceRsCallbackMethod8 : com.sun.jna.Callback {
    fun callback(`uniffiHandle`: Long,`topicId`: RustBuffer.ByValue,`message`: RustBuffer.ByValue,`uniffiOutReturn`: RustBuffer,uniffiCallStatus: UniffiRustCallStatus,)
}
internal interface UniffiCallbackInterfaceRsCallbackMethod9 : com.sun.jna.Callback {
    fun callback(`uniffiHandle`: Long,`topicId`: RustBuffer.ByValue,`message`: RustBuffer.ByValue,`uniffiOutReturn`: Pointer,uniffiCallStatus: UniffiRustCallStatus,)
}
internal interface UniffiCallbackInterfaceRsCallbackMethod10 : com.sun.jna.Callback {
    fun callback(`uniffiHandle`: Long,`conversations`: RustBuffer.ByValue,`uniffiOutReturn`: Pointer,uniffiCallStatus: UniffiRustCallStatus,)
}
internal interface UniffiCallbackInterfaceRsCallbackMethod11 : com.sun.jna.Callback {
    fun callback(`uniffiHandle`: Long,`conversationId`: RustBuffer.ByValue,`uniffiOutReturn`: Pointer,uniffiCallStatus: UniffiRustCallStatus,)
}
internal interface UniffiCallbackInterfaceSyncChatLogsCallbackMethod0 : com.sun.jna.Callback {
    fun callback(`uniffiHandle`: Long,`r`: RustBuffer.ByValue,`uniffiOutReturn`: Pointer,uniffiCallStatus: UniffiRustCallStatus,)
}
internal interface UniffiCallbackInterfaceSyncChatLogsCallbackMethod1 : com.sun.jna.Callback {
    fun callback(`uniffiHandle`: Long,`e`: RustBuffer.ByValue,`uniffiOutReturn`: Pointer,uniffiCallStatus: UniffiRustCallStatus,)
}
internal interface UniffiCallbackInterfaceSyncConversationsCallbackMethod0 : com.sun.jna.Callback {
    fun callback(`uniffiHandle`: Long,`updatedAt`: RustBuffer.ByValue,`lastRemovedAt`: RustBuffer.ByValue,`count`: Int,`uniffiOutReturn`: Pointer,uniffiCallStatus: UniffiRustCallStatus,)
}
internal interface UniffiCallbackInterfaceSyncConversationsCallbackMethod1 : com.sun.jna.Callback {
    fun callback(`uniffiHandle`: Long,`e`: RustBuffer.ByValue,`uniffiOutReturn`: Pointer,uniffiCallStatus: UniffiRustCallStatus,)
}
internal interface UniffiCallbackInterfaceUploadCallbackMethod0 : com.sun.jna.Callback {
    fun callback(`uniffiHandle`: Long,`progress`: Long,`total`: Long,`uniffiOutReturn`: Pointer,uniffiCallStatus: UniffiRustCallStatus,)
}
internal interface UniffiCallbackInterfaceUploadCallbackMethod1 : com.sun.jna.Callback {
    fun callback(`uniffiHandle`: Long,`result`: RustBuffer.ByValue,`uniffiOutReturn`: Pointer,uniffiCallStatus: UniffiRustCallStatus,)
}
internal interface UniffiCallbackInterfaceUploadCallbackMethod2 : com.sun.jna.Callback {
    fun callback(`uniffiHandle`: Long,`e`: RustBuffer.ByValue,`uniffiOutReturn`: Pointer,uniffiCallStatus: UniffiRustCallStatus,)
}
@Structure.FieldOrder("isCountable", "uniffiFree")
internal open class UniffiVTableCallbackInterfaceCountableCallback(
    @JvmField internal var `isCountable`: UniffiCallbackInterfaceCountableCallbackMethod0? = null,
    @JvmField internal var `uniffiFree`: UniffiCallbackInterfaceFree? = null,
) : Structure() {
    class UniffiByValue(
        `isCountable`: UniffiCallbackInterfaceCountableCallbackMethod0? = null,
        `uniffiFree`: UniffiCallbackInterfaceFree? = null,
    ): UniffiVTableCallbackInterfaceCountableCallback(`isCountable`,`uniffiFree`,), Structure.ByValue

   internal fun uniffiSetValue(other: UniffiVTableCallbackInterfaceCountableCallback) {
        `isCountable` = other.`isCountable`
        `uniffiFree` = other.`uniffiFree`
    }

}
@Structure.FieldOrder("onProgress", "onSuccess", "onFail", "uniffiFree")
internal open class UniffiVTableCallbackInterfaceDownloadCallback(
    @JvmField internal var `onProgress`: UniffiCallbackInterfaceDownloadCallbackMethod0? = null,
    @JvmField internal var `onSuccess`: UniffiCallbackInterfaceDownloadCallbackMethod1? = null,
    @JvmField internal var `onFail`: UniffiCallbackInterfaceDownloadCallbackMethod2? = null,
    @JvmField internal var `uniffiFree`: UniffiCallbackInterfaceFree? = null,
) : Structure() {
    class UniffiByValue(
        `onProgress`: UniffiCallbackInterfaceDownloadCallbackMethod0? = null,
        `onSuccess`: UniffiCallbackInterfaceDownloadCallbackMethod1? = null,
        `onFail`: UniffiCallbackInterfaceDownloadCallbackMethod2? = null,
        `uniffiFree`: UniffiCallbackInterfaceFree? = null,
    ): UniffiVTableCallbackInterfaceDownloadCallback(`onProgress`,`onSuccess`,`onFail`,`uniffiFree`,), Structure.ByValue

   internal fun uniffiSetValue(other: UniffiVTableCallbackInterfaceDownloadCallback) {
        `onProgress` = other.`onProgress`
        `onSuccess` = other.`onSuccess`
        `onFail` = other.`onFail`
        `uniffiFree` = other.`uniffiFree`
    }

}
@Structure.FieldOrder("onSent", "onProgress", "onAttachmentUpload", "onAck", "onFail", "uniffiFree")
internal open class UniffiVTableCallbackInterfaceMessageCallback(
    @JvmField internal var `onSent`: UniffiCallbackInterfaceMessageCallbackMethod0? = null,
    @JvmField internal var `onProgress`: UniffiCallbackInterfaceMessageCallbackMethod1? = null,
    @JvmField internal var `onAttachmentUpload`: UniffiCallbackInterfaceMessageCallbackMethod2? = null,
    @JvmField internal var `onAck`: UniffiCallbackInterfaceMessageCallbackMethod3? = null,
    @JvmField internal var `onFail`: UniffiCallbackInterfaceMessageCallbackMethod4? = null,
    @JvmField internal var `uniffiFree`: UniffiCallbackInterfaceFree? = null,
) : Structure() {
    class UniffiByValue(
        `onSent`: UniffiCallbackInterfaceMessageCallbackMethod0? = null,
        `onProgress`: UniffiCallbackInterfaceMessageCallbackMethod1? = null,
        `onAttachmentUpload`: UniffiCallbackInterfaceMessageCallbackMethod2? = null,
        `onAck`: UniffiCallbackInterfaceMessageCallbackMethod3? = null,
        `onFail`: UniffiCallbackInterfaceMessageCallbackMethod4? = null,
        `uniffiFree`: UniffiCallbackInterfaceFree? = null,
    ): UniffiVTableCallbackInterfaceMessageCallback(`onSent`,`onProgress`,`onAttachmentUpload`,`onAck`,`onFail`,`uniffiFree`,), Structure.ByValue

   internal fun uniffiSetValue(other: UniffiVTableCallbackInterfaceMessageCallback) {
        `onSent` = other.`onSent`
        `onProgress` = other.`onProgress`
        `onAttachmentUpload` = other.`onAttachmentUpload`
        `onAck` = other.`onAck`
        `onFail` = other.`onFail`
        `uniffiFree` = other.`uniffiFree`
    }

}
@Structure.FieldOrder("onConnected", "onConnecting", "onTokenExpired", "onNetBroken", "onKickoffByOtherClient", "onSystemRequest", "onUnknownRequest", "onTopicTyping", "onNewMessage", "onTopicRead", "onConversationsUpdated", "onConversationRemoved", "uniffiFree")
internal open class UniffiVTableCallbackInterfaceRsCallback(
    @JvmField internal var `onConnected`: UniffiCallbackInterfaceRsCallbackMethod0? = null,
    @JvmField internal var `onConnecting`: UniffiCallbackInterfaceRsCallbackMethod1? = null,
    @JvmField internal var `onTokenExpired`: UniffiCallbackInterfaceRsCallbackMethod2? = null,
    @JvmField internal var `onNetBroken`: UniffiCallbackInterfaceRsCallbackMethod3? = null,
    @JvmField internal var `onKickoffByOtherClient`: UniffiCallbackInterfaceRsCallbackMethod4? = null,
    @JvmField internal var `onSystemRequest`: UniffiCallbackInterfaceRsCallbackMethod5? = null,
    @JvmField internal var `onUnknownRequest`: UniffiCallbackInterfaceRsCallbackMethod6? = null,
    @JvmField internal var `onTopicTyping`: UniffiCallbackInterfaceRsCallbackMethod7? = null,
    @JvmField internal var `onNewMessage`: UniffiCallbackInterfaceRsCallbackMethod8? = null,
    @JvmField internal var `onTopicRead`: UniffiCallbackInterfaceRsCallbackMethod9? = null,
    @JvmField internal var `onConversationsUpdated`: UniffiCallbackInterfaceRsCallbackMethod10? = null,
    @JvmField internal var `onConversationRemoved`: UniffiCallbackInterfaceRsCallbackMethod11? = null,
    @JvmField internal var `uniffiFree`: UniffiCallbackInterfaceFree? = null,
) : Structure() {
    class UniffiByValue(
        `onConnected`: UniffiCallbackInterfaceRsCallbackMethod0? = null,
        `onConnecting`: UniffiCallbackInterfaceRsCallbackMethod1? = null,
        `onTokenExpired`: UniffiCallbackInterfaceRsCallbackMethod2? = null,
        `onNetBroken`: UniffiCallbackInterfaceRsCallbackMethod3? = null,
        `onKickoffByOtherClient`: UniffiCallbackInterfaceRsCallbackMethod4? = null,
        `onSystemRequest`: UniffiCallbackInterfaceRsCallbackMethod5? = null,
        `onUnknownRequest`: UniffiCallbackInterfaceRsCallbackMethod6? = null,
        `onTopicTyping`: UniffiCallbackInterfaceRsCallbackMethod7? = null,
        `onNewMessage`: UniffiCallbackInterfaceRsCallbackMethod8? = null,
        `onTopicRead`: UniffiCallbackInterfaceRsCallbackMethod9? = null,
        `onConversationsUpdated`: UniffiCallbackInterfaceRsCallbackMethod10? = null,
        `onConversationRemoved`: UniffiCallbackInterfaceRsCallbackMethod11? = null,
        `uniffiFree`: UniffiCallbackInterfaceFree? = null,
    ): UniffiVTableCallbackInterfaceRsCallback(`onConnected`,`onConnecting`,`onTokenExpired`,`onNetBroken`,`onKickoffByOtherClient`,`onSystemRequest`,`onUnknownRequest`,`onTopicTyping`,`onNewMessage`,`onTopicRead`,`onConversationsUpdated`,`onConversationRemoved`,`uniffiFree`,), Structure.ByValue

   internal fun uniffiSetValue(other: UniffiVTableCallbackInterfaceRsCallback) {
        `onConnected` = other.`onConnected`
        `onConnecting` = other.`onConnecting`
        `onTokenExpired` = other.`onTokenExpired`
        `onNetBroken` = other.`onNetBroken`
        `onKickoffByOtherClient` = other.`onKickoffByOtherClient`
        `onSystemRequest` = other.`onSystemRequest`
        `onUnknownRequest` = other.`onUnknownRequest`
        `onTopicTyping` = other.`onTopicTyping`
        `onNewMessage` = other.`onNewMessage`
        `onTopicRead` = other.`onTopicRead`
        `onConversationsUpdated` = other.`onConversationsUpdated`
        `onConversationRemoved` = other.`onConversationRemoved`
        `uniffiFree` = other.`uniffiFree`
    }

}
@Structure.FieldOrder("onSuccess", "onFail", "uniffiFree")
internal open class UniffiVTableCallbackInterfaceSyncChatLogsCallback(
    @JvmField internal var `onSuccess`: UniffiCallbackInterfaceSyncChatLogsCallbackMethod0? = null,
    @JvmField internal var `onFail`: UniffiCallbackInterfaceSyncChatLogsCallbackMethod1? = null,
    @JvmField internal var `uniffiFree`: UniffiCallbackInterfaceFree? = null,
) : Structure() {
    class UniffiByValue(
        `onSuccess`: UniffiCallbackInterfaceSyncChatLogsCallbackMethod0? = null,
        `onFail`: UniffiCallbackInterfaceSyncChatLogsCallbackMethod1? = null,
        `uniffiFree`: UniffiCallbackInterfaceFree? = null,
    ): UniffiVTableCallbackInterfaceSyncChatLogsCallback(`onSuccess`,`onFail`,`uniffiFree`,), Structure.ByValue

   internal fun uniffiSetValue(other: UniffiVTableCallbackInterfaceSyncChatLogsCallback) {
        `onSuccess` = other.`onSuccess`
        `onFail` = other.`onFail`
        `uniffiFree` = other.`uniffiFree`
    }

}
@Structure.FieldOrder("onSuccess", "onFail", "uniffiFree")
internal open class UniffiVTableCallbackInterfaceSyncConversationsCallback(
    @JvmField internal var `onSuccess`: UniffiCallbackInterfaceSyncConversationsCallbackMethod0? = null,
    @JvmField internal var `onFail`: UniffiCallbackInterfaceSyncConversationsCallbackMethod1? = null,
    @JvmField internal var `uniffiFree`: UniffiCallbackInterfaceFree? = null,
) : Structure() {
    class UniffiByValue(
        `onSuccess`: UniffiCallbackInterfaceSyncConversationsCallbackMethod0? = null,
        `onFail`: UniffiCallbackInterfaceSyncConversationsCallbackMethod1? = null,
        `uniffiFree`: UniffiCallbackInterfaceFree? = null,
    ): UniffiVTableCallbackInterfaceSyncConversationsCallback(`onSuccess`,`onFail`,`uniffiFree`,), Structure.ByValue

   internal fun uniffiSetValue(other: UniffiVTableCallbackInterfaceSyncConversationsCallback) {
        `onSuccess` = other.`onSuccess`
        `onFail` = other.`onFail`
        `uniffiFree` = other.`uniffiFree`
    }

}
@Structure.FieldOrder("onProgress", "onSuccess", "onFail", "uniffiFree")
internal open class UniffiVTableCallbackInterfaceUploadCallback(
    @JvmField internal var `onProgress`: UniffiCallbackInterfaceUploadCallbackMethod0? = null,
    @JvmField internal var `onSuccess`: UniffiCallbackInterfaceUploadCallbackMethod1? = null,
    @JvmField internal var `onFail`: UniffiCallbackInterfaceUploadCallbackMethod2? = null,
    @JvmField internal var `uniffiFree`: UniffiCallbackInterfaceFree? = null,
) : Structure() {
    class UniffiByValue(
        `onProgress`: UniffiCallbackInterfaceUploadCallbackMethod0? = null,
        `onSuccess`: UniffiCallbackInterfaceUploadCallbackMethod1? = null,
        `onFail`: UniffiCallbackInterfaceUploadCallbackMethod2? = null,
        `uniffiFree`: UniffiCallbackInterfaceFree? = null,
    ): UniffiVTableCallbackInterfaceUploadCallback(`onProgress`,`onSuccess`,`onFail`,`uniffiFree`,), Structure.ByValue

   internal fun uniffiSetValue(other: UniffiVTableCallbackInterfaceUploadCallback) {
        `onProgress` = other.`onProgress`
        `onSuccess` = other.`onSuccess`
        `onFail` = other.`onFail`
        `uniffiFree` = other.`uniffiFree`
    }

}



































































































































































































































































// For large crates we prevent `MethodTooLargeException` (see #2340)
// N.B. the name of the extension is very misleading, since it is 
// rather `InterfaceTooLargeException`, caused by too many methods 
// in the interface for large crates.
//
// By splitting the otherwise huge interface into two parts
// * UniffiLib 
// * IntegrityCheckingUniffiLib (this)
// we allow for ~2x as many methods in the UniffiLib interface.
// 
// The `ffi_uniffi_contract_version` method and all checksum methods are put 
// into `IntegrityCheckingUniffiLib` and these methods are called only once,
// when the library is loaded.
internal interface IntegrityCheckingUniffiLib : Library {
    // Integrity check functions only
    fun uniffi_restsend_sdk_checksum_func_get_current_user(
): Short
fun uniffi_restsend_sdk_checksum_func_guest_login(
): Short
fun uniffi_restsend_sdk_checksum_func_init_log(
): Short
fun uniffi_restsend_sdk_checksum_func_login_with_password(
): Short
fun uniffi_restsend_sdk_checksum_func_login_with_token(
): Short
fun uniffi_restsend_sdk_checksum_func_logout(
): Short
fun uniffi_restsend_sdk_checksum_func_set_current_user(
): Short
fun uniffi_restsend_sdk_checksum_func_signup(
): Short
fun uniffi_restsend_sdk_checksum_method_client_accept_topic_join(
): Short
fun uniffi_restsend_sdk_checksum_method_client_add_topic_admin(
): Short
fun uniffi_restsend_sdk_checksum_method_client_add_topic_member(
): Short
fun uniffi_restsend_sdk_checksum_method_client_app_active(
): Short
fun uniffi_restsend_sdk_checksum_method_client_batch_sync_chatlogs(
): Short
fun uniffi_restsend_sdk_checksum_method_client_cancel_send(
): Short
fun uniffi_restsend_sdk_checksum_method_client_clean_messages(
): Short
fun uniffi_restsend_sdk_checksum_method_client_clear_conversation(
): Short
fun uniffi_restsend_sdk_checksum_method_client_connect(
): Short
fun uniffi_restsend_sdk_checksum_method_client_connection_status(
): Short
fun uniffi_restsend_sdk_checksum_method_client_create_chat(
): Short
fun uniffi_restsend_sdk_checksum_method_client_create_topic(
): Short
fun uniffi_restsend_sdk_checksum_method_client_decline_topic_join(
): Short
fun uniffi_restsend_sdk_checksum_method_client_dismiss_topic(
): Short
fun uniffi_restsend_sdk_checksum_method_client_do_read(
): Short
fun uniffi_restsend_sdk_checksum_method_client_do_recall(
): Short
fun uniffi_restsend_sdk_checksum_method_client_do_send(
): Short
fun uniffi_restsend_sdk_checksum_method_client_do_send_file(
): Short
fun uniffi_restsend_sdk_checksum_method_client_do_send_image(
): Short
fun uniffi_restsend_sdk_checksum_method_client_do_send_invite(
): Short
fun uniffi_restsend_sdk_checksum_method_client_do_send_link(
): Short
fun uniffi_restsend_sdk_checksum_method_client_do_send_location(
): Short
fun uniffi_restsend_sdk_checksum_method_client_do_send_logs(
): Short
fun uniffi_restsend_sdk_checksum_method_client_do_send_text(
): Short
fun uniffi_restsend_sdk_checksum_method_client_do_send_video(
): Short
fun uniffi_restsend_sdk_checksum_method_client_do_send_voice(
): Short
fun uniffi_restsend_sdk_checksum_method_client_do_typing(
): Short
fun uniffi_restsend_sdk_checksum_method_client_do_update_extra(
): Short
fun uniffi_restsend_sdk_checksum_method_client_download_file(
): Short
fun uniffi_restsend_sdk_checksum_method_client_fetch_chat_logs_desc(
): Short
fun uniffi_restsend_sdk_checksum_method_client_get_chat_log(
): Short
fun uniffi_restsend_sdk_checksum_method_client_get_conversation(
): Short
fun uniffi_restsend_sdk_checksum_method_client_get_topic(
): Short
fun uniffi_restsend_sdk_checksum_method_client_get_topic_admins(
): Short
fun uniffi_restsend_sdk_checksum_method_client_get_topic_knocks(
): Short
fun uniffi_restsend_sdk_checksum_method_client_get_topic_members(
): Short
fun uniffi_restsend_sdk_checksum_method_client_get_topic_owner(
): Short
fun uniffi_restsend_sdk_checksum_method_client_get_unread_count(
): Short
fun uniffi_restsend_sdk_checksum_method_client_get_user(
): Short
fun uniffi_restsend_sdk_checksum_method_client_get_users(
): Short
fun uniffi_restsend_sdk_checksum_method_client_join_topic(
): Short
fun uniffi_restsend_sdk_checksum_method_client_quit_topic(
): Short
fun uniffi_restsend_sdk_checksum_method_client_remove_conversation(
): Short
fun uniffi_restsend_sdk_checksum_method_client_remove_messages(
): Short
fun uniffi_restsend_sdk_checksum_method_client_remove_topic_admin(
): Short
fun uniffi_restsend_sdk_checksum_method_client_remove_topic_member(
): Short
fun uniffi_restsend_sdk_checksum_method_client_save_chat_logs(
): Short
fun uniffi_restsend_sdk_checksum_method_client_search_chat_log(
): Short
fun uniffi_restsend_sdk_checksum_method_client_send_chat_request(
): Short
fun uniffi_restsend_sdk_checksum_method_client_send_chat_request_via_connection(
): Short
fun uniffi_restsend_sdk_checksum_method_client_set_all_conversations_read(
): Short
fun uniffi_restsend_sdk_checksum_method_client_set_allow_guest_chat(
): Short
fun uniffi_restsend_sdk_checksum_method_client_set_callback(
): Short
fun uniffi_restsend_sdk_checksum_method_client_set_conversation_extra(
): Short
fun uniffi_restsend_sdk_checksum_method_client_set_conversation_mute(
): Short
fun uniffi_restsend_sdk_checksum_method_client_set_conversation_read(
): Short
fun uniffi_restsend_sdk_checksum_method_client_set_conversation_remark(
): Short
fun uniffi_restsend_sdk_checksum_method_client_set_conversation_sticky(
): Short
fun uniffi_restsend_sdk_checksum_method_client_set_conversation_tags(
): Short
fun uniffi_restsend_sdk_checksum_method_client_set_countable_callback(
): Short
fun uniffi_restsend_sdk_checksum_method_client_set_keepalive_interval_secs(
): Short
fun uniffi_restsend_sdk_checksum_method_client_set_user_block(
): Short
fun uniffi_restsend_sdk_checksum_method_client_set_user_remark(
): Short
fun uniffi_restsend_sdk_checksum_method_client_set_user_star(
): Short
fun uniffi_restsend_sdk_checksum_method_client_shutdown(
): Short
fun uniffi_restsend_sdk_checksum_method_client_silent_topic(
): Short
fun uniffi_restsend_sdk_checksum_method_client_silent_topic_member(
): Short
fun uniffi_restsend_sdk_checksum_method_client_sync_chat_logs(
): Short
fun uniffi_restsend_sdk_checksum_method_client_sync_conversations(
): Short
fun uniffi_restsend_sdk_checksum_method_client_transfer_topic(
): Short
fun uniffi_restsend_sdk_checksum_method_client_try_sync_chat_logs(
): Short
fun uniffi_restsend_sdk_checksum_method_client_update_topic(
): Short
fun uniffi_restsend_sdk_checksum_method_client_update_topic_notice(
): Short
fun uniffi_restsend_sdk_checksum_constructor_client_new(
): Short
fun uniffi_restsend_sdk_checksum_method_countablecallback_is_countable(
): Short
fun uniffi_restsend_sdk_checksum_method_downloadcallback_on_progress(
): Short
fun uniffi_restsend_sdk_checksum_method_downloadcallback_on_success(
): Short
fun uniffi_restsend_sdk_checksum_method_downloadcallback_on_fail(
): Short
fun uniffi_restsend_sdk_checksum_method_messagecallback_on_sent(
): Short
fun uniffi_restsend_sdk_checksum_method_messagecallback_on_progress(
): Short
fun uniffi_restsend_sdk_checksum_method_messagecallback_on_attachment_upload(
): Short
fun uniffi_restsend_sdk_checksum_method_messagecallback_on_ack(
): Short
fun uniffi_restsend_sdk_checksum_method_messagecallback_on_fail(
): Short
fun uniffi_restsend_sdk_checksum_method_rscallback_on_connected(
): Short
fun uniffi_restsend_sdk_checksum_method_rscallback_on_connecting(
): Short
fun uniffi_restsend_sdk_checksum_method_rscallback_on_token_expired(
): Short
fun uniffi_restsend_sdk_checksum_method_rscallback_on_net_broken(
): Short
fun uniffi_restsend_sdk_checksum_method_rscallback_on_kickoff_by_other_client(
): Short
fun uniffi_restsend_sdk_checksum_method_rscallback_on_system_request(
): Short
fun uniffi_restsend_sdk_checksum_method_rscallback_on_unknown_request(
): Short
fun uniffi_restsend_sdk_checksum_method_rscallback_on_topic_typing(
): Short
fun uniffi_restsend_sdk_checksum_method_rscallback_on_new_message(
): Short
fun uniffi_restsend_sdk_checksum_method_rscallback_on_topic_read(
): Short
fun uniffi_restsend_sdk_checksum_method_rscallback_on_conversations_updated(
): Short
fun uniffi_restsend_sdk_checksum_method_rscallback_on_conversation_removed(
): Short
fun uniffi_restsend_sdk_checksum_method_syncchatlogscallback_on_success(
): Short
fun uniffi_restsend_sdk_checksum_method_syncchatlogscallback_on_fail(
): Short
fun uniffi_restsend_sdk_checksum_method_syncconversationscallback_on_success(
): Short
fun uniffi_restsend_sdk_checksum_method_syncconversationscallback_on_fail(
): Short
fun uniffi_restsend_sdk_checksum_method_uploadcallback_on_progress(
): Short
fun uniffi_restsend_sdk_checksum_method_uploadcallback_on_success(
): Short
fun uniffi_restsend_sdk_checksum_method_uploadcallback_on_fail(
): Short
fun ffi_restsend_sdk_uniffi_contract_version(
): Int

}

// A JNA Library to expose the extern-C FFI definitions.
// This is an implementation detail which will be called internally by the public API.
internal interface UniffiLib : Library {
    companion object {
        internal val INSTANCE: UniffiLib by lazy {
            val componentName = "restsend_sdk"
            // For large crates we prevent `MethodTooLargeException` (see #2340)
            // N.B. the name of the extension is very misleading, since it is 
            // rather `InterfaceTooLargeException`, caused by too many methods 
            // in the interface for large crates.
            //
            // By splitting the otherwise huge interface into two parts
            // * UniffiLib (this)
            // * IntegrityCheckingUniffiLib
            // And all checksum methods are put into `IntegrityCheckingUniffiLib`
            // we allow for ~2x as many methods in the UniffiLib interface.
            // 
            // Thus we first load the library with `loadIndirect` as `IntegrityCheckingUniffiLib`
            // so that we can (optionally!) call `uniffiCheckApiChecksums`...
            loadIndirect<IntegrityCheckingUniffiLib>(componentName)
                .also { lib: IntegrityCheckingUniffiLib ->
                    uniffiCheckContractApiVersion(lib)
                    uniffiCheckApiChecksums(lib)
                }
            // ... and then we load the library as `UniffiLib`
            // N.B. we cannot use `loadIndirect` once and then try to cast it to `UniffiLib`
            // => results in `java.lang.ClassCastException: com.sun.proxy.$Proxy cannot be cast to ...`
            // error. So we must call `loadIndirect` twice. For crates large enough
            // to trigger this issue, the performance impact is negligible, running on
            // a macOS M1 machine the `loadIndirect` call takes ~50ms.
            val lib = loadIndirect<UniffiLib>(componentName)
            // No need to check the contract version and checksums, since 
            // we already did that with `IntegrityCheckingUniffiLib` above.
            uniffiCallbackInterfaceCountableCallback.register(lib)
            uniffiCallbackInterfaceDownloadCallback.register(lib)
            uniffiCallbackInterfaceMessageCallback.register(lib)
            uniffiCallbackInterfaceRsCallback.register(lib)
            uniffiCallbackInterfaceSyncChatLogsCallback.register(lib)
            uniffiCallbackInterfaceSyncConversationsCallback.register(lib)
            uniffiCallbackInterfaceUploadCallback.register(lib)
            // Loading of library with integrity check done.
            lib
        }
        
        // The Cleaner for the whole library
        internal val CLEANER: UniffiCleaner by lazy {
            UniffiCleaner.create()
        }
    }

    // FFI functions
    fun uniffi_restsend_sdk_fn_clone_client(`ptr`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
): Pointer
fun uniffi_restsend_sdk_fn_free_client(`ptr`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
): Unit
fun uniffi_restsend_sdk_fn_constructor_client_new(`rootPath`: RustBuffer.ByValue,`dbName`: RustBuffer.ByValue,`info`: RustBuffer.ByValue,uniffi_out_err: UniffiRustCallStatus, 
): Pointer
fun uniffi_restsend_sdk_fn_method_client_accept_topic_join(`ptr`: Pointer,`topicId`: RustBuffer.ByValue,`userId`: RustBuffer.ByValue,`memo`: RustBuffer.ByValue,
): Long
fun uniffi_restsend_sdk_fn_method_client_add_topic_admin(`ptr`: Pointer,`topicId`: RustBuffer.ByValue,`userId`: RustBuffer.ByValue,
): Long
fun uniffi_restsend_sdk_fn_method_client_add_topic_member(`ptr`: Pointer,`topicId`: RustBuffer.ByValue,`userId`: RustBuffer.ByValue,
): Long
fun uniffi_restsend_sdk_fn_method_client_app_active(`ptr`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
): Unit
fun uniffi_restsend_sdk_fn_method_client_batch_sync_chatlogs(`ptr`: Pointer,`conversations`: RustBuffer.ByValue,`limit`: RustBuffer.ByValue,
): Long
fun uniffi_restsend_sdk_fn_method_client_cancel_send(`ptr`: Pointer,`chatId`: RustBuffer.ByValue,uniffi_out_err: UniffiRustCallStatus, 
): Unit
fun uniffi_restsend_sdk_fn_method_client_clean_messages(`ptr`: Pointer,`topicId`: RustBuffer.ByValue,
): Long
fun uniffi_restsend_sdk_fn_method_client_clear_conversation(`ptr`: Pointer,`topicId`: RustBuffer.ByValue,
): Long
fun uniffi_restsend_sdk_fn_method_client_connect(`ptr`: Pointer,
): Long
fun uniffi_restsend_sdk_fn_method_client_connection_status(`ptr`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
): RustBuffer.ByValue
fun uniffi_restsend_sdk_fn_method_client_create_chat(`ptr`: Pointer,`userId`: RustBuffer.ByValue,
): Long
fun uniffi_restsend_sdk_fn_method_client_create_topic(`ptr`: Pointer,`members`: RustBuffer.ByValue,`icon`: RustBuffer.ByValue,`name`: RustBuffer.ByValue,
): Long
fun uniffi_restsend_sdk_fn_method_client_decline_topic_join(`ptr`: Pointer,`topicId`: RustBuffer.ByValue,`userId`: RustBuffer.ByValue,`message`: RustBuffer.ByValue,
): Long
fun uniffi_restsend_sdk_fn_method_client_dismiss_topic(`ptr`: Pointer,`topicId`: RustBuffer.ByValue,
): Long
fun uniffi_restsend_sdk_fn_method_client_do_read(`ptr`: Pointer,`topicId`: RustBuffer.ByValue,
): Long
fun uniffi_restsend_sdk_fn_method_client_do_recall(`ptr`: Pointer,`topicId`: RustBuffer.ByValue,`chatId`: RustBuffer.ByValue,`callback`: RustBuffer.ByValue,
): Long
fun uniffi_restsend_sdk_fn_method_client_do_send(`ptr`: Pointer,`topicId`: RustBuffer.ByValue,`content`: RustBuffer.ByValue,`callback`: RustBuffer.ByValue,
): Long
fun uniffi_restsend_sdk_fn_method_client_do_send_file(`ptr`: Pointer,`topicId`: RustBuffer.ByValue,`attachment`: RustBuffer.ByValue,`mentions`: RustBuffer.ByValue,`mentionAll`: Byte,`replyId`: RustBuffer.ByValue,`callback`: RustBuffer.ByValue,
): Long
fun uniffi_restsend_sdk_fn_method_client_do_send_image(`ptr`: Pointer,`topicId`: RustBuffer.ByValue,`attachment`: RustBuffer.ByValue,`mentions`: RustBuffer.ByValue,`replyId`: RustBuffer.ByValue,`callback`: RustBuffer.ByValue,
): Long
fun uniffi_restsend_sdk_fn_method_client_do_send_invite(`ptr`: Pointer,`topicId`: RustBuffer.ByValue,`messsage`: RustBuffer.ByValue,`callback`: RustBuffer.ByValue,
): Long
fun uniffi_restsend_sdk_fn_method_client_do_send_link(`ptr`: Pointer,`topicId`: RustBuffer.ByValue,`url`: RustBuffer.ByValue,`placeholder`: RustBuffer.ByValue,`mentions`: RustBuffer.ByValue,`mentionAll`: Byte,`replyId`: RustBuffer.ByValue,`callback`: RustBuffer.ByValue,
): Long
fun uniffi_restsend_sdk_fn_method_client_do_send_location(`ptr`: Pointer,`topicId`: RustBuffer.ByValue,`latitude`: RustBuffer.ByValue,`longitude`: RustBuffer.ByValue,`address`: RustBuffer.ByValue,`mentions`: RustBuffer.ByValue,`mentionAll`: Byte,`replyId`: RustBuffer.ByValue,`callback`: RustBuffer.ByValue,
): Long
fun uniffi_restsend_sdk_fn_method_client_do_send_logs(`ptr`: Pointer,`topicId`: RustBuffer.ByValue,`sourceTopicId`: RustBuffer.ByValue,`logIds`: RustBuffer.ByValue,`mentions`: RustBuffer.ByValue,`mentionAll`: Byte,`callback`: RustBuffer.ByValue,
): Long
fun uniffi_restsend_sdk_fn_method_client_do_send_text(`ptr`: Pointer,`topicId`: RustBuffer.ByValue,`text`: RustBuffer.ByValue,`mentions`: RustBuffer.ByValue,`replyId`: RustBuffer.ByValue,`callback`: RustBuffer.ByValue,
): Long
fun uniffi_restsend_sdk_fn_method_client_do_send_video(`ptr`: Pointer,`topicId`: RustBuffer.ByValue,`attachment`: RustBuffer.ByValue,`duration`: RustBuffer.ByValue,`mentions`: RustBuffer.ByValue,`mentionAll`: Byte,`replyId`: RustBuffer.ByValue,`callback`: RustBuffer.ByValue,
): Long
fun uniffi_restsend_sdk_fn_method_client_do_send_voice(`ptr`: Pointer,`topicId`: RustBuffer.ByValue,`attachment`: RustBuffer.ByValue,`duration`: RustBuffer.ByValue,`mentions`: RustBuffer.ByValue,`mentionAll`: Byte,`replyId`: RustBuffer.ByValue,`callback`: RustBuffer.ByValue,
): Long
fun uniffi_restsend_sdk_fn_method_client_do_typing(`ptr`: Pointer,`topicId`: RustBuffer.ByValue,
): Long
fun uniffi_restsend_sdk_fn_method_client_do_update_extra(`ptr`: Pointer,`topicId`: RustBuffer.ByValue,`chatId`: RustBuffer.ByValue,`extra`: RustBuffer.ByValue,`callback`: RustBuffer.ByValue,
): Long
fun uniffi_restsend_sdk_fn_method_client_download_file(`ptr`: Pointer,`fileUrl`: RustBuffer.ByValue,`callback`: Long,
): Long
fun uniffi_restsend_sdk_fn_method_client_fetch_chat_logs_desc(`ptr`: Pointer,`topicId`: RustBuffer.ByValue,`lastSeq`: RustBuffer.ByValue,`limit`: Int,
): Long
fun uniffi_restsend_sdk_fn_method_client_get_chat_log(`ptr`: Pointer,`topicId`: RustBuffer.ByValue,`chatId`: RustBuffer.ByValue,
): Long
fun uniffi_restsend_sdk_fn_method_client_get_conversation(`ptr`: Pointer,`topicId`: RustBuffer.ByValue,`blocking`: Byte,
): Long
fun uniffi_restsend_sdk_fn_method_client_get_topic(`ptr`: Pointer,`topicId`: RustBuffer.ByValue,
): Long
fun uniffi_restsend_sdk_fn_method_client_get_topic_admins(`ptr`: Pointer,`topicId`: RustBuffer.ByValue,
): Long
fun uniffi_restsend_sdk_fn_method_client_get_topic_knocks(`ptr`: Pointer,`topicId`: RustBuffer.ByValue,
): Long
fun uniffi_restsend_sdk_fn_method_client_get_topic_members(`ptr`: Pointer,`topicId`: RustBuffer.ByValue,`updatedAt`: RustBuffer.ByValue,`limit`: Int,
): Long
fun uniffi_restsend_sdk_fn_method_client_get_topic_owner(`ptr`: Pointer,`topicId`: RustBuffer.ByValue,
): Long
fun uniffi_restsend_sdk_fn_method_client_get_unread_count(`ptr`: Pointer,
): Long
fun uniffi_restsend_sdk_fn_method_client_get_user(`ptr`: Pointer,`userId`: RustBuffer.ByValue,`blocking`: Byte,
): Long
fun uniffi_restsend_sdk_fn_method_client_get_users(`ptr`: Pointer,`userIds`: RustBuffer.ByValue,
): Long
fun uniffi_restsend_sdk_fn_method_client_join_topic(`ptr`: Pointer,`topicId`: RustBuffer.ByValue,`message`: RustBuffer.ByValue,`source`: RustBuffer.ByValue,
): Long
fun uniffi_restsend_sdk_fn_method_client_quit_topic(`ptr`: Pointer,`topicId`: RustBuffer.ByValue,
): Long
fun uniffi_restsend_sdk_fn_method_client_remove_conversation(`ptr`: Pointer,`topicId`: RustBuffer.ByValue,
): Long
fun uniffi_restsend_sdk_fn_method_client_remove_messages(`ptr`: Pointer,`topicId`: RustBuffer.ByValue,`chatIds`: RustBuffer.ByValue,`syncToServer`: Byte,
): Long
fun uniffi_restsend_sdk_fn_method_client_remove_topic_admin(`ptr`: Pointer,`topicId`: RustBuffer.ByValue,`userId`: RustBuffer.ByValue,
): Long
fun uniffi_restsend_sdk_fn_method_client_remove_topic_member(`ptr`: Pointer,`topicId`: RustBuffer.ByValue,`userId`: RustBuffer.ByValue,
): Long
fun uniffi_restsend_sdk_fn_method_client_save_chat_logs(`ptr`: Pointer,`logs`: RustBuffer.ByValue,
): Long
fun uniffi_restsend_sdk_fn_method_client_search_chat_log(`ptr`: Pointer,`topicId`: RustBuffer.ByValue,`senderId`: RustBuffer.ByValue,`keyword`: RustBuffer.ByValue,
): Long
fun uniffi_restsend_sdk_fn_method_client_send_chat_request(`ptr`: Pointer,`topicId`: RustBuffer.ByValue,`req`: RustBuffer.ByValue,
): Long
fun uniffi_restsend_sdk_fn_method_client_send_chat_request_via_connection(`ptr`: Pointer,`req`: RustBuffer.ByValue,`callback`: RustBuffer.ByValue,
): Long
fun uniffi_restsend_sdk_fn_method_client_set_all_conversations_read(`ptr`: Pointer,
): Long
fun uniffi_restsend_sdk_fn_method_client_set_allow_guest_chat(`ptr`: Pointer,`allow`: Byte,
): Long
fun uniffi_restsend_sdk_fn_method_client_set_callback(`ptr`: Pointer,`callback`: RustBuffer.ByValue,uniffi_out_err: UniffiRustCallStatus, 
): Unit
fun uniffi_restsend_sdk_fn_method_client_set_conversation_extra(`ptr`: Pointer,`topicId`: RustBuffer.ByValue,`extra`: RustBuffer.ByValue,
): Long
fun uniffi_restsend_sdk_fn_method_client_set_conversation_mute(`ptr`: Pointer,`topicId`: RustBuffer.ByValue,`mute`: Byte,
): Long
fun uniffi_restsend_sdk_fn_method_client_set_conversation_read(`ptr`: Pointer,`topicId`: RustBuffer.ByValue,`heavy`: Byte,
): Long
fun uniffi_restsend_sdk_fn_method_client_set_conversation_remark(`ptr`: Pointer,`topicId`: RustBuffer.ByValue,`remark`: RustBuffer.ByValue,
): Long
fun uniffi_restsend_sdk_fn_method_client_set_conversation_sticky(`ptr`: Pointer,`topicId`: RustBuffer.ByValue,`sticky`: Byte,
): Long
fun uniffi_restsend_sdk_fn_method_client_set_conversation_tags(`ptr`: Pointer,`topicId`: RustBuffer.ByValue,`tags`: RustBuffer.ByValue,
): Long
fun uniffi_restsend_sdk_fn_method_client_set_countable_callback(`ptr`: Pointer,`callback`: RustBuffer.ByValue,uniffi_out_err: UniffiRustCallStatus, 
): Unit
fun uniffi_restsend_sdk_fn_method_client_set_keepalive_interval_secs(`ptr`: Pointer,`secs`: Int,uniffi_out_err: UniffiRustCallStatus, 
): Unit
fun uniffi_restsend_sdk_fn_method_client_set_user_block(`ptr`: Pointer,`userId`: RustBuffer.ByValue,`block`: Byte,
): Long
fun uniffi_restsend_sdk_fn_method_client_set_user_remark(`ptr`: Pointer,`userId`: RustBuffer.ByValue,`remark`: RustBuffer.ByValue,
): Long
fun uniffi_restsend_sdk_fn_method_client_set_user_star(`ptr`: Pointer,`userId`: RustBuffer.ByValue,`star`: Byte,
): Long
fun uniffi_restsend_sdk_fn_method_client_shutdown(`ptr`: Pointer,
): Long
fun uniffi_restsend_sdk_fn_method_client_silent_topic(`ptr`: Pointer,`topicId`: RustBuffer.ByValue,`duration`: RustBuffer.ByValue,
): Long
fun uniffi_restsend_sdk_fn_method_client_silent_topic_member(`ptr`: Pointer,`topicId`: RustBuffer.ByValue,`userId`: RustBuffer.ByValue,`duration`: RustBuffer.ByValue,
): Long
fun uniffi_restsend_sdk_fn_method_client_sync_chat_logs(`ptr`: Pointer,`topicId`: RustBuffer.ByValue,`lastSeq`: RustBuffer.ByValue,`limit`: Int,`callback`: Long,`ensureConversationLastVersion`: RustBuffer.ByValue,
): Long
fun uniffi_restsend_sdk_fn_method_client_sync_conversations(`ptr`: Pointer,`updatedAt`: RustBuffer.ByValue,`limit`: Int,`syncLogs`: Byte,`syncLogsLimit`: RustBuffer.ByValue,`syncLogsMaxCount`: RustBuffer.ByValue,`lastRemovedAt`: RustBuffer.ByValue,`callback`: Long,
): Long
fun uniffi_restsend_sdk_fn_method_client_transfer_topic(`ptr`: Pointer,`topicId`: RustBuffer.ByValue,`userId`: RustBuffer.ByValue,
): Long
fun uniffi_restsend_sdk_fn_method_client_try_sync_chat_logs(`ptr`: Pointer,`conversation`: RustBuffer.ByValue,`limit`: RustBuffer.ByValue,
): Long
fun uniffi_restsend_sdk_fn_method_client_update_topic(`ptr`: Pointer,`topicId`: RustBuffer.ByValue,`name`: RustBuffer.ByValue,`icon`: RustBuffer.ByValue,
): Long
fun uniffi_restsend_sdk_fn_method_client_update_topic_notice(`ptr`: Pointer,`topicId`: RustBuffer.ByValue,`text`: RustBuffer.ByValue,
): Long
fun uniffi_restsend_sdk_fn_init_callback_vtable_countablecallback(`vtable`: UniffiVTableCallbackInterfaceCountableCallback,
): Unit
fun uniffi_restsend_sdk_fn_init_callback_vtable_downloadcallback(`vtable`: UniffiVTableCallbackInterfaceDownloadCallback,
): Unit
fun uniffi_restsend_sdk_fn_init_callback_vtable_messagecallback(`vtable`: UniffiVTableCallbackInterfaceMessageCallback,
): Unit
fun uniffi_restsend_sdk_fn_init_callback_vtable_rscallback(`vtable`: UniffiVTableCallbackInterfaceRsCallback,
): Unit
fun uniffi_restsend_sdk_fn_init_callback_vtable_syncchatlogscallback(`vtable`: UniffiVTableCallbackInterfaceSyncChatLogsCallback,
): Unit
fun uniffi_restsend_sdk_fn_init_callback_vtable_syncconversationscallback(`vtable`: UniffiVTableCallbackInterfaceSyncConversationsCallback,
): Unit
fun uniffi_restsend_sdk_fn_init_callback_vtable_uploadcallback(`vtable`: UniffiVTableCallbackInterfaceUploadCallback,
): Unit
fun uniffi_restsend_sdk_fn_func_get_current_user(`root`: RustBuffer.ByValue,uniffi_out_err: UniffiRustCallStatus, 
): RustBuffer.ByValue
fun uniffi_restsend_sdk_fn_func_guest_login(`endpoint`: RustBuffer.ByValue,`guestId`: RustBuffer.ByValue,`extra`: RustBuffer.ByValue,
): Long
fun uniffi_restsend_sdk_fn_func_init_log(`level`: RustBuffer.ByValue,`isTest`: Byte,uniffi_out_err: UniffiRustCallStatus, 
): Unit
fun uniffi_restsend_sdk_fn_func_login_with_password(`endpoint`: RustBuffer.ByValue,`email`: RustBuffer.ByValue,`password`: RustBuffer.ByValue,
): Long
fun uniffi_restsend_sdk_fn_func_login_with_token(`endpoint`: RustBuffer.ByValue,`email`: RustBuffer.ByValue,`token`: RustBuffer.ByValue,
): Long
fun uniffi_restsend_sdk_fn_func_logout(`endpoint`: RustBuffer.ByValue,`token`: RustBuffer.ByValue,
): Long
fun uniffi_restsend_sdk_fn_func_set_current_user(`root`: RustBuffer.ByValue,`userId`: RustBuffer.ByValue,uniffi_out_err: UniffiRustCallStatus, 
): Unit
fun uniffi_restsend_sdk_fn_func_signup(`endpoint`: RustBuffer.ByValue,`email`: RustBuffer.ByValue,`password`: RustBuffer.ByValue,
): Long
fun ffi_restsend_sdk_rustbuffer_alloc(`size`: Long,uniffi_out_err: UniffiRustCallStatus, 
): RustBuffer.ByValue
fun ffi_restsend_sdk_rustbuffer_from_bytes(`bytes`: ForeignBytes.ByValue,uniffi_out_err: UniffiRustCallStatus, 
): RustBuffer.ByValue
fun ffi_restsend_sdk_rustbuffer_free(`buf`: RustBuffer.ByValue,uniffi_out_err: UniffiRustCallStatus, 
): Unit
fun ffi_restsend_sdk_rustbuffer_reserve(`buf`: RustBuffer.ByValue,`additional`: Long,uniffi_out_err: UniffiRustCallStatus, 
): RustBuffer.ByValue
fun ffi_restsend_sdk_rust_future_poll_u8(`handle`: Long,`callback`: UniffiRustFutureContinuationCallback,`callbackData`: Long,
): Unit
fun ffi_restsend_sdk_rust_future_cancel_u8(`handle`: Long,
): Unit
fun ffi_restsend_sdk_rust_future_free_u8(`handle`: Long,
): Unit
fun ffi_restsend_sdk_rust_future_complete_u8(`handle`: Long,uniffi_out_err: UniffiRustCallStatus, 
): Byte
fun ffi_restsend_sdk_rust_future_poll_i8(`handle`: Long,`callback`: UniffiRustFutureContinuationCallback,`callbackData`: Long,
): Unit
fun ffi_restsend_sdk_rust_future_cancel_i8(`handle`: Long,
): Unit
fun ffi_restsend_sdk_rust_future_free_i8(`handle`: Long,
): Unit
fun ffi_restsend_sdk_rust_future_complete_i8(`handle`: Long,uniffi_out_err: UniffiRustCallStatus, 
): Byte
fun ffi_restsend_sdk_rust_future_poll_u16(`handle`: Long,`callback`: UniffiRustFutureContinuationCallback,`callbackData`: Long,
): Unit
fun ffi_restsend_sdk_rust_future_cancel_u16(`handle`: Long,
): Unit
fun ffi_restsend_sdk_rust_future_free_u16(`handle`: Long,
): Unit
fun ffi_restsend_sdk_rust_future_complete_u16(`handle`: Long,uniffi_out_err: UniffiRustCallStatus, 
): Short
fun ffi_restsend_sdk_rust_future_poll_i16(`handle`: Long,`callback`: UniffiRustFutureContinuationCallback,`callbackData`: Long,
): Unit
fun ffi_restsend_sdk_rust_future_cancel_i16(`handle`: Long,
): Unit
fun ffi_restsend_sdk_rust_future_free_i16(`handle`: Long,
): Unit
fun ffi_restsend_sdk_rust_future_complete_i16(`handle`: Long,uniffi_out_err: UniffiRustCallStatus, 
): Short
fun ffi_restsend_sdk_rust_future_poll_u32(`handle`: Long,`callback`: UniffiRustFutureContinuationCallback,`callbackData`: Long,
): Unit
fun ffi_restsend_sdk_rust_future_cancel_u32(`handle`: Long,
): Unit
fun ffi_restsend_sdk_rust_future_free_u32(`handle`: Long,
): Unit
fun ffi_restsend_sdk_rust_future_complete_u32(`handle`: Long,uniffi_out_err: UniffiRustCallStatus, 
): Int
fun ffi_restsend_sdk_rust_future_poll_i32(`handle`: Long,`callback`: UniffiRustFutureContinuationCallback,`callbackData`: Long,
): Unit
fun ffi_restsend_sdk_rust_future_cancel_i32(`handle`: Long,
): Unit
fun ffi_restsend_sdk_rust_future_free_i32(`handle`: Long,
): Unit
fun ffi_restsend_sdk_rust_future_complete_i32(`handle`: Long,uniffi_out_err: UniffiRustCallStatus, 
): Int
fun ffi_restsend_sdk_rust_future_poll_u64(`handle`: Long,`callback`: UniffiRustFutureContinuationCallback,`callbackData`: Long,
): Unit
fun ffi_restsend_sdk_rust_future_cancel_u64(`handle`: Long,
): Unit
fun ffi_restsend_sdk_rust_future_free_u64(`handle`: Long,
): Unit
fun ffi_restsend_sdk_rust_future_complete_u64(`handle`: Long,uniffi_out_err: UniffiRustCallStatus, 
): Long
fun ffi_restsend_sdk_rust_future_poll_i64(`handle`: Long,`callback`: UniffiRustFutureContinuationCallback,`callbackData`: Long,
): Unit
fun ffi_restsend_sdk_rust_future_cancel_i64(`handle`: Long,
): Unit
fun ffi_restsend_sdk_rust_future_free_i64(`handle`: Long,
): Unit
fun ffi_restsend_sdk_rust_future_complete_i64(`handle`: Long,uniffi_out_err: UniffiRustCallStatus, 
): Long
fun ffi_restsend_sdk_rust_future_poll_f32(`handle`: Long,`callback`: UniffiRustFutureContinuationCallback,`callbackData`: Long,
): Unit
fun ffi_restsend_sdk_rust_future_cancel_f32(`handle`: Long,
): Unit
fun ffi_restsend_sdk_rust_future_free_f32(`handle`: Long,
): Unit
fun ffi_restsend_sdk_rust_future_complete_f32(`handle`: Long,uniffi_out_err: UniffiRustCallStatus, 
): Float
fun ffi_restsend_sdk_rust_future_poll_f64(`handle`: Long,`callback`: UniffiRustFutureContinuationCallback,`callbackData`: Long,
): Unit
fun ffi_restsend_sdk_rust_future_cancel_f64(`handle`: Long,
): Unit
fun ffi_restsend_sdk_rust_future_free_f64(`handle`: Long,
): Unit
fun ffi_restsend_sdk_rust_future_complete_f64(`handle`: Long,uniffi_out_err: UniffiRustCallStatus, 
): Double
fun ffi_restsend_sdk_rust_future_poll_pointer(`handle`: Long,`callback`: UniffiRustFutureContinuationCallback,`callbackData`: Long,
): Unit
fun ffi_restsend_sdk_rust_future_cancel_pointer(`handle`: Long,
): Unit
fun ffi_restsend_sdk_rust_future_free_pointer(`handle`: Long,
): Unit
fun ffi_restsend_sdk_rust_future_complete_pointer(`handle`: Long,uniffi_out_err: UniffiRustCallStatus, 
): Pointer
fun ffi_restsend_sdk_rust_future_poll_rust_buffer(`handle`: Long,`callback`: UniffiRustFutureContinuationCallback,`callbackData`: Long,
): Unit
fun ffi_restsend_sdk_rust_future_cancel_rust_buffer(`handle`: Long,
): Unit
fun ffi_restsend_sdk_rust_future_free_rust_buffer(`handle`: Long,
): Unit
fun ffi_restsend_sdk_rust_future_complete_rust_buffer(`handle`: Long,uniffi_out_err: UniffiRustCallStatus, 
): RustBuffer.ByValue
fun ffi_restsend_sdk_rust_future_poll_void(`handle`: Long,`callback`: UniffiRustFutureContinuationCallback,`callbackData`: Long,
): Unit
fun ffi_restsend_sdk_rust_future_cancel_void(`handle`: Long,
): Unit
fun ffi_restsend_sdk_rust_future_free_void(`handle`: Long,
): Unit
fun ffi_restsend_sdk_rust_future_complete_void(`handle`: Long,uniffi_out_err: UniffiRustCallStatus, 
): Unit

}

private fun uniffiCheckContractApiVersion(lib: IntegrityCheckingUniffiLib) {
    // Get the bindings contract version from our ComponentInterface
    val bindings_contract_version = 29
    // Get the scaffolding contract version by calling the into the dylib
    val scaffolding_contract_version = lib.ffi_restsend_sdk_uniffi_contract_version()
    if (bindings_contract_version != scaffolding_contract_version) {
        throw RuntimeException("UniFFI contract version mismatch: try cleaning and rebuilding your project")
    }
}
@Suppress("UNUSED_PARAMETER")
private fun uniffiCheckApiChecksums(lib: IntegrityCheckingUniffiLib) {
    if (lib.uniffi_restsend_sdk_checksum_func_get_current_user() != 38664.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_restsend_sdk_checksum_func_guest_login() != 52093.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_restsend_sdk_checksum_func_init_log() != 7959.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_restsend_sdk_checksum_func_login_with_password() != 30472.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_restsend_sdk_checksum_func_login_with_token() != 17192.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_restsend_sdk_checksum_func_logout() != 46886.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_restsend_sdk_checksum_func_set_current_user() != 52163.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_restsend_sdk_checksum_func_signup() != 41913.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_restsend_sdk_checksum_method_client_accept_topic_join() != 958.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_restsend_sdk_checksum_method_client_add_topic_admin() != 31818.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_restsend_sdk_checksum_method_client_add_topic_member() != 19050.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_restsend_sdk_checksum_method_client_app_active() != 57527.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_restsend_sdk_checksum_method_client_batch_sync_chatlogs() != 25823.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_restsend_sdk_checksum_method_client_cancel_send() != 52791.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_restsend_sdk_checksum_method_client_clean_messages() != 59978.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_restsend_sdk_checksum_method_client_clear_conversation() != 1217.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_restsend_sdk_checksum_method_client_connect() != 32058.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_restsend_sdk_checksum_method_client_connection_status() != 43467.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_restsend_sdk_checksum_method_client_create_chat() != 35001.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_restsend_sdk_checksum_method_client_create_topic() != 10272.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_restsend_sdk_checksum_method_client_decline_topic_join() != 32986.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_restsend_sdk_checksum_method_client_dismiss_topic() != 31429.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_restsend_sdk_checksum_method_client_do_read() != 27645.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_restsend_sdk_checksum_method_client_do_recall() != 54883.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_restsend_sdk_checksum_method_client_do_send() != 63970.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_restsend_sdk_checksum_method_client_do_send_file() != 24486.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_restsend_sdk_checksum_method_client_do_send_image() != 57206.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_restsend_sdk_checksum_method_client_do_send_invite() != 48621.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_restsend_sdk_checksum_method_client_do_send_link() != 47231.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_restsend_sdk_checksum_method_client_do_send_location() != 53102.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_restsend_sdk_checksum_method_client_do_send_logs() != 25609.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_restsend_sdk_checksum_method_client_do_send_text() != 58543.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_restsend_sdk_checksum_method_client_do_send_video() != 51717.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_restsend_sdk_checksum_method_client_do_send_voice() != 2843.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_restsend_sdk_checksum_method_client_do_typing() != 22676.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_restsend_sdk_checksum_method_client_do_update_extra() != 49966.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_restsend_sdk_checksum_method_client_download_file() != 20251.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_restsend_sdk_checksum_method_client_fetch_chat_logs_desc() != 26657.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_restsend_sdk_checksum_method_client_get_chat_log() != 48877.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_restsend_sdk_checksum_method_client_get_conversation() != 705.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_restsend_sdk_checksum_method_client_get_topic() != 2719.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_restsend_sdk_checksum_method_client_get_topic_admins() != 35381.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_restsend_sdk_checksum_method_client_get_topic_knocks() != 14722.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_restsend_sdk_checksum_method_client_get_topic_members() != 28923.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_restsend_sdk_checksum_method_client_get_topic_owner() != 4067.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_restsend_sdk_checksum_method_client_get_unread_count() != 5267.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_restsend_sdk_checksum_method_client_get_user() != 38725.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_restsend_sdk_checksum_method_client_get_users() != 18858.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_restsend_sdk_checksum_method_client_join_topic() != 23281.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_restsend_sdk_checksum_method_client_quit_topic() != 61905.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_restsend_sdk_checksum_method_client_remove_conversation() != 62637.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_restsend_sdk_checksum_method_client_remove_messages() != 12198.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_restsend_sdk_checksum_method_client_remove_topic_admin() != 28399.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_restsend_sdk_checksum_method_client_remove_topic_member() != 59825.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_restsend_sdk_checksum_method_client_save_chat_logs() != 17817.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_restsend_sdk_checksum_method_client_search_chat_log() != 34514.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_restsend_sdk_checksum_method_client_send_chat_request() != 27229.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_restsend_sdk_checksum_method_client_send_chat_request_via_connection() != 44947.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_restsend_sdk_checksum_method_client_set_all_conversations_read() != 34161.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_restsend_sdk_checksum_method_client_set_allow_guest_chat() != 23795.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_restsend_sdk_checksum_method_client_set_callback() != 6096.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_restsend_sdk_checksum_method_client_set_conversation_extra() != 26768.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_restsend_sdk_checksum_method_client_set_conversation_mute() != 4062.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_restsend_sdk_checksum_method_client_set_conversation_read() != 59338.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_restsend_sdk_checksum_method_client_set_conversation_remark() != 1179.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_restsend_sdk_checksum_method_client_set_conversation_sticky() != 21777.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_restsend_sdk_checksum_method_client_set_conversation_tags() != 42761.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_restsend_sdk_checksum_method_client_set_countable_callback() != 30301.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_restsend_sdk_checksum_method_client_set_keepalive_interval_secs() != 15153.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_restsend_sdk_checksum_method_client_set_user_block() != 55547.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_restsend_sdk_checksum_method_client_set_user_remark() != 42283.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_restsend_sdk_checksum_method_client_set_user_star() != 31550.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_restsend_sdk_checksum_method_client_shutdown() != 4562.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_restsend_sdk_checksum_method_client_silent_topic() != 25014.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_restsend_sdk_checksum_method_client_silent_topic_member() != 49737.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_restsend_sdk_checksum_method_client_sync_chat_logs() != 58755.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_restsend_sdk_checksum_method_client_sync_conversations() != 65129.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_restsend_sdk_checksum_method_client_transfer_topic() != 22182.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_restsend_sdk_checksum_method_client_try_sync_chat_logs() != 8690.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_restsend_sdk_checksum_method_client_update_topic() != 54199.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_restsend_sdk_checksum_method_client_update_topic_notice() != 35344.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_restsend_sdk_checksum_constructor_client_new() != 32894.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_restsend_sdk_checksum_method_countablecallback_is_countable() != 49760.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_restsend_sdk_checksum_method_downloadcallback_on_progress() != 34732.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_restsend_sdk_checksum_method_downloadcallback_on_success() != 54544.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_restsend_sdk_checksum_method_downloadcallback_on_fail() != 1622.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_restsend_sdk_checksum_method_messagecallback_on_sent() != 7537.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_restsend_sdk_checksum_method_messagecallback_on_progress() != 60426.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_restsend_sdk_checksum_method_messagecallback_on_attachment_upload() != 36698.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_restsend_sdk_checksum_method_messagecallback_on_ack() != 21639.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_restsend_sdk_checksum_method_messagecallback_on_fail() != 37998.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_restsend_sdk_checksum_method_rscallback_on_connected() != 13965.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_restsend_sdk_checksum_method_rscallback_on_connecting() != 58584.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_restsend_sdk_checksum_method_rscallback_on_token_expired() != 15429.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_restsend_sdk_checksum_method_rscallback_on_net_broken() != 46993.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_restsend_sdk_checksum_method_rscallback_on_kickoff_by_other_client() != 3853.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_restsend_sdk_checksum_method_rscallback_on_system_request() != 65490.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_restsend_sdk_checksum_method_rscallback_on_unknown_request() != 27498.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_restsend_sdk_checksum_method_rscallback_on_topic_typing() != 43789.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_restsend_sdk_checksum_method_rscallback_on_new_message() != 31436.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_restsend_sdk_checksum_method_rscallback_on_topic_read() != 9031.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_restsend_sdk_checksum_method_rscallback_on_conversations_updated() != 23679.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_restsend_sdk_checksum_method_rscallback_on_conversation_removed() != 40106.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_restsend_sdk_checksum_method_syncchatlogscallback_on_success() != 7604.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_restsend_sdk_checksum_method_syncchatlogscallback_on_fail() != 6877.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_restsend_sdk_checksum_method_syncconversationscallback_on_success() != 9765.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_restsend_sdk_checksum_method_syncconversationscallback_on_fail() != 18218.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_restsend_sdk_checksum_method_uploadcallback_on_progress() != 44211.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_restsend_sdk_checksum_method_uploadcallback_on_success() != 20539.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_restsend_sdk_checksum_method_uploadcallback_on_fail() != 38198.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
}

/**
 * @suppress
 */
public fun uniffiEnsureInitialized() {
    UniffiLib.INSTANCE
}

// Async support
// Async return type handlers

internal const val UNIFFI_RUST_FUTURE_POLL_READY = 0.toByte()
internal const val UNIFFI_RUST_FUTURE_POLL_MAYBE_READY = 1.toByte()

internal val uniffiContinuationHandleMap = UniffiHandleMap<CancellableContinuation<Byte>>()

// FFI type for Rust future continuations
internal object uniffiRustFutureContinuationCallbackImpl: UniffiRustFutureContinuationCallback {
    override fun callback(data: Long, pollResult: Byte) {
        uniffiContinuationHandleMap.remove(data).resume(pollResult)
    }
}

internal suspend fun<T, F, E: kotlin.Exception> uniffiRustCallAsync(
    rustFuture: Long,
    pollFunc: (Long, UniffiRustFutureContinuationCallback, Long) -> Unit,
    completeFunc: (Long, UniffiRustCallStatus) -> F,
    freeFunc: (Long) -> Unit,
    liftFunc: (F) -> T,
    errorHandler: UniffiRustCallStatusErrorHandler<E>
): T {
    try {
        do {
            val pollResult = suspendCancellableCoroutine<Byte> { continuation ->
                pollFunc(
                    rustFuture,
                    uniffiRustFutureContinuationCallbackImpl,
                    uniffiContinuationHandleMap.insert(continuation)
                )
            }
        } while (pollResult != UNIFFI_RUST_FUTURE_POLL_READY);

        return liftFunc(
            uniffiRustCallWithError(errorHandler, { status -> completeFunc(rustFuture, status) })
        )
    } finally {
        freeFunc(rustFuture)
    }
}

// Public interface members begin here.


// Interface implemented by anything that can contain an object reference.
//
// Such types expose a `destroy()` method that must be called to cleanly
// dispose of the contained objects. Failure to call this method may result
// in memory leaks.
//
// The easiest way to ensure this method is called is to use the `.use`
// helper method to execute a block and destroy the object at the end.
interface Disposable {
    fun destroy()
    companion object {
        fun destroy(vararg args: Any?) {
            args.filterIsInstance<Disposable>()
                .forEach(Disposable::destroy)
        }
    }
}

/**
 * @suppress
 */
inline fun <T : Disposable?, R> T.use(block: (T) -> R) =
    try {
        block(this)
    } finally {
        try {
            // N.B. our implementation is on the nullable type `Disposable?`.
            this?.destroy()
        } catch (e: Throwable) {
            // swallow
        }
    }

/** 
 * Used to instantiate an interface without an actual pointer, for fakes in tests, mostly.
 *
 * @suppress
 * */
object NoPointer

/**
 * @suppress
 */
public object FfiConverterUShort: FfiConverter<UShort, Short> {
    override fun lift(value: Short): UShort {
        return value.toUShort()
    }

    override fun read(buf: ByteBuffer): UShort {
        return lift(buf.getShort())
    }

    override fun lower(value: UShort): Short {
        return value.toShort()
    }

    override fun allocationSize(value: UShort) = 2UL

    override fun write(value: UShort, buf: ByteBuffer) {
        buf.putShort(value.toShort())
    }
}

/**
 * @suppress
 */
public object FfiConverterUInt: FfiConverter<UInt, Int> {
    override fun lift(value: Int): UInt {
        return value.toUInt()
    }

    override fun read(buf: ByteBuffer): UInt {
        return lift(buf.getInt())
    }

    override fun lower(value: UInt): Int {
        return value.toInt()
    }

    override fun allocationSize(value: UInt) = 4UL

    override fun write(value: UInt, buf: ByteBuffer) {
        buf.putInt(value.toInt())
    }
}

/**
 * @suppress
 */
public object FfiConverterULong: FfiConverter<ULong, Long> {
    override fun lift(value: Long): ULong {
        return value.toULong()
    }

    override fun read(buf: ByteBuffer): ULong {
        return lift(buf.getLong())
    }

    override fun lower(value: ULong): Long {
        return value.toLong()
    }

    override fun allocationSize(value: ULong) = 8UL

    override fun write(value: ULong, buf: ByteBuffer) {
        buf.putLong(value.toLong())
    }
}

/**
 * @suppress
 */
public object FfiConverterLong: FfiConverter<Long, Long> {
    override fun lift(value: Long): Long {
        return value
    }

    override fun read(buf: ByteBuffer): Long {
        return buf.getLong()
    }

    override fun lower(value: Long): Long {
        return value
    }

    override fun allocationSize(value: Long) = 8UL

    override fun write(value: Long, buf: ByteBuffer) {
        buf.putLong(value)
    }
}

/**
 * @suppress
 */
public object FfiConverterFloat: FfiConverter<Float, Float> {
    override fun lift(value: Float): Float {
        return value
    }

    override fun read(buf: ByteBuffer): Float {
        return buf.getFloat()
    }

    override fun lower(value: Float): Float {
        return value
    }

    override fun allocationSize(value: Float) = 4UL

    override fun write(value: Float, buf: ByteBuffer) {
        buf.putFloat(value)
    }
}

/**
 * @suppress
 */
public object FfiConverterBoolean: FfiConverter<Boolean, Byte> {
    override fun lift(value: Byte): Boolean {
        return value.toInt() != 0
    }

    override fun read(buf: ByteBuffer): Boolean {
        return lift(buf.get())
    }

    override fun lower(value: Boolean): Byte {
        return if (value) 1.toByte() else 0.toByte()
    }

    override fun allocationSize(value: Boolean) = 1UL

    override fun write(value: Boolean, buf: ByteBuffer) {
        buf.put(lower(value))
    }
}

/**
 * @suppress
 */
public object FfiConverterString: FfiConverter<String, RustBuffer.ByValue> {
    // Note: we don't inherit from FfiConverterRustBuffer, because we use a
    // special encoding when lowering/lifting.  We can use `RustBuffer.len` to
    // store our length and avoid writing it out to the buffer.
    override fun lift(value: RustBuffer.ByValue): String {
        try {
            val byteArr = ByteArray(value.len.toInt())
            value.asByteBuffer()!!.get(byteArr)
            return byteArr.toString(Charsets.UTF_8)
        } finally {
            RustBuffer.free(value)
        }
    }

    override fun read(buf: ByteBuffer): String {
        val len = buf.getInt()
        val byteArr = ByteArray(len)
        buf.get(byteArr)
        return byteArr.toString(Charsets.UTF_8)
    }

    fun toUtf8(value: String): ByteBuffer {
        // Make sure we don't have invalid UTF-16, check for lone surrogates.
        return Charsets.UTF_8.newEncoder().run {
            onMalformedInput(CodingErrorAction.REPORT)
            encode(CharBuffer.wrap(value))
        }
    }

    override fun lower(value: String): RustBuffer.ByValue {
        val byteBuf = toUtf8(value)
        // Ideally we'd pass these bytes to `ffi_bytebuffer_from_bytes`, but doing so would require us
        // to copy them into a JNA `Memory`. So we might as well directly copy them into a `RustBuffer`.
        val rbuf = RustBuffer.alloc(byteBuf.limit().toULong())
        rbuf.asByteBuffer()!!.put(byteBuf)
        return rbuf
    }

    // We aren't sure exactly how many bytes our string will be once it's UTF-8
    // encoded.  Allocate 3 bytes per UTF-16 code unit which will always be
    // enough.
    override fun allocationSize(value: String): ULong {
        val sizeForLength = 4UL
        val sizeForString = value.length.toULong() * 3UL
        return sizeForLength + sizeForString
    }

    override fun write(value: String, buf: ByteBuffer) {
        val byteBuf = toUtf8(value)
        buf.putInt(byteBuf.limit())
        buf.put(byteBuf)
    }
}


// This template implements a class for working with a Rust struct via a Pointer/Arc<T>
// to the live Rust struct on the other side of the FFI.
//
// Each instance implements core operations for working with the Rust `Arc<T>` and the
// Kotlin Pointer to work with the live Rust struct on the other side of the FFI.
//
// There's some subtlety here, because we have to be careful not to operate on a Rust
// struct after it has been dropped, and because we must expose a public API for freeing
// theq Kotlin wrapper object in lieu of reliable finalizers. The core requirements are:
//
//   * Each instance holds an opaque pointer to the underlying Rust struct.
//     Method calls need to read this pointer from the object's state and pass it in to
//     the Rust FFI.
//
//   * When an instance is no longer needed, its pointer should be passed to a
//     special destructor function provided by the Rust FFI, which will drop the
//     underlying Rust struct.
//
//   * Given an instance, calling code is expected to call the special
//     `destroy` method in order to free it after use, either by calling it explicitly
//     or by using a higher-level helper like the `use` method. Failing to do so risks
//     leaking the underlying Rust struct.
//
//   * We can't assume that calling code will do the right thing, and must be prepared
//     to handle Kotlin method calls executing concurrently with or even after a call to
//     `destroy`, and to handle multiple (possibly concurrent!) calls to `destroy`.
//
//   * We must never allow Rust code to operate on the underlying Rust struct after
//     the destructor has been called, and must never call the destructor more than once.
//     Doing so may trigger memory unsafety.
//
//   * To mitigate many of the risks of leaking memory and use-after-free unsafety, a `Cleaner`
//     is implemented to call the destructor when the Kotlin object becomes unreachable.
//     This is done in a background thread. This is not a panacea, and client code should be aware that
//      1. the thread may starve if some there are objects that have poorly performing
//     `drop` methods or do significant work in their `drop` methods.
//      2. the thread is shared across the whole library. This can be tuned by using `android_cleaner = true`,
//         or `android = true` in the [`kotlin` section of the `uniffi.toml` file](https://mozilla.github.io/uniffi-rs/kotlin/configuration.html).
//
// If we try to implement this with mutual exclusion on access to the pointer, there is the
// possibility of a race between a method call and a concurrent call to `destroy`:
//
//    * Thread A starts a method call, reads the value of the pointer, but is interrupted
//      before it can pass the pointer over the FFI to Rust.
//    * Thread B calls `destroy` and frees the underlying Rust struct.
//    * Thread A resumes, passing the already-read pointer value to Rust and triggering
//      a use-after-free.
//
// One possible solution would be to use a `ReadWriteLock`, with each method call taking
// a read lock (and thus allowed to run concurrently) and the special `destroy` method
// taking a write lock (and thus blocking on live method calls). However, we aim not to
// generate methods with any hidden blocking semantics, and a `destroy` method that might
// block if called incorrectly seems to meet that bar.
//
// So, we achieve our goals by giving each instance an associated `AtomicLong` counter to track
// the number of in-flight method calls, and an `AtomicBoolean` flag to indicate whether `destroy`
// has been called. These are updated according to the following rules:
//
//    * The initial value of the counter is 1, indicating a live object with no in-flight calls.
//      The initial value for the flag is false.
//
//    * At the start of each method call, we atomically check the counter.
//      If it is 0 then the underlying Rust struct has already been destroyed and the call is aborted.
//      If it is nonzero them we atomically increment it by 1 and proceed with the method call.
//
//    * At the end of each method call, we atomically decrement and check the counter.
//      If it has reached zero then we destroy the underlying Rust struct.
//
//    * When `destroy` is called, we atomically flip the flag from false to true.
//      If the flag was already true we silently fail.
//      Otherwise we atomically decrement and check the counter.
//      If it has reached zero then we destroy the underlying Rust struct.
//
// Astute readers may observe that this all sounds very similar to the way that Rust's `Arc<T>` works,
// and indeed it is, with the addition of a flag to guard against multiple calls to `destroy`.
//
// The overall effect is that the underlying Rust struct is destroyed only when `destroy` has been
// called *and* all in-flight method calls have completed, avoiding violating any of the expectations
// of the underlying Rust code.
//
// This makes a cleaner a better alternative to _not_ calling `destroy()` as
// and when the object is finished with, but the abstraction is not perfect: if the Rust object's `drop`
// method is slow, and/or there are many objects to cleanup, and it's on a low end Android device, then the cleaner
// thread may be starved, and the app will leak memory.
//
// In this case, `destroy`ing manually may be a better solution.
//
// The cleaner can live side by side with the manual calling of `destroy`. In the order of responsiveness, uniffi objects
// with Rust peers are reclaimed:
//
// 1. By calling the `destroy` method of the object, which calls `rustObject.free()`. If that doesn't happen:
// 2. When the object becomes unreachable, AND the Cleaner thread gets to call `rustObject.free()`. If the thread is starved then:
// 3. The memory is reclaimed when the process terminates.
//
// [1] https://stackoverflow.com/questions/24376768/can-java-finalize-an-object-when-it-is-still-in-scope/24380219
//


/**
 * The cleaner interface for Object finalization code to run.
 * This is the entry point to any implementation that we're using.
 *
 * The cleaner registers objects and returns cleanables, so now we are
 * defining a `UniffiCleaner` with a `UniffiClenaer.Cleanable` to abstract the
 * different implmentations available at compile time.
 *
 * @suppress
 */
interface UniffiCleaner {
    interface Cleanable {
        fun clean()
    }

    fun register(value: Any, cleanUpTask: Runnable): UniffiCleaner.Cleanable

    companion object
}

// The fallback Jna cleaner, which is available for both Android, and the JVM.
private class UniffiJnaCleaner : UniffiCleaner {
    private val cleaner = com.sun.jna.internal.Cleaner.getCleaner()

    override fun register(value: Any, cleanUpTask: Runnable): UniffiCleaner.Cleanable =
        UniffiJnaCleanable(cleaner.register(value, cleanUpTask))
}

private class UniffiJnaCleanable(
    private val cleanable: com.sun.jna.internal.Cleaner.Cleanable,
) : UniffiCleaner.Cleanable {
    override fun clean() = cleanable.clean()
}


// We decide at uniffi binding generation time whether we were
// using Android or not.
// There are further runtime checks to chose the correct implementation
// of the cleaner.
private fun UniffiCleaner.Companion.create(): UniffiCleaner =
    try {
        // For safety's sake: if the library hasn't been run in android_cleaner = true
        // mode, but is being run on Android, then we still need to think about
        // Android API versions.
        // So we check if java.lang.ref.Cleaner is there, and use that…
        java.lang.Class.forName("java.lang.ref.Cleaner")
        JavaLangRefCleaner()
    } catch (e: ClassNotFoundException) {
        // … otherwise, fallback to the JNA cleaner.
        UniffiJnaCleaner()
    }

private class JavaLangRefCleaner : UniffiCleaner {
    val cleaner = java.lang.ref.Cleaner.create()

    override fun register(value: Any, cleanUpTask: Runnable): UniffiCleaner.Cleanable =
        JavaLangRefCleanable(cleaner.register(value, cleanUpTask))
}

private class JavaLangRefCleanable(
    val cleanable: java.lang.ref.Cleaner.Cleanable
) : UniffiCleaner.Cleanable {
    override fun clean() = cleanable.clean()
}
public interface ClientInterface {
    
    suspend fun `acceptTopicJoin`(`topicId`: kotlin.String, `userId`: kotlin.String, `memo`: kotlin.String?)
    
    suspend fun `addTopicAdmin`(`topicId`: kotlin.String, `userId`: kotlin.String)
    
    suspend fun `addTopicMember`(`topicId`: kotlin.String, `userId`: kotlin.String): TopicMember
    
    fun `appActive`()
    
    suspend fun `batchSyncChatlogs`(`conversations`: Map<kotlin.String, Conversation>, `limit`: kotlin.UInt?)
    
    fun `cancelSend`(`chatId`: kotlin.String)
    
    suspend fun `cleanMessages`(`topicId`: kotlin.String)
    
    suspend fun `clearConversation`(`topicId`: kotlin.String)
    
    suspend fun `connect`()
    
    fun `connectionStatus`(): kotlin.String
    
    suspend fun `createChat`(`userId`: kotlin.String): Conversation
    
    suspend fun `createTopic`(`members`: List<kotlin.String>, `icon`: kotlin.String?, `name`: kotlin.String?): Conversation
    
    suspend fun `declineTopicJoin`(`topicId`: kotlin.String, `userId`: kotlin.String, `message`: kotlin.String?)
    
    suspend fun `dismissTopic`(`topicId`: kotlin.String)
    
    suspend fun `doRead`(`topicId`: kotlin.String)
    
    suspend fun `doRecall`(`topicId`: kotlin.String, `chatId`: kotlin.String, `callback`: MessageCallback?): kotlin.String
    
    suspend fun `doSend`(`topicId`: kotlin.String, `content`: Content, `callback`: MessageCallback?): kotlin.String
    
    suspend fun `doSendFile`(`topicId`: kotlin.String, `attachment`: Attachment, `mentions`: List<kotlin.String>?, `mentionAll`: kotlin.Boolean, `replyId`: kotlin.String?, `callback`: MessageCallback?): kotlin.String
    
    suspend fun `doSendImage`(`topicId`: kotlin.String, `attachment`: Attachment, `mentions`: List<kotlin.String>?, `replyId`: kotlin.String?, `callback`: MessageCallback?): kotlin.String
    
    suspend fun `doSendInvite`(`topicId`: kotlin.String, `messsage`: kotlin.String?, `callback`: MessageCallback?): kotlin.String
    
    suspend fun `doSendLink`(`topicId`: kotlin.String, `url`: kotlin.String, `placeholder`: kotlin.String, `mentions`: List<kotlin.String>?, `mentionAll`: kotlin.Boolean, `replyId`: kotlin.String?, `callback`: MessageCallback?): kotlin.String
    
    suspend fun `doSendLocation`(`topicId`: kotlin.String, `latitude`: kotlin.String, `longitude`: kotlin.String, `address`: kotlin.String, `mentions`: List<kotlin.String>?, `mentionAll`: kotlin.Boolean, `replyId`: kotlin.String?, `callback`: MessageCallback?): kotlin.String
    
    suspend fun `doSendLogs`(`topicId`: kotlin.String, `sourceTopicId`: kotlin.String, `logIds`: List<kotlin.String>, `mentions`: List<kotlin.String>?, `mentionAll`: kotlin.Boolean, `callback`: MessageCallback?): kotlin.String
    
    suspend fun `doSendText`(`topicId`: kotlin.String, `text`: kotlin.String, `mentions`: List<kotlin.String>?, `replyId`: kotlin.String?, `callback`: MessageCallback?): kotlin.String
    
    suspend fun `doSendVideo`(`topicId`: kotlin.String, `attachment`: Attachment, `duration`: kotlin.String, `mentions`: List<kotlin.String>?, `mentionAll`: kotlin.Boolean, `replyId`: kotlin.String?, `callback`: MessageCallback?): kotlin.String
    
    suspend fun `doSendVoice`(`topicId`: kotlin.String, `attachment`: Attachment, `duration`: kotlin.String, `mentions`: List<kotlin.String>?, `mentionAll`: kotlin.Boolean, `replyId`: kotlin.String?, `callback`: MessageCallback?): kotlin.String
    
    suspend fun `doTyping`(`topicId`: kotlin.String)
    
    suspend fun `doUpdateExtra`(`topicId`: kotlin.String, `chatId`: kotlin.String, `extra`: Map<kotlin.String, kotlin.String>?, `callback`: MessageCallback?): kotlin.String
    
    suspend fun `downloadFile`(`fileUrl`: kotlin.String, `callback`: DownloadCallback): kotlin.String
    
    suspend fun `fetchChatLogsDesc`(`topicId`: kotlin.String, `lastSeq`: kotlin.Long?, `limit`: kotlin.UInt): GetChatLogsResult
    
    suspend fun `getChatLog`(`topicId`: kotlin.String, `chatId`: kotlin.String): ChatLog?
    
    suspend fun `getConversation`(`topicId`: kotlin.String, `blocking`: kotlin.Boolean): Conversation?
    
    suspend fun `getTopic`(`topicId`: kotlin.String): Topic
    
    suspend fun `getTopicAdmins`(`topicId`: kotlin.String): List<User>?
    
    suspend fun `getTopicKnocks`(`topicId`: kotlin.String): List<TopicKnock>?
    
    suspend fun `getTopicMembers`(`topicId`: kotlin.String, `updatedAt`: kotlin.String, `limit`: kotlin.UInt): ListUserResult
    
    suspend fun `getTopicOwner`(`topicId`: kotlin.String): User?
    
    suspend fun `getUnreadCount`(): kotlin.UInt
    
    suspend fun `getUser`(`userId`: kotlin.String, `blocking`: kotlin.Boolean): User?
    
    suspend fun `getUsers`(`userIds`: List<kotlin.String>): List<User>
    
    suspend fun `joinTopic`(`topicId`: kotlin.String, `message`: kotlin.String?, `source`: kotlin.String?)
    
    suspend fun `quitTopic`(`topicId`: kotlin.String)
    
    suspend fun `removeConversation`(`topicId`: kotlin.String)
    
    suspend fun `removeMessages`(`topicId`: kotlin.String, `chatIds`: List<kotlin.String>, `syncToServer`: kotlin.Boolean)
    
    suspend fun `removeTopicAdmin`(`topicId`: kotlin.String, `userId`: kotlin.String)
    
    suspend fun `removeTopicMember`(`topicId`: kotlin.String, `userId`: kotlin.String)
    
    suspend fun `saveChatLogs`(`logs`: List<ChatLog>)
    
    suspend fun `searchChatLog`(`topicId`: kotlin.String?, `senderId`: kotlin.String?, `keyword`: kotlin.String): GetChatLogsResult?
    
    suspend fun `sendChatRequest`(`topicId`: kotlin.String, `req`: ChatRequest): ApiSendResponse
    
    suspend fun `sendChatRequestViaConnection`(`req`: ChatRequest, `callback`: MessageCallback?): kotlin.String
    
    suspend fun `setAllConversationsRead`()
    
    suspend fun `setAllowGuestChat`(`allow`: kotlin.Boolean)
    
    fun `setCallback`(`callback`: RsCallback?)
    
    suspend fun `setConversationExtra`(`topicId`: kotlin.String, `extra`: Map<kotlin.String, kotlin.String>?): Conversation
    
    suspend fun `setConversationMute`(`topicId`: kotlin.String, `mute`: kotlin.Boolean): Conversation
    
    suspend fun `setConversationRead`(`topicId`: kotlin.String, `heavy`: kotlin.Boolean)
    
    suspend fun `setConversationRemark`(`topicId`: kotlin.String, `remark`: kotlin.String?): Conversation
    
    suspend fun `setConversationSticky`(`topicId`: kotlin.String, `sticky`: kotlin.Boolean): Conversation
    
    suspend fun `setConversationTags`(`topicId`: kotlin.String, `tags`: List<Tag>?): Conversation
    
    fun `setCountableCallback`(`callback`: CountableCallback?)
    
    fun `setKeepaliveIntervalSecs`(`secs`: kotlin.UInt)
    
    suspend fun `setUserBlock`(`userId`: kotlin.String, `block`: kotlin.Boolean)
    
    suspend fun `setUserRemark`(`userId`: kotlin.String, `remark`: kotlin.String)
    
    suspend fun `setUserStar`(`userId`: kotlin.String, `star`: kotlin.Boolean)
    
    suspend fun `shutdown`()
    
    suspend fun `silentTopic`(`topicId`: kotlin.String, `duration`: kotlin.String?)
    
    suspend fun `silentTopicMember`(`topicId`: kotlin.String, `userId`: kotlin.String, `duration`: kotlin.String?)
    
    suspend fun `syncChatLogs`(`topicId`: kotlin.String, `lastSeq`: kotlin.Long?, `limit`: kotlin.UInt, `callback`: SyncChatLogsCallback, `ensureConversationLastVersion`: kotlin.Boolean?)
    
    suspend fun `syncConversations`(`updatedAt`: kotlin.String?, `limit`: kotlin.UInt, `syncLogs`: kotlin.Boolean, `syncLogsLimit`: kotlin.UInt?, `syncLogsMaxCount`: kotlin.UInt?, `lastRemovedAt`: kotlin.String?, `callback`: SyncConversationsCallback)
    
    suspend fun `transferTopic`(`topicId`: kotlin.String, `userId`: kotlin.String)
    
    suspend fun `trySyncChatLogs`(`conversation`: Conversation, `limit`: kotlin.UInt?): Conversation?
    
    suspend fun `updateTopic`(`topicId`: kotlin.String, `name`: kotlin.String?, `icon`: kotlin.String?)
    
    suspend fun `updateTopicNotice`(`topicId`: kotlin.String, `text`: kotlin.String)
    
    companion object
}

open class Client: Disposable, AutoCloseable, ClientInterface
{

    constructor(pointer: Pointer) {
        this.pointer = pointer
        this.cleanable = UniffiLib.CLEANER.register(this, UniffiCleanAction(pointer))
    }

    /**
     * This constructor can be used to instantiate a fake object. Only used for tests. Any
     * attempt to actually use an object constructed this way will fail as there is no
     * connected Rust object.
     */
    @Suppress("UNUSED_PARAMETER")
    constructor(noPointer: NoPointer) {
        this.pointer = null
        this.cleanable = UniffiLib.CLEANER.register(this, UniffiCleanAction(pointer))
    }
    constructor(`rootPath`: kotlin.String, `dbName`: kotlin.String, `info`: AuthInfo) :
        this(
    uniffiRustCall() { _status ->
    UniffiLib.INSTANCE.uniffi_restsend_sdk_fn_constructor_client_new(
        FfiConverterString.lower(`rootPath`),FfiConverterString.lower(`dbName`),FfiConverterTypeAuthInfo.lower(`info`),_status)
}
    )

    protected val pointer: Pointer?
    protected val cleanable: UniffiCleaner.Cleanable

    private val wasDestroyed = AtomicBoolean(false)
    private val callCounter = AtomicLong(1)

    override fun destroy() {
        // Only allow a single call to this method.
        // TODO: maybe we should log a warning if called more than once?
        if (this.wasDestroyed.compareAndSet(false, true)) {
            // This decrement always matches the initial count of 1 given at creation time.
            if (this.callCounter.decrementAndGet() == 0L) {
                cleanable.clean()
            }
        }
    }

    @Synchronized
    override fun close() {
        this.destroy()
    }

    internal inline fun <R> callWithPointer(block: (ptr: Pointer) -> R): R {
        // Check and increment the call counter, to keep the object alive.
        // This needs a compare-and-set retry loop in case of concurrent updates.
        do {
            val c = this.callCounter.get()
            if (c == 0L) {
                throw IllegalStateException("${this.javaClass.simpleName} object has already been destroyed")
            }
            if (c == Long.MAX_VALUE) {
                throw IllegalStateException("${this.javaClass.simpleName} call counter would overflow")
            }
        } while (! this.callCounter.compareAndSet(c, c + 1L))
        // Now we can safely do the method call without the pointer being freed concurrently.
        try {
            return block(this.uniffiClonePointer())
        } finally {
            // This decrement always matches the increment we performed above.
            if (this.callCounter.decrementAndGet() == 0L) {
                cleanable.clean()
            }
        }
    }

    // Use a static inner class instead of a closure so as not to accidentally
    // capture `this` as part of the cleanable's action.
    private class UniffiCleanAction(private val pointer: Pointer?) : Runnable {
        override fun run() {
            pointer?.let { ptr ->
                uniffiRustCall { status ->
                    UniffiLib.INSTANCE.uniffi_restsend_sdk_fn_free_client(ptr, status)
                }
            }
        }
    }

    fun uniffiClonePointer(): Pointer {
        return uniffiRustCall() { status ->
            UniffiLib.INSTANCE.uniffi_restsend_sdk_fn_clone_client(pointer!!, status)
        }
    }

    
    @Throws(ClientException::class)
    @Suppress("ASSIGNED_BUT_NEVER_ACCESSED_VARIABLE")
    override suspend fun `acceptTopicJoin`(`topicId`: kotlin.String, `userId`: kotlin.String, `memo`: kotlin.String?) {
        return uniffiRustCallAsync(
        callWithPointer { thisPtr ->
            UniffiLib.INSTANCE.uniffi_restsend_sdk_fn_method_client_accept_topic_join(
                thisPtr,
                FfiConverterString.lower(`topicId`),FfiConverterString.lower(`userId`),FfiConverterOptionalString.lower(`memo`),
            )
        },
        { future, callback, continuation -> UniffiLib.INSTANCE.ffi_restsend_sdk_rust_future_poll_void(future, callback, continuation) },
        { future, continuation -> UniffiLib.INSTANCE.ffi_restsend_sdk_rust_future_complete_void(future, continuation) },
        { future -> UniffiLib.INSTANCE.ffi_restsend_sdk_rust_future_free_void(future) },
        // lift function
        { Unit },
        
        // Error FFI converter
        ClientException.ErrorHandler,
    )
    }

    
    @Throws(ClientException::class)
    @Suppress("ASSIGNED_BUT_NEVER_ACCESSED_VARIABLE")
    override suspend fun `addTopicAdmin`(`topicId`: kotlin.String, `userId`: kotlin.String) {
        return uniffiRustCallAsync(
        callWithPointer { thisPtr ->
            UniffiLib.INSTANCE.uniffi_restsend_sdk_fn_method_client_add_topic_admin(
                thisPtr,
                FfiConverterString.lower(`topicId`),FfiConverterString.lower(`userId`),
            )
        },
        { future, callback, continuation -> UniffiLib.INSTANCE.ffi_restsend_sdk_rust_future_poll_void(future, callback, continuation) },
        { future, continuation -> UniffiLib.INSTANCE.ffi_restsend_sdk_rust_future_complete_void(future, continuation) },
        { future -> UniffiLib.INSTANCE.ffi_restsend_sdk_rust_future_free_void(future) },
        // lift function
        { Unit },
        
        // Error FFI converter
        ClientException.ErrorHandler,
    )
    }

    
    @Throws(ClientException::class)
    @Suppress("ASSIGNED_BUT_NEVER_ACCESSED_VARIABLE")
    override suspend fun `addTopicMember`(`topicId`: kotlin.String, `userId`: kotlin.String) : TopicMember {
        return uniffiRustCallAsync(
        callWithPointer { thisPtr ->
            UniffiLib.INSTANCE.uniffi_restsend_sdk_fn_method_client_add_topic_member(
                thisPtr,
                FfiConverterString.lower(`topicId`),FfiConverterString.lower(`userId`),
            )
        },
        { future, callback, continuation -> UniffiLib.INSTANCE.ffi_restsend_sdk_rust_future_poll_rust_buffer(future, callback, continuation) },
        { future, continuation -> UniffiLib.INSTANCE.ffi_restsend_sdk_rust_future_complete_rust_buffer(future, continuation) },
        { future -> UniffiLib.INSTANCE.ffi_restsend_sdk_rust_future_free_rust_buffer(future) },
        // lift function
        { FfiConverterTypeTopicMember.lift(it) },
        // Error FFI converter
        ClientException.ErrorHandler,
    )
    }

    override fun `appActive`()
        = 
    callWithPointer {
    uniffiRustCall() { _status ->
    UniffiLib.INSTANCE.uniffi_restsend_sdk_fn_method_client_app_active(
        it, _status)
}
    }
    
    

    
    @Throws(ClientException::class)
    @Suppress("ASSIGNED_BUT_NEVER_ACCESSED_VARIABLE")
    override suspend fun `batchSyncChatlogs`(`conversations`: Map<kotlin.String, Conversation>, `limit`: kotlin.UInt?) {
        return uniffiRustCallAsync(
        callWithPointer { thisPtr ->
            UniffiLib.INSTANCE.uniffi_restsend_sdk_fn_method_client_batch_sync_chatlogs(
                thisPtr,
                FfiConverterMapStringTypeConversation.lower(`conversations`),FfiConverterOptionalUInt.lower(`limit`),
            )
        },
        { future, callback, continuation -> UniffiLib.INSTANCE.ffi_restsend_sdk_rust_future_poll_void(future, callback, continuation) },
        { future, continuation -> UniffiLib.INSTANCE.ffi_restsend_sdk_rust_future_complete_void(future, continuation) },
        { future -> UniffiLib.INSTANCE.ffi_restsend_sdk_rust_future_free_void(future) },
        // lift function
        { Unit },
        
        // Error FFI converter
        ClientException.ErrorHandler,
    )
    }

    override fun `cancelSend`(`chatId`: kotlin.String)
        = 
    callWithPointer {
    uniffiRustCall() { _status ->
    UniffiLib.INSTANCE.uniffi_restsend_sdk_fn_method_client_cancel_send(
        it, FfiConverterString.lower(`chatId`),_status)
}
    }
    
    

    
    @Throws(ClientException::class)
    @Suppress("ASSIGNED_BUT_NEVER_ACCESSED_VARIABLE")
    override suspend fun `cleanMessages`(`topicId`: kotlin.String) {
        return uniffiRustCallAsync(
        callWithPointer { thisPtr ->
            UniffiLib.INSTANCE.uniffi_restsend_sdk_fn_method_client_clean_messages(
                thisPtr,
                FfiConverterString.lower(`topicId`),
            )
        },
        { future, callback, continuation -> UniffiLib.INSTANCE.ffi_restsend_sdk_rust_future_poll_void(future, callback, continuation) },
        { future, continuation -> UniffiLib.INSTANCE.ffi_restsend_sdk_rust_future_complete_void(future, continuation) },
        { future -> UniffiLib.INSTANCE.ffi_restsend_sdk_rust_future_free_void(future) },
        // lift function
        { Unit },
        
        // Error FFI converter
        ClientException.ErrorHandler,
    )
    }

    
    @Throws(ClientException::class)
    @Suppress("ASSIGNED_BUT_NEVER_ACCESSED_VARIABLE")
    override suspend fun `clearConversation`(`topicId`: kotlin.String) {
        return uniffiRustCallAsync(
        callWithPointer { thisPtr ->
            UniffiLib.INSTANCE.uniffi_restsend_sdk_fn_method_client_clear_conversation(
                thisPtr,
                FfiConverterString.lower(`topicId`),
            )
        },
        { future, callback, continuation -> UniffiLib.INSTANCE.ffi_restsend_sdk_rust_future_poll_void(future, callback, continuation) },
        { future, continuation -> UniffiLib.INSTANCE.ffi_restsend_sdk_rust_future_complete_void(future, continuation) },
        { future -> UniffiLib.INSTANCE.ffi_restsend_sdk_rust_future_free_void(future) },
        // lift function
        { Unit },
        
        // Error FFI converter
        ClientException.ErrorHandler,
    )
    }

    
    @Suppress("ASSIGNED_BUT_NEVER_ACCESSED_VARIABLE")
    override suspend fun `connect`() {
        return uniffiRustCallAsync(
        callWithPointer { thisPtr ->
            UniffiLib.INSTANCE.uniffi_restsend_sdk_fn_method_client_connect(
                thisPtr,
                
            )
        },
        { future, callback, continuation -> UniffiLib.INSTANCE.ffi_restsend_sdk_rust_future_poll_void(future, callback, continuation) },
        { future, continuation -> UniffiLib.INSTANCE.ffi_restsend_sdk_rust_future_complete_void(future, continuation) },
        { future -> UniffiLib.INSTANCE.ffi_restsend_sdk_rust_future_free_void(future) },
        // lift function
        { Unit },
        
        // Error FFI converter
        UniffiNullRustCallStatusErrorHandler,
    )
    }

    override fun `connectionStatus`(): kotlin.String {
            return FfiConverterString.lift(
    callWithPointer {
    uniffiRustCall() { _status ->
    UniffiLib.INSTANCE.uniffi_restsend_sdk_fn_method_client_connection_status(
        it, _status)
}
    }
    )
    }
    

    
    @Throws(ClientException::class)
    @Suppress("ASSIGNED_BUT_NEVER_ACCESSED_VARIABLE")
    override suspend fun `createChat`(`userId`: kotlin.String) : Conversation {
        return uniffiRustCallAsync(
        callWithPointer { thisPtr ->
            UniffiLib.INSTANCE.uniffi_restsend_sdk_fn_method_client_create_chat(
                thisPtr,
                FfiConverterString.lower(`userId`),
            )
        },
        { future, callback, continuation -> UniffiLib.INSTANCE.ffi_restsend_sdk_rust_future_poll_rust_buffer(future, callback, continuation) },
        { future, continuation -> UniffiLib.INSTANCE.ffi_restsend_sdk_rust_future_complete_rust_buffer(future, continuation) },
        { future -> UniffiLib.INSTANCE.ffi_restsend_sdk_rust_future_free_rust_buffer(future) },
        // lift function
        { FfiConverterTypeConversation.lift(it) },
        // Error FFI converter
        ClientException.ErrorHandler,
    )
    }

    
    @Throws(ClientException::class)
    @Suppress("ASSIGNED_BUT_NEVER_ACCESSED_VARIABLE")
    override suspend fun `createTopic`(`members`: List<kotlin.String>, `icon`: kotlin.String?, `name`: kotlin.String?) : Conversation {
        return uniffiRustCallAsync(
        callWithPointer { thisPtr ->
            UniffiLib.INSTANCE.uniffi_restsend_sdk_fn_method_client_create_topic(
                thisPtr,
                FfiConverterSequenceString.lower(`members`),FfiConverterOptionalString.lower(`icon`),FfiConverterOptionalString.lower(`name`),
            )
        },
        { future, callback, continuation -> UniffiLib.INSTANCE.ffi_restsend_sdk_rust_future_poll_rust_buffer(future, callback, continuation) },
        { future, continuation -> UniffiLib.INSTANCE.ffi_restsend_sdk_rust_future_complete_rust_buffer(future, continuation) },
        { future -> UniffiLib.INSTANCE.ffi_restsend_sdk_rust_future_free_rust_buffer(future) },
        // lift function
        { FfiConverterTypeConversation.lift(it) },
        // Error FFI converter
        ClientException.ErrorHandler,
    )
    }

    
    @Throws(ClientException::class)
    @Suppress("ASSIGNED_BUT_NEVER_ACCESSED_VARIABLE")
    override suspend fun `declineTopicJoin`(`topicId`: kotlin.String, `userId`: kotlin.String, `message`: kotlin.String?) {
        return uniffiRustCallAsync(
        callWithPointer { thisPtr ->
            UniffiLib.INSTANCE.uniffi_restsend_sdk_fn_method_client_decline_topic_join(
                thisPtr,
                FfiConverterString.lower(`topicId`),FfiConverterString.lower(`userId`),FfiConverterOptionalString.lower(`message`),
            )
        },
        { future, callback, continuation -> UniffiLib.INSTANCE.ffi_restsend_sdk_rust_future_poll_void(future, callback, continuation) },
        { future, continuation -> UniffiLib.INSTANCE.ffi_restsend_sdk_rust_future_complete_void(future, continuation) },
        { future -> UniffiLib.INSTANCE.ffi_restsend_sdk_rust_future_free_void(future) },
        // lift function
        { Unit },
        
        // Error FFI converter
        ClientException.ErrorHandler,
    )
    }

    
    @Throws(ClientException::class)
    @Suppress("ASSIGNED_BUT_NEVER_ACCESSED_VARIABLE")
    override suspend fun `dismissTopic`(`topicId`: kotlin.String) {
        return uniffiRustCallAsync(
        callWithPointer { thisPtr ->
            UniffiLib.INSTANCE.uniffi_restsend_sdk_fn_method_client_dismiss_topic(
                thisPtr,
                FfiConverterString.lower(`topicId`),
            )
        },
        { future, callback, continuation -> UniffiLib.INSTANCE.ffi_restsend_sdk_rust_future_poll_void(future, callback, continuation) },
        { future, continuation -> UniffiLib.INSTANCE.ffi_restsend_sdk_rust_future_complete_void(future, continuation) },
        { future -> UniffiLib.INSTANCE.ffi_restsend_sdk_rust_future_free_void(future) },
        // lift function
        { Unit },
        
        // Error FFI converter
        ClientException.ErrorHandler,
    )
    }

    
    @Throws(ClientException::class)
    @Suppress("ASSIGNED_BUT_NEVER_ACCESSED_VARIABLE")
    override suspend fun `doRead`(`topicId`: kotlin.String) {
        return uniffiRustCallAsync(
        callWithPointer { thisPtr ->
            UniffiLib.INSTANCE.uniffi_restsend_sdk_fn_method_client_do_read(
                thisPtr,
                FfiConverterString.lower(`topicId`),
            )
        },
        { future, callback, continuation -> UniffiLib.INSTANCE.ffi_restsend_sdk_rust_future_poll_void(future, callback, continuation) },
        { future, continuation -> UniffiLib.INSTANCE.ffi_restsend_sdk_rust_future_complete_void(future, continuation) },
        { future -> UniffiLib.INSTANCE.ffi_restsend_sdk_rust_future_free_void(future) },
        // lift function
        { Unit },
        
        // Error FFI converter
        ClientException.ErrorHandler,
    )
    }

    
    @Throws(ClientException::class)
    @Suppress("ASSIGNED_BUT_NEVER_ACCESSED_VARIABLE")
    override suspend fun `doRecall`(`topicId`: kotlin.String, `chatId`: kotlin.String, `callback`: MessageCallback?) : kotlin.String {
        return uniffiRustCallAsync(
        callWithPointer { thisPtr ->
            UniffiLib.INSTANCE.uniffi_restsend_sdk_fn_method_client_do_recall(
                thisPtr,
                FfiConverterString.lower(`topicId`),FfiConverterString.lower(`chatId`),FfiConverterOptionalTypeMessageCallback.lower(`callback`),
            )
        },
        { future, callback, continuation -> UniffiLib.INSTANCE.ffi_restsend_sdk_rust_future_poll_rust_buffer(future, callback, continuation) },
        { future, continuation -> UniffiLib.INSTANCE.ffi_restsend_sdk_rust_future_complete_rust_buffer(future, continuation) },
        { future -> UniffiLib.INSTANCE.ffi_restsend_sdk_rust_future_free_rust_buffer(future) },
        // lift function
        { FfiConverterString.lift(it) },
        // Error FFI converter
        ClientException.ErrorHandler,
    )
    }

    
    @Throws(ClientException::class)
    @Suppress("ASSIGNED_BUT_NEVER_ACCESSED_VARIABLE")
    override suspend fun `doSend`(`topicId`: kotlin.String, `content`: Content, `callback`: MessageCallback?) : kotlin.String {
        return uniffiRustCallAsync(
        callWithPointer { thisPtr ->
            UniffiLib.INSTANCE.uniffi_restsend_sdk_fn_method_client_do_send(
                thisPtr,
                FfiConverterString.lower(`topicId`),FfiConverterTypeContent.lower(`content`),FfiConverterOptionalTypeMessageCallback.lower(`callback`),
            )
        },
        { future, callback, continuation -> UniffiLib.INSTANCE.ffi_restsend_sdk_rust_future_poll_rust_buffer(future, callback, continuation) },
        { future, continuation -> UniffiLib.INSTANCE.ffi_restsend_sdk_rust_future_complete_rust_buffer(future, continuation) },
        { future -> UniffiLib.INSTANCE.ffi_restsend_sdk_rust_future_free_rust_buffer(future) },
        // lift function
        { FfiConverterString.lift(it) },
        // Error FFI converter
        ClientException.ErrorHandler,
    )
    }

    
    @Throws(ClientException::class)
    @Suppress("ASSIGNED_BUT_NEVER_ACCESSED_VARIABLE")
    override suspend fun `doSendFile`(`topicId`: kotlin.String, `attachment`: Attachment, `mentions`: List<kotlin.String>?, `mentionAll`: kotlin.Boolean, `replyId`: kotlin.String?, `callback`: MessageCallback?) : kotlin.String {
        return uniffiRustCallAsync(
        callWithPointer { thisPtr ->
            UniffiLib.INSTANCE.uniffi_restsend_sdk_fn_method_client_do_send_file(
                thisPtr,
                FfiConverterString.lower(`topicId`),FfiConverterTypeAttachment.lower(`attachment`),FfiConverterOptionalSequenceString.lower(`mentions`),FfiConverterBoolean.lower(`mentionAll`),FfiConverterOptionalString.lower(`replyId`),FfiConverterOptionalTypeMessageCallback.lower(`callback`),
            )
        },
        { future, callback, continuation -> UniffiLib.INSTANCE.ffi_restsend_sdk_rust_future_poll_rust_buffer(future, callback, continuation) },
        { future, continuation -> UniffiLib.INSTANCE.ffi_restsend_sdk_rust_future_complete_rust_buffer(future, continuation) },
        { future -> UniffiLib.INSTANCE.ffi_restsend_sdk_rust_future_free_rust_buffer(future) },
        // lift function
        { FfiConverterString.lift(it) },
        // Error FFI converter
        ClientException.ErrorHandler,
    )
    }

    
    @Throws(ClientException::class)
    @Suppress("ASSIGNED_BUT_NEVER_ACCESSED_VARIABLE")
    override suspend fun `doSendImage`(`topicId`: kotlin.String, `attachment`: Attachment, `mentions`: List<kotlin.String>?, `replyId`: kotlin.String?, `callback`: MessageCallback?) : kotlin.String {
        return uniffiRustCallAsync(
        callWithPointer { thisPtr ->
            UniffiLib.INSTANCE.uniffi_restsend_sdk_fn_method_client_do_send_image(
                thisPtr,
                FfiConverterString.lower(`topicId`),FfiConverterTypeAttachment.lower(`attachment`),FfiConverterOptionalSequenceString.lower(`mentions`),FfiConverterOptionalString.lower(`replyId`),FfiConverterOptionalTypeMessageCallback.lower(`callback`),
            )
        },
        { future, callback, continuation -> UniffiLib.INSTANCE.ffi_restsend_sdk_rust_future_poll_rust_buffer(future, callback, continuation) },
        { future, continuation -> UniffiLib.INSTANCE.ffi_restsend_sdk_rust_future_complete_rust_buffer(future, continuation) },
        { future -> UniffiLib.INSTANCE.ffi_restsend_sdk_rust_future_free_rust_buffer(future) },
        // lift function
        { FfiConverterString.lift(it) },
        // Error FFI converter
        ClientException.ErrorHandler,
    )
    }

    
    @Throws(ClientException::class)
    @Suppress("ASSIGNED_BUT_NEVER_ACCESSED_VARIABLE")
    override suspend fun `doSendInvite`(`topicId`: kotlin.String, `messsage`: kotlin.String?, `callback`: MessageCallback?) : kotlin.String {
        return uniffiRustCallAsync(
        callWithPointer { thisPtr ->
            UniffiLib.INSTANCE.uniffi_restsend_sdk_fn_method_client_do_send_invite(
                thisPtr,
                FfiConverterString.lower(`topicId`),FfiConverterOptionalString.lower(`messsage`),FfiConverterOptionalTypeMessageCallback.lower(`callback`),
            )
        },
        { future, callback, continuation -> UniffiLib.INSTANCE.ffi_restsend_sdk_rust_future_poll_rust_buffer(future, callback, continuation) },
        { future, continuation -> UniffiLib.INSTANCE.ffi_restsend_sdk_rust_future_complete_rust_buffer(future, continuation) },
        { future -> UniffiLib.INSTANCE.ffi_restsend_sdk_rust_future_free_rust_buffer(future) },
        // lift function
        { FfiConverterString.lift(it) },
        // Error FFI converter
        ClientException.ErrorHandler,
    )
    }

    
    @Throws(ClientException::class)
    @Suppress("ASSIGNED_BUT_NEVER_ACCESSED_VARIABLE")
    override suspend fun `doSendLink`(`topicId`: kotlin.String, `url`: kotlin.String, `placeholder`: kotlin.String, `mentions`: List<kotlin.String>?, `mentionAll`: kotlin.Boolean, `replyId`: kotlin.String?, `callback`: MessageCallback?) : kotlin.String {
        return uniffiRustCallAsync(
        callWithPointer { thisPtr ->
            UniffiLib.INSTANCE.uniffi_restsend_sdk_fn_method_client_do_send_link(
                thisPtr,
                FfiConverterString.lower(`topicId`),FfiConverterString.lower(`url`),FfiConverterString.lower(`placeholder`),FfiConverterOptionalSequenceString.lower(`mentions`),FfiConverterBoolean.lower(`mentionAll`),FfiConverterOptionalString.lower(`replyId`),FfiConverterOptionalTypeMessageCallback.lower(`callback`),
            )
        },
        { future, callback, continuation -> UniffiLib.INSTANCE.ffi_restsend_sdk_rust_future_poll_rust_buffer(future, callback, continuation) },
        { future, continuation -> UniffiLib.INSTANCE.ffi_restsend_sdk_rust_future_complete_rust_buffer(future, continuation) },
        { future -> UniffiLib.INSTANCE.ffi_restsend_sdk_rust_future_free_rust_buffer(future) },
        // lift function
        { FfiConverterString.lift(it) },
        // Error FFI converter
        ClientException.ErrorHandler,
    )
    }

    
    @Throws(ClientException::class)
    @Suppress("ASSIGNED_BUT_NEVER_ACCESSED_VARIABLE")
    override suspend fun `doSendLocation`(`topicId`: kotlin.String, `latitude`: kotlin.String, `longitude`: kotlin.String, `address`: kotlin.String, `mentions`: List<kotlin.String>?, `mentionAll`: kotlin.Boolean, `replyId`: kotlin.String?, `callback`: MessageCallback?) : kotlin.String {
        return uniffiRustCallAsync(
        callWithPointer { thisPtr ->
            UniffiLib.INSTANCE.uniffi_restsend_sdk_fn_method_client_do_send_location(
                thisPtr,
                FfiConverterString.lower(`topicId`),FfiConverterString.lower(`latitude`),FfiConverterString.lower(`longitude`),FfiConverterString.lower(`address`),FfiConverterOptionalSequenceString.lower(`mentions`),FfiConverterBoolean.lower(`mentionAll`),FfiConverterOptionalString.lower(`replyId`),FfiConverterOptionalTypeMessageCallback.lower(`callback`),
            )
        },
        { future, callback, continuation -> UniffiLib.INSTANCE.ffi_restsend_sdk_rust_future_poll_rust_buffer(future, callback, continuation) },
        { future, continuation -> UniffiLib.INSTANCE.ffi_restsend_sdk_rust_future_complete_rust_buffer(future, continuation) },
        { future -> UniffiLib.INSTANCE.ffi_restsend_sdk_rust_future_free_rust_buffer(future) },
        // lift function
        { FfiConverterString.lift(it) },
        // Error FFI converter
        ClientException.ErrorHandler,
    )
    }

    
    @Throws(ClientException::class)
    @Suppress("ASSIGNED_BUT_NEVER_ACCESSED_VARIABLE")
    override suspend fun `doSendLogs`(`topicId`: kotlin.String, `sourceTopicId`: kotlin.String, `logIds`: List<kotlin.String>, `mentions`: List<kotlin.String>?, `mentionAll`: kotlin.Boolean, `callback`: MessageCallback?) : kotlin.String {
        return uniffiRustCallAsync(
        callWithPointer { thisPtr ->
            UniffiLib.INSTANCE.uniffi_restsend_sdk_fn_method_client_do_send_logs(
                thisPtr,
                FfiConverterString.lower(`topicId`),FfiConverterString.lower(`sourceTopicId`),FfiConverterSequenceString.lower(`logIds`),FfiConverterOptionalSequenceString.lower(`mentions`),FfiConverterBoolean.lower(`mentionAll`),FfiConverterOptionalTypeMessageCallback.lower(`callback`),
            )
        },
        { future, callback, continuation -> UniffiLib.INSTANCE.ffi_restsend_sdk_rust_future_poll_rust_buffer(future, callback, continuation) },
        { future, continuation -> UniffiLib.INSTANCE.ffi_restsend_sdk_rust_future_complete_rust_buffer(future, continuation) },
        { future -> UniffiLib.INSTANCE.ffi_restsend_sdk_rust_future_free_rust_buffer(future) },
        // lift function
        { FfiConverterString.lift(it) },
        // Error FFI converter
        ClientException.ErrorHandler,
    )
    }

    
    @Throws(ClientException::class)
    @Suppress("ASSIGNED_BUT_NEVER_ACCESSED_VARIABLE")
    override suspend fun `doSendText`(`topicId`: kotlin.String, `text`: kotlin.String, `mentions`: List<kotlin.String>?, `replyId`: kotlin.String?, `callback`: MessageCallback?) : kotlin.String {
        return uniffiRustCallAsync(
        callWithPointer { thisPtr ->
            UniffiLib.INSTANCE.uniffi_restsend_sdk_fn_method_client_do_send_text(
                thisPtr,
                FfiConverterString.lower(`topicId`),FfiConverterString.lower(`text`),FfiConverterOptionalSequenceString.lower(`mentions`),FfiConverterOptionalString.lower(`replyId`),FfiConverterOptionalTypeMessageCallback.lower(`callback`),
            )
        },
        { future, callback, continuation -> UniffiLib.INSTANCE.ffi_restsend_sdk_rust_future_poll_rust_buffer(future, callback, continuation) },
        { future, continuation -> UniffiLib.INSTANCE.ffi_restsend_sdk_rust_future_complete_rust_buffer(future, continuation) },
        { future -> UniffiLib.INSTANCE.ffi_restsend_sdk_rust_future_free_rust_buffer(future) },
        // lift function
        { FfiConverterString.lift(it) },
        // Error FFI converter
        ClientException.ErrorHandler,
    )
    }

    
    @Throws(ClientException::class)
    @Suppress("ASSIGNED_BUT_NEVER_ACCESSED_VARIABLE")
    override suspend fun `doSendVideo`(`topicId`: kotlin.String, `attachment`: Attachment, `duration`: kotlin.String, `mentions`: List<kotlin.String>?, `mentionAll`: kotlin.Boolean, `replyId`: kotlin.String?, `callback`: MessageCallback?) : kotlin.String {
        return uniffiRustCallAsync(
        callWithPointer { thisPtr ->
            UniffiLib.INSTANCE.uniffi_restsend_sdk_fn_method_client_do_send_video(
                thisPtr,
                FfiConverterString.lower(`topicId`),FfiConverterTypeAttachment.lower(`attachment`),FfiConverterString.lower(`duration`),FfiConverterOptionalSequenceString.lower(`mentions`),FfiConverterBoolean.lower(`mentionAll`),FfiConverterOptionalString.lower(`replyId`),FfiConverterOptionalTypeMessageCallback.lower(`callback`),
            )
        },
        { future, callback, continuation -> UniffiLib.INSTANCE.ffi_restsend_sdk_rust_future_poll_rust_buffer(future, callback, continuation) },
        { future, continuation -> UniffiLib.INSTANCE.ffi_restsend_sdk_rust_future_complete_rust_buffer(future, continuation) },
        { future -> UniffiLib.INSTANCE.ffi_restsend_sdk_rust_future_free_rust_buffer(future) },
        // lift function
        { FfiConverterString.lift(it) },
        // Error FFI converter
        ClientException.ErrorHandler,
    )
    }

    
    @Throws(ClientException::class)
    @Suppress("ASSIGNED_BUT_NEVER_ACCESSED_VARIABLE")
    override suspend fun `doSendVoice`(`topicId`: kotlin.String, `attachment`: Attachment, `duration`: kotlin.String, `mentions`: List<kotlin.String>?, `mentionAll`: kotlin.Boolean, `replyId`: kotlin.String?, `callback`: MessageCallback?) : kotlin.String {
        return uniffiRustCallAsync(
        callWithPointer { thisPtr ->
            UniffiLib.INSTANCE.uniffi_restsend_sdk_fn_method_client_do_send_voice(
                thisPtr,
                FfiConverterString.lower(`topicId`),FfiConverterTypeAttachment.lower(`attachment`),FfiConverterString.lower(`duration`),FfiConverterOptionalSequenceString.lower(`mentions`),FfiConverterBoolean.lower(`mentionAll`),FfiConverterOptionalString.lower(`replyId`),FfiConverterOptionalTypeMessageCallback.lower(`callback`),
            )
        },
        { future, callback, continuation -> UniffiLib.INSTANCE.ffi_restsend_sdk_rust_future_poll_rust_buffer(future, callback, continuation) },
        { future, continuation -> UniffiLib.INSTANCE.ffi_restsend_sdk_rust_future_complete_rust_buffer(future, continuation) },
        { future -> UniffiLib.INSTANCE.ffi_restsend_sdk_rust_future_free_rust_buffer(future) },
        // lift function
        { FfiConverterString.lift(it) },
        // Error FFI converter
        ClientException.ErrorHandler,
    )
    }

    
    @Throws(ClientException::class)
    @Suppress("ASSIGNED_BUT_NEVER_ACCESSED_VARIABLE")
    override suspend fun `doTyping`(`topicId`: kotlin.String) {
        return uniffiRustCallAsync(
        callWithPointer { thisPtr ->
            UniffiLib.INSTANCE.uniffi_restsend_sdk_fn_method_client_do_typing(
                thisPtr,
                FfiConverterString.lower(`topicId`),
            )
        },
        { future, callback, continuation -> UniffiLib.INSTANCE.ffi_restsend_sdk_rust_future_poll_void(future, callback, continuation) },
        { future, continuation -> UniffiLib.INSTANCE.ffi_restsend_sdk_rust_future_complete_void(future, continuation) },
        { future -> UniffiLib.INSTANCE.ffi_restsend_sdk_rust_future_free_void(future) },
        // lift function
        { Unit },
        
        // Error FFI converter
        ClientException.ErrorHandler,
    )
    }

    
    @Throws(ClientException::class)
    @Suppress("ASSIGNED_BUT_NEVER_ACCESSED_VARIABLE")
    override suspend fun `doUpdateExtra`(`topicId`: kotlin.String, `chatId`: kotlin.String, `extra`: Map<kotlin.String, kotlin.String>?, `callback`: MessageCallback?) : kotlin.String {
        return uniffiRustCallAsync(
        callWithPointer { thisPtr ->
            UniffiLib.INSTANCE.uniffi_restsend_sdk_fn_method_client_do_update_extra(
                thisPtr,
                FfiConverterString.lower(`topicId`),FfiConverterString.lower(`chatId`),FfiConverterOptionalMapStringString.lower(`extra`),FfiConverterOptionalTypeMessageCallback.lower(`callback`),
            )
        },
        { future, callback, continuation -> UniffiLib.INSTANCE.ffi_restsend_sdk_rust_future_poll_rust_buffer(future, callback, continuation) },
        { future, continuation -> UniffiLib.INSTANCE.ffi_restsend_sdk_rust_future_complete_rust_buffer(future, continuation) },
        { future -> UniffiLib.INSTANCE.ffi_restsend_sdk_rust_future_free_rust_buffer(future) },
        // lift function
        { FfiConverterString.lift(it) },
        // Error FFI converter
        ClientException.ErrorHandler,
    )
    }

    
    @Throws(ClientException::class)
    @Suppress("ASSIGNED_BUT_NEVER_ACCESSED_VARIABLE")
    override suspend fun `downloadFile`(`fileUrl`: kotlin.String, `callback`: DownloadCallback) : kotlin.String {
        return uniffiRustCallAsync(
        callWithPointer { thisPtr ->
            UniffiLib.INSTANCE.uniffi_restsend_sdk_fn_method_client_download_file(
                thisPtr,
                FfiConverterString.lower(`fileUrl`),FfiConverterTypeDownloadCallback.lower(`callback`),
            )
        },
        { future, callback, continuation -> UniffiLib.INSTANCE.ffi_restsend_sdk_rust_future_poll_rust_buffer(future, callback, continuation) },
        { future, continuation -> UniffiLib.INSTANCE.ffi_restsend_sdk_rust_future_complete_rust_buffer(future, continuation) },
        { future -> UniffiLib.INSTANCE.ffi_restsend_sdk_rust_future_free_rust_buffer(future) },
        // lift function
        { FfiConverterString.lift(it) },
        // Error FFI converter
        ClientException.ErrorHandler,
    )
    }

    
    @Throws(ClientException::class)
    @Suppress("ASSIGNED_BUT_NEVER_ACCESSED_VARIABLE")
    override suspend fun `fetchChatLogsDesc`(`topicId`: kotlin.String, `lastSeq`: kotlin.Long?, `limit`: kotlin.UInt) : GetChatLogsResult {
        return uniffiRustCallAsync(
        callWithPointer { thisPtr ->
            UniffiLib.INSTANCE.uniffi_restsend_sdk_fn_method_client_fetch_chat_logs_desc(
                thisPtr,
                FfiConverterString.lower(`topicId`),FfiConverterOptionalLong.lower(`lastSeq`),FfiConverterUInt.lower(`limit`),
            )
        },
        { future, callback, continuation -> UniffiLib.INSTANCE.ffi_restsend_sdk_rust_future_poll_rust_buffer(future, callback, continuation) },
        { future, continuation -> UniffiLib.INSTANCE.ffi_restsend_sdk_rust_future_complete_rust_buffer(future, continuation) },
        { future -> UniffiLib.INSTANCE.ffi_restsend_sdk_rust_future_free_rust_buffer(future) },
        // lift function
        { FfiConverterTypeGetChatLogsResult.lift(it) },
        // Error FFI converter
        ClientException.ErrorHandler,
    )
    }

    
    @Suppress("ASSIGNED_BUT_NEVER_ACCESSED_VARIABLE")
    override suspend fun `getChatLog`(`topicId`: kotlin.String, `chatId`: kotlin.String) : ChatLog? {
        return uniffiRustCallAsync(
        callWithPointer { thisPtr ->
            UniffiLib.INSTANCE.uniffi_restsend_sdk_fn_method_client_get_chat_log(
                thisPtr,
                FfiConverterString.lower(`topicId`),FfiConverterString.lower(`chatId`),
            )
        },
        { future, callback, continuation -> UniffiLib.INSTANCE.ffi_restsend_sdk_rust_future_poll_rust_buffer(future, callback, continuation) },
        { future, continuation -> UniffiLib.INSTANCE.ffi_restsend_sdk_rust_future_complete_rust_buffer(future, continuation) },
        { future -> UniffiLib.INSTANCE.ffi_restsend_sdk_rust_future_free_rust_buffer(future) },
        // lift function
        { FfiConverterOptionalTypeChatLog.lift(it) },
        // Error FFI converter
        UniffiNullRustCallStatusErrorHandler,
    )
    }

    
    @Suppress("ASSIGNED_BUT_NEVER_ACCESSED_VARIABLE")
    override suspend fun `getConversation`(`topicId`: kotlin.String, `blocking`: kotlin.Boolean) : Conversation? {
        return uniffiRustCallAsync(
        callWithPointer { thisPtr ->
            UniffiLib.INSTANCE.uniffi_restsend_sdk_fn_method_client_get_conversation(
                thisPtr,
                FfiConverterString.lower(`topicId`),FfiConverterBoolean.lower(`blocking`),
            )
        },
        { future, callback, continuation -> UniffiLib.INSTANCE.ffi_restsend_sdk_rust_future_poll_rust_buffer(future, callback, continuation) },
        { future, continuation -> UniffiLib.INSTANCE.ffi_restsend_sdk_rust_future_complete_rust_buffer(future, continuation) },
        { future -> UniffiLib.INSTANCE.ffi_restsend_sdk_rust_future_free_rust_buffer(future) },
        // lift function
        { FfiConverterOptionalTypeConversation.lift(it) },
        // Error FFI converter
        UniffiNullRustCallStatusErrorHandler,
    )
    }

    
    @Throws(ClientException::class)
    @Suppress("ASSIGNED_BUT_NEVER_ACCESSED_VARIABLE")
    override suspend fun `getTopic`(`topicId`: kotlin.String) : Topic {
        return uniffiRustCallAsync(
        callWithPointer { thisPtr ->
            UniffiLib.INSTANCE.uniffi_restsend_sdk_fn_method_client_get_topic(
                thisPtr,
                FfiConverterString.lower(`topicId`),
            )
        },
        { future, callback, continuation -> UniffiLib.INSTANCE.ffi_restsend_sdk_rust_future_poll_rust_buffer(future, callback, continuation) },
        { future, continuation -> UniffiLib.INSTANCE.ffi_restsend_sdk_rust_future_complete_rust_buffer(future, continuation) },
        { future -> UniffiLib.INSTANCE.ffi_restsend_sdk_rust_future_free_rust_buffer(future) },
        // lift function
        { FfiConverterTypeTopic.lift(it) },
        // Error FFI converter
        ClientException.ErrorHandler,
    )
    }

    
    @Suppress("ASSIGNED_BUT_NEVER_ACCESSED_VARIABLE")
    override suspend fun `getTopicAdmins`(`topicId`: kotlin.String) : List<User>? {
        return uniffiRustCallAsync(
        callWithPointer { thisPtr ->
            UniffiLib.INSTANCE.uniffi_restsend_sdk_fn_method_client_get_topic_admins(
                thisPtr,
                FfiConverterString.lower(`topicId`),
            )
        },
        { future, callback, continuation -> UniffiLib.INSTANCE.ffi_restsend_sdk_rust_future_poll_rust_buffer(future, callback, continuation) },
        { future, continuation -> UniffiLib.INSTANCE.ffi_restsend_sdk_rust_future_complete_rust_buffer(future, continuation) },
        { future -> UniffiLib.INSTANCE.ffi_restsend_sdk_rust_future_free_rust_buffer(future) },
        // lift function
        { FfiConverterOptionalSequenceTypeUser.lift(it) },
        // Error FFI converter
        UniffiNullRustCallStatusErrorHandler,
    )
    }

    
    @Suppress("ASSIGNED_BUT_NEVER_ACCESSED_VARIABLE")
    override suspend fun `getTopicKnocks`(`topicId`: kotlin.String) : List<TopicKnock>? {
        return uniffiRustCallAsync(
        callWithPointer { thisPtr ->
            UniffiLib.INSTANCE.uniffi_restsend_sdk_fn_method_client_get_topic_knocks(
                thisPtr,
                FfiConverterString.lower(`topicId`),
            )
        },
        { future, callback, continuation -> UniffiLib.INSTANCE.ffi_restsend_sdk_rust_future_poll_rust_buffer(future, callback, continuation) },
        { future, continuation -> UniffiLib.INSTANCE.ffi_restsend_sdk_rust_future_complete_rust_buffer(future, continuation) },
        { future -> UniffiLib.INSTANCE.ffi_restsend_sdk_rust_future_free_rust_buffer(future) },
        // lift function
        { FfiConverterOptionalSequenceTypeTopicKnock.lift(it) },
        // Error FFI converter
        UniffiNullRustCallStatusErrorHandler,
    )
    }

    
    @Throws(ClientException::class)
    @Suppress("ASSIGNED_BUT_NEVER_ACCESSED_VARIABLE")
    override suspend fun `getTopicMembers`(`topicId`: kotlin.String, `updatedAt`: kotlin.String, `limit`: kotlin.UInt) : ListUserResult {
        return uniffiRustCallAsync(
        callWithPointer { thisPtr ->
            UniffiLib.INSTANCE.uniffi_restsend_sdk_fn_method_client_get_topic_members(
                thisPtr,
                FfiConverterString.lower(`topicId`),FfiConverterString.lower(`updatedAt`),FfiConverterUInt.lower(`limit`),
            )
        },
        { future, callback, continuation -> UniffiLib.INSTANCE.ffi_restsend_sdk_rust_future_poll_rust_buffer(future, callback, continuation) },
        { future, continuation -> UniffiLib.INSTANCE.ffi_restsend_sdk_rust_future_complete_rust_buffer(future, continuation) },
        { future -> UniffiLib.INSTANCE.ffi_restsend_sdk_rust_future_free_rust_buffer(future) },
        // lift function
        { FfiConverterTypeListUserResult.lift(it) },
        // Error FFI converter
        ClientException.ErrorHandler,
    )
    }

    
    @Suppress("ASSIGNED_BUT_NEVER_ACCESSED_VARIABLE")
    override suspend fun `getTopicOwner`(`topicId`: kotlin.String) : User? {
        return uniffiRustCallAsync(
        callWithPointer { thisPtr ->
            UniffiLib.INSTANCE.uniffi_restsend_sdk_fn_method_client_get_topic_owner(
                thisPtr,
                FfiConverterString.lower(`topicId`),
            )
        },
        { future, callback, continuation -> UniffiLib.INSTANCE.ffi_restsend_sdk_rust_future_poll_rust_buffer(future, callback, continuation) },
        { future, continuation -> UniffiLib.INSTANCE.ffi_restsend_sdk_rust_future_complete_rust_buffer(future, continuation) },
        { future -> UniffiLib.INSTANCE.ffi_restsend_sdk_rust_future_free_rust_buffer(future) },
        // lift function
        { FfiConverterOptionalTypeUser.lift(it) },
        // Error FFI converter
        UniffiNullRustCallStatusErrorHandler,
    )
    }

    
    @Suppress("ASSIGNED_BUT_NEVER_ACCESSED_VARIABLE")
    override suspend fun `getUnreadCount`() : kotlin.UInt {
        return uniffiRustCallAsync(
        callWithPointer { thisPtr ->
            UniffiLib.INSTANCE.uniffi_restsend_sdk_fn_method_client_get_unread_count(
                thisPtr,
                
            )
        },
        { future, callback, continuation -> UniffiLib.INSTANCE.ffi_restsend_sdk_rust_future_poll_u32(future, callback, continuation) },
        { future, continuation -> UniffiLib.INSTANCE.ffi_restsend_sdk_rust_future_complete_u32(future, continuation) },
        { future -> UniffiLib.INSTANCE.ffi_restsend_sdk_rust_future_free_u32(future) },
        // lift function
        { FfiConverterUInt.lift(it) },
        // Error FFI converter
        UniffiNullRustCallStatusErrorHandler,
    )
    }

    
    @Suppress("ASSIGNED_BUT_NEVER_ACCESSED_VARIABLE")
    override suspend fun `getUser`(`userId`: kotlin.String, `blocking`: kotlin.Boolean) : User? {
        return uniffiRustCallAsync(
        callWithPointer { thisPtr ->
            UniffiLib.INSTANCE.uniffi_restsend_sdk_fn_method_client_get_user(
                thisPtr,
                FfiConverterString.lower(`userId`),FfiConverterBoolean.lower(`blocking`),
            )
        },
        { future, callback, continuation -> UniffiLib.INSTANCE.ffi_restsend_sdk_rust_future_poll_rust_buffer(future, callback, continuation) },
        { future, continuation -> UniffiLib.INSTANCE.ffi_restsend_sdk_rust_future_complete_rust_buffer(future, continuation) },
        { future -> UniffiLib.INSTANCE.ffi_restsend_sdk_rust_future_free_rust_buffer(future) },
        // lift function
        { FfiConverterOptionalTypeUser.lift(it) },
        // Error FFI converter
        UniffiNullRustCallStatusErrorHandler,
    )
    }

    
    @Suppress("ASSIGNED_BUT_NEVER_ACCESSED_VARIABLE")
    override suspend fun `getUsers`(`userIds`: List<kotlin.String>) : List<User> {
        return uniffiRustCallAsync(
        callWithPointer { thisPtr ->
            UniffiLib.INSTANCE.uniffi_restsend_sdk_fn_method_client_get_users(
                thisPtr,
                FfiConverterSequenceString.lower(`userIds`),
            )
        },
        { future, callback, continuation -> UniffiLib.INSTANCE.ffi_restsend_sdk_rust_future_poll_rust_buffer(future, callback, continuation) },
        { future, continuation -> UniffiLib.INSTANCE.ffi_restsend_sdk_rust_future_complete_rust_buffer(future, continuation) },
        { future -> UniffiLib.INSTANCE.ffi_restsend_sdk_rust_future_free_rust_buffer(future) },
        // lift function
        { FfiConverterSequenceTypeUser.lift(it) },
        // Error FFI converter
        UniffiNullRustCallStatusErrorHandler,
    )
    }

    
    @Throws(ClientException::class)
    @Suppress("ASSIGNED_BUT_NEVER_ACCESSED_VARIABLE")
    override suspend fun `joinTopic`(`topicId`: kotlin.String, `message`: kotlin.String?, `source`: kotlin.String?) {
        return uniffiRustCallAsync(
        callWithPointer { thisPtr ->
            UniffiLib.INSTANCE.uniffi_restsend_sdk_fn_method_client_join_topic(
                thisPtr,
                FfiConverterString.lower(`topicId`),FfiConverterOptionalString.lower(`message`),FfiConverterOptionalString.lower(`source`),
            )
        },
        { future, callback, continuation -> UniffiLib.INSTANCE.ffi_restsend_sdk_rust_future_poll_void(future, callback, continuation) },
        { future, continuation -> UniffiLib.INSTANCE.ffi_restsend_sdk_rust_future_complete_void(future, continuation) },
        { future -> UniffiLib.INSTANCE.ffi_restsend_sdk_rust_future_free_void(future) },
        // lift function
        { Unit },
        
        // Error FFI converter
        ClientException.ErrorHandler,
    )
    }

    
    @Throws(ClientException::class)
    @Suppress("ASSIGNED_BUT_NEVER_ACCESSED_VARIABLE")
    override suspend fun `quitTopic`(`topicId`: kotlin.String) {
        return uniffiRustCallAsync(
        callWithPointer { thisPtr ->
            UniffiLib.INSTANCE.uniffi_restsend_sdk_fn_method_client_quit_topic(
                thisPtr,
                FfiConverterString.lower(`topicId`),
            )
        },
        { future, callback, continuation -> UniffiLib.INSTANCE.ffi_restsend_sdk_rust_future_poll_void(future, callback, continuation) },
        { future, continuation -> UniffiLib.INSTANCE.ffi_restsend_sdk_rust_future_complete_void(future, continuation) },
        { future -> UniffiLib.INSTANCE.ffi_restsend_sdk_rust_future_free_void(future) },
        // lift function
        { Unit },
        
        // Error FFI converter
        ClientException.ErrorHandler,
    )
    }

    
    @Suppress("ASSIGNED_BUT_NEVER_ACCESSED_VARIABLE")
    override suspend fun `removeConversation`(`topicId`: kotlin.String) {
        return uniffiRustCallAsync(
        callWithPointer { thisPtr ->
            UniffiLib.INSTANCE.uniffi_restsend_sdk_fn_method_client_remove_conversation(
                thisPtr,
                FfiConverterString.lower(`topicId`),
            )
        },
        { future, callback, continuation -> UniffiLib.INSTANCE.ffi_restsend_sdk_rust_future_poll_void(future, callback, continuation) },
        { future, continuation -> UniffiLib.INSTANCE.ffi_restsend_sdk_rust_future_complete_void(future, continuation) },
        { future -> UniffiLib.INSTANCE.ffi_restsend_sdk_rust_future_free_void(future) },
        // lift function
        { Unit },
        
        // Error FFI converter
        UniffiNullRustCallStatusErrorHandler,
    )
    }

    
    @Throws(ClientException::class)
    @Suppress("ASSIGNED_BUT_NEVER_ACCESSED_VARIABLE")
    override suspend fun `removeMessages`(`topicId`: kotlin.String, `chatIds`: List<kotlin.String>, `syncToServer`: kotlin.Boolean) {
        return uniffiRustCallAsync(
        callWithPointer { thisPtr ->
            UniffiLib.INSTANCE.uniffi_restsend_sdk_fn_method_client_remove_messages(
                thisPtr,
                FfiConverterString.lower(`topicId`),FfiConverterSequenceString.lower(`chatIds`),FfiConverterBoolean.lower(`syncToServer`),
            )
        },
        { future, callback, continuation -> UniffiLib.INSTANCE.ffi_restsend_sdk_rust_future_poll_void(future, callback, continuation) },
        { future, continuation -> UniffiLib.INSTANCE.ffi_restsend_sdk_rust_future_complete_void(future, continuation) },
        { future -> UniffiLib.INSTANCE.ffi_restsend_sdk_rust_future_free_void(future) },
        // lift function
        { Unit },
        
        // Error FFI converter
        ClientException.ErrorHandler,
    )
    }

    
    @Throws(ClientException::class)
    @Suppress("ASSIGNED_BUT_NEVER_ACCESSED_VARIABLE")
    override suspend fun `removeTopicAdmin`(`topicId`: kotlin.String, `userId`: kotlin.String) {
        return uniffiRustCallAsync(
        callWithPointer { thisPtr ->
            UniffiLib.INSTANCE.uniffi_restsend_sdk_fn_method_client_remove_topic_admin(
                thisPtr,
                FfiConverterString.lower(`topicId`),FfiConverterString.lower(`userId`),
            )
        },
        { future, callback, continuation -> UniffiLib.INSTANCE.ffi_restsend_sdk_rust_future_poll_void(future, callback, continuation) },
        { future, continuation -> UniffiLib.INSTANCE.ffi_restsend_sdk_rust_future_complete_void(future, continuation) },
        { future -> UniffiLib.INSTANCE.ffi_restsend_sdk_rust_future_free_void(future) },
        // lift function
        { Unit },
        
        // Error FFI converter
        ClientException.ErrorHandler,
    )
    }

    
    @Throws(ClientException::class)
    @Suppress("ASSIGNED_BUT_NEVER_ACCESSED_VARIABLE")
    override suspend fun `removeTopicMember`(`topicId`: kotlin.String, `userId`: kotlin.String) {
        return uniffiRustCallAsync(
        callWithPointer { thisPtr ->
            UniffiLib.INSTANCE.uniffi_restsend_sdk_fn_method_client_remove_topic_member(
                thisPtr,
                FfiConverterString.lower(`topicId`),FfiConverterString.lower(`userId`),
            )
        },
        { future, callback, continuation -> UniffiLib.INSTANCE.ffi_restsend_sdk_rust_future_poll_void(future, callback, continuation) },
        { future, continuation -> UniffiLib.INSTANCE.ffi_restsend_sdk_rust_future_complete_void(future, continuation) },
        { future -> UniffiLib.INSTANCE.ffi_restsend_sdk_rust_future_free_void(future) },
        // lift function
        { Unit },
        
        // Error FFI converter
        ClientException.ErrorHandler,
    )
    }

    
    @Throws(ClientException::class)
    @Suppress("ASSIGNED_BUT_NEVER_ACCESSED_VARIABLE")
    override suspend fun `saveChatLogs`(`logs`: List<ChatLog>) {
        return uniffiRustCallAsync(
        callWithPointer { thisPtr ->
            UniffiLib.INSTANCE.uniffi_restsend_sdk_fn_method_client_save_chat_logs(
                thisPtr,
                FfiConverterSequenceTypeChatLog.lower(`logs`),
            )
        },
        { future, callback, continuation -> UniffiLib.INSTANCE.ffi_restsend_sdk_rust_future_poll_void(future, callback, continuation) },
        { future, continuation -> UniffiLib.INSTANCE.ffi_restsend_sdk_rust_future_complete_void(future, continuation) },
        { future -> UniffiLib.INSTANCE.ffi_restsend_sdk_rust_future_free_void(future) },
        // lift function
        { Unit },
        
        // Error FFI converter
        ClientException.ErrorHandler,
    )
    }

    
    @Suppress("ASSIGNED_BUT_NEVER_ACCESSED_VARIABLE")
    override suspend fun `searchChatLog`(`topicId`: kotlin.String?, `senderId`: kotlin.String?, `keyword`: kotlin.String) : GetChatLogsResult? {
        return uniffiRustCallAsync(
        callWithPointer { thisPtr ->
            UniffiLib.INSTANCE.uniffi_restsend_sdk_fn_method_client_search_chat_log(
                thisPtr,
                FfiConverterOptionalString.lower(`topicId`),FfiConverterOptionalString.lower(`senderId`),FfiConverterString.lower(`keyword`),
            )
        },
        { future, callback, continuation -> UniffiLib.INSTANCE.ffi_restsend_sdk_rust_future_poll_rust_buffer(future, callback, continuation) },
        { future, continuation -> UniffiLib.INSTANCE.ffi_restsend_sdk_rust_future_complete_rust_buffer(future, continuation) },
        { future -> UniffiLib.INSTANCE.ffi_restsend_sdk_rust_future_free_rust_buffer(future) },
        // lift function
        { FfiConverterOptionalTypeGetChatLogsResult.lift(it) },
        // Error FFI converter
        UniffiNullRustCallStatusErrorHandler,
    )
    }

    
    @Throws(ClientException::class)
    @Suppress("ASSIGNED_BUT_NEVER_ACCESSED_VARIABLE")
    override suspend fun `sendChatRequest`(`topicId`: kotlin.String, `req`: ChatRequest) : ApiSendResponse {
        return uniffiRustCallAsync(
        callWithPointer { thisPtr ->
            UniffiLib.INSTANCE.uniffi_restsend_sdk_fn_method_client_send_chat_request(
                thisPtr,
                FfiConverterString.lower(`topicId`),FfiConverterTypeChatRequest.lower(`req`),
            )
        },
        { future, callback, continuation -> UniffiLib.INSTANCE.ffi_restsend_sdk_rust_future_poll_rust_buffer(future, callback, continuation) },
        { future, continuation -> UniffiLib.INSTANCE.ffi_restsend_sdk_rust_future_complete_rust_buffer(future, continuation) },
        { future -> UniffiLib.INSTANCE.ffi_restsend_sdk_rust_future_free_rust_buffer(future) },
        // lift function
        { FfiConverterTypeAPISendResponse.lift(it) },
        // Error FFI converter
        ClientException.ErrorHandler,
    )
    }

    
    @Throws(ClientException::class)
    @Suppress("ASSIGNED_BUT_NEVER_ACCESSED_VARIABLE")
    override suspend fun `sendChatRequestViaConnection`(`req`: ChatRequest, `callback`: MessageCallback?) : kotlin.String {
        return uniffiRustCallAsync(
        callWithPointer { thisPtr ->
            UniffiLib.INSTANCE.uniffi_restsend_sdk_fn_method_client_send_chat_request_via_connection(
                thisPtr,
                FfiConverterTypeChatRequest.lower(`req`),FfiConverterOptionalTypeMessageCallback.lower(`callback`),
            )
        },
        { future, callback, continuation -> UniffiLib.INSTANCE.ffi_restsend_sdk_rust_future_poll_rust_buffer(future, callback, continuation) },
        { future, continuation -> UniffiLib.INSTANCE.ffi_restsend_sdk_rust_future_complete_rust_buffer(future, continuation) },
        { future -> UniffiLib.INSTANCE.ffi_restsend_sdk_rust_future_free_rust_buffer(future) },
        // lift function
        { FfiConverterString.lift(it) },
        // Error FFI converter
        ClientException.ErrorHandler,
    )
    }

    
    @Suppress("ASSIGNED_BUT_NEVER_ACCESSED_VARIABLE")
    override suspend fun `setAllConversationsRead`() {
        return uniffiRustCallAsync(
        callWithPointer { thisPtr ->
            UniffiLib.INSTANCE.uniffi_restsend_sdk_fn_method_client_set_all_conversations_read(
                thisPtr,
                
            )
        },
        { future, callback, continuation -> UniffiLib.INSTANCE.ffi_restsend_sdk_rust_future_poll_void(future, callback, continuation) },
        { future, continuation -> UniffiLib.INSTANCE.ffi_restsend_sdk_rust_future_complete_void(future, continuation) },
        { future -> UniffiLib.INSTANCE.ffi_restsend_sdk_rust_future_free_void(future) },
        // lift function
        { Unit },
        
        // Error FFI converter
        UniffiNullRustCallStatusErrorHandler,
    )
    }

    
    @Throws(ClientException::class)
    @Suppress("ASSIGNED_BUT_NEVER_ACCESSED_VARIABLE")
    override suspend fun `setAllowGuestChat`(`allow`: kotlin.Boolean) {
        return uniffiRustCallAsync(
        callWithPointer { thisPtr ->
            UniffiLib.INSTANCE.uniffi_restsend_sdk_fn_method_client_set_allow_guest_chat(
                thisPtr,
                FfiConverterBoolean.lower(`allow`),
            )
        },
        { future, callback, continuation -> UniffiLib.INSTANCE.ffi_restsend_sdk_rust_future_poll_void(future, callback, continuation) },
        { future, continuation -> UniffiLib.INSTANCE.ffi_restsend_sdk_rust_future_complete_void(future, continuation) },
        { future -> UniffiLib.INSTANCE.ffi_restsend_sdk_rust_future_free_void(future) },
        // lift function
        { Unit },
        
        // Error FFI converter
        ClientException.ErrorHandler,
    )
    }

    override fun `setCallback`(`callback`: RsCallback?)
        = 
    callWithPointer {
    uniffiRustCall() { _status ->
    UniffiLib.INSTANCE.uniffi_restsend_sdk_fn_method_client_set_callback(
        it, FfiConverterOptionalTypeRsCallback.lower(`callback`),_status)
}
    }
    
    

    
    @Throws(ClientException::class)
    @Suppress("ASSIGNED_BUT_NEVER_ACCESSED_VARIABLE")
    override suspend fun `setConversationExtra`(`topicId`: kotlin.String, `extra`: Map<kotlin.String, kotlin.String>?) : Conversation {
        return uniffiRustCallAsync(
        callWithPointer { thisPtr ->
            UniffiLib.INSTANCE.uniffi_restsend_sdk_fn_method_client_set_conversation_extra(
                thisPtr,
                FfiConverterString.lower(`topicId`),FfiConverterOptionalMapStringString.lower(`extra`),
            )
        },
        { future, callback, continuation -> UniffiLib.INSTANCE.ffi_restsend_sdk_rust_future_poll_rust_buffer(future, callback, continuation) },
        { future, continuation -> UniffiLib.INSTANCE.ffi_restsend_sdk_rust_future_complete_rust_buffer(future, continuation) },
        { future -> UniffiLib.INSTANCE.ffi_restsend_sdk_rust_future_free_rust_buffer(future) },
        // lift function
        { FfiConverterTypeConversation.lift(it) },
        // Error FFI converter
        ClientException.ErrorHandler,
    )
    }

    
    @Throws(ClientException::class)
    @Suppress("ASSIGNED_BUT_NEVER_ACCESSED_VARIABLE")
    override suspend fun `setConversationMute`(`topicId`: kotlin.String, `mute`: kotlin.Boolean) : Conversation {
        return uniffiRustCallAsync(
        callWithPointer { thisPtr ->
            UniffiLib.INSTANCE.uniffi_restsend_sdk_fn_method_client_set_conversation_mute(
                thisPtr,
                FfiConverterString.lower(`topicId`),FfiConverterBoolean.lower(`mute`),
            )
        },
        { future, callback, continuation -> UniffiLib.INSTANCE.ffi_restsend_sdk_rust_future_poll_rust_buffer(future, callback, continuation) },
        { future, continuation -> UniffiLib.INSTANCE.ffi_restsend_sdk_rust_future_complete_rust_buffer(future, continuation) },
        { future -> UniffiLib.INSTANCE.ffi_restsend_sdk_rust_future_free_rust_buffer(future) },
        // lift function
        { FfiConverterTypeConversation.lift(it) },
        // Error FFI converter
        ClientException.ErrorHandler,
    )
    }

    
    @Suppress("ASSIGNED_BUT_NEVER_ACCESSED_VARIABLE")
    override suspend fun `setConversationRead`(`topicId`: kotlin.String, `heavy`: kotlin.Boolean) {
        return uniffiRustCallAsync(
        callWithPointer { thisPtr ->
            UniffiLib.INSTANCE.uniffi_restsend_sdk_fn_method_client_set_conversation_read(
                thisPtr,
                FfiConverterString.lower(`topicId`),FfiConverterBoolean.lower(`heavy`),
            )
        },
        { future, callback, continuation -> UniffiLib.INSTANCE.ffi_restsend_sdk_rust_future_poll_void(future, callback, continuation) },
        { future, continuation -> UniffiLib.INSTANCE.ffi_restsend_sdk_rust_future_complete_void(future, continuation) },
        { future -> UniffiLib.INSTANCE.ffi_restsend_sdk_rust_future_free_void(future) },
        // lift function
        { Unit },
        
        // Error FFI converter
        UniffiNullRustCallStatusErrorHandler,
    )
    }

    
    @Throws(ClientException::class)
    @Suppress("ASSIGNED_BUT_NEVER_ACCESSED_VARIABLE")
    override suspend fun `setConversationRemark`(`topicId`: kotlin.String, `remark`: kotlin.String?) : Conversation {
        return uniffiRustCallAsync(
        callWithPointer { thisPtr ->
            UniffiLib.INSTANCE.uniffi_restsend_sdk_fn_method_client_set_conversation_remark(
                thisPtr,
                FfiConverterString.lower(`topicId`),FfiConverterOptionalString.lower(`remark`),
            )
        },
        { future, callback, continuation -> UniffiLib.INSTANCE.ffi_restsend_sdk_rust_future_poll_rust_buffer(future, callback, continuation) },
        { future, continuation -> UniffiLib.INSTANCE.ffi_restsend_sdk_rust_future_complete_rust_buffer(future, continuation) },
        { future -> UniffiLib.INSTANCE.ffi_restsend_sdk_rust_future_free_rust_buffer(future) },
        // lift function
        { FfiConverterTypeConversation.lift(it) },
        // Error FFI converter
        ClientException.ErrorHandler,
    )
    }

    
    @Throws(ClientException::class)
    @Suppress("ASSIGNED_BUT_NEVER_ACCESSED_VARIABLE")
    override suspend fun `setConversationSticky`(`topicId`: kotlin.String, `sticky`: kotlin.Boolean) : Conversation {
        return uniffiRustCallAsync(
        callWithPointer { thisPtr ->
            UniffiLib.INSTANCE.uniffi_restsend_sdk_fn_method_client_set_conversation_sticky(
                thisPtr,
                FfiConverterString.lower(`topicId`),FfiConverterBoolean.lower(`sticky`),
            )
        },
        { future, callback, continuation -> UniffiLib.INSTANCE.ffi_restsend_sdk_rust_future_poll_rust_buffer(future, callback, continuation) },
        { future, continuation -> UniffiLib.INSTANCE.ffi_restsend_sdk_rust_future_complete_rust_buffer(future, continuation) },
        { future -> UniffiLib.INSTANCE.ffi_restsend_sdk_rust_future_free_rust_buffer(future) },
        // lift function
        { FfiConverterTypeConversation.lift(it) },
        // Error FFI converter
        ClientException.ErrorHandler,
    )
    }

    
    @Throws(ClientException::class)
    @Suppress("ASSIGNED_BUT_NEVER_ACCESSED_VARIABLE")
    override suspend fun `setConversationTags`(`topicId`: kotlin.String, `tags`: List<Tag>?) : Conversation {
        return uniffiRustCallAsync(
        callWithPointer { thisPtr ->
            UniffiLib.INSTANCE.uniffi_restsend_sdk_fn_method_client_set_conversation_tags(
                thisPtr,
                FfiConverterString.lower(`topicId`),FfiConverterOptionalSequenceTypeTag.lower(`tags`),
            )
        },
        { future, callback, continuation -> UniffiLib.INSTANCE.ffi_restsend_sdk_rust_future_poll_rust_buffer(future, callback, continuation) },
        { future, continuation -> UniffiLib.INSTANCE.ffi_restsend_sdk_rust_future_complete_rust_buffer(future, continuation) },
        { future -> UniffiLib.INSTANCE.ffi_restsend_sdk_rust_future_free_rust_buffer(future) },
        // lift function
        { FfiConverterTypeConversation.lift(it) },
        // Error FFI converter
        ClientException.ErrorHandler,
    )
    }

    override fun `setCountableCallback`(`callback`: CountableCallback?)
        = 
    callWithPointer {
    uniffiRustCall() { _status ->
    UniffiLib.INSTANCE.uniffi_restsend_sdk_fn_method_client_set_countable_callback(
        it, FfiConverterOptionalTypeCountableCallback.lower(`callback`),_status)
}
    }
    
    

    override fun `setKeepaliveIntervalSecs`(`secs`: kotlin.UInt)
        = 
    callWithPointer {
    uniffiRustCall() { _status ->
    UniffiLib.INSTANCE.uniffi_restsend_sdk_fn_method_client_set_keepalive_interval_secs(
        it, FfiConverterUInt.lower(`secs`),_status)
}
    }
    
    

    
    @Throws(ClientException::class)
    @Suppress("ASSIGNED_BUT_NEVER_ACCESSED_VARIABLE")
    override suspend fun `setUserBlock`(`userId`: kotlin.String, `block`: kotlin.Boolean) {
        return uniffiRustCallAsync(
        callWithPointer { thisPtr ->
            UniffiLib.INSTANCE.uniffi_restsend_sdk_fn_method_client_set_user_block(
                thisPtr,
                FfiConverterString.lower(`userId`),FfiConverterBoolean.lower(`block`),
            )
        },
        { future, callback, continuation -> UniffiLib.INSTANCE.ffi_restsend_sdk_rust_future_poll_void(future, callback, continuation) },
        { future, continuation -> UniffiLib.INSTANCE.ffi_restsend_sdk_rust_future_complete_void(future, continuation) },
        { future -> UniffiLib.INSTANCE.ffi_restsend_sdk_rust_future_free_void(future) },
        // lift function
        { Unit },
        
        // Error FFI converter
        ClientException.ErrorHandler,
    )
    }

    
    @Throws(ClientException::class)
    @Suppress("ASSIGNED_BUT_NEVER_ACCESSED_VARIABLE")
    override suspend fun `setUserRemark`(`userId`: kotlin.String, `remark`: kotlin.String) {
        return uniffiRustCallAsync(
        callWithPointer { thisPtr ->
            UniffiLib.INSTANCE.uniffi_restsend_sdk_fn_method_client_set_user_remark(
                thisPtr,
                FfiConverterString.lower(`userId`),FfiConverterString.lower(`remark`),
            )
        },
        { future, callback, continuation -> UniffiLib.INSTANCE.ffi_restsend_sdk_rust_future_poll_void(future, callback, continuation) },
        { future, continuation -> UniffiLib.INSTANCE.ffi_restsend_sdk_rust_future_complete_void(future, continuation) },
        { future -> UniffiLib.INSTANCE.ffi_restsend_sdk_rust_future_free_void(future) },
        // lift function
        { Unit },
        
        // Error FFI converter
        ClientException.ErrorHandler,
    )
    }

    
    @Throws(ClientException::class)
    @Suppress("ASSIGNED_BUT_NEVER_ACCESSED_VARIABLE")
    override suspend fun `setUserStar`(`userId`: kotlin.String, `star`: kotlin.Boolean) {
        return uniffiRustCallAsync(
        callWithPointer { thisPtr ->
            UniffiLib.INSTANCE.uniffi_restsend_sdk_fn_method_client_set_user_star(
                thisPtr,
                FfiConverterString.lower(`userId`),FfiConverterBoolean.lower(`star`),
            )
        },
        { future, callback, continuation -> UniffiLib.INSTANCE.ffi_restsend_sdk_rust_future_poll_void(future, callback, continuation) },
        { future, continuation -> UniffiLib.INSTANCE.ffi_restsend_sdk_rust_future_complete_void(future, continuation) },
        { future -> UniffiLib.INSTANCE.ffi_restsend_sdk_rust_future_free_void(future) },
        // lift function
        { Unit },
        
        // Error FFI converter
        ClientException.ErrorHandler,
    )
    }

    
    @Suppress("ASSIGNED_BUT_NEVER_ACCESSED_VARIABLE")
    override suspend fun `shutdown`() {
        return uniffiRustCallAsync(
        callWithPointer { thisPtr ->
            UniffiLib.INSTANCE.uniffi_restsend_sdk_fn_method_client_shutdown(
                thisPtr,
                
            )
        },
        { future, callback, continuation -> UniffiLib.INSTANCE.ffi_restsend_sdk_rust_future_poll_void(future, callback, continuation) },
        { future, continuation -> UniffiLib.INSTANCE.ffi_restsend_sdk_rust_future_complete_void(future, continuation) },
        { future -> UniffiLib.INSTANCE.ffi_restsend_sdk_rust_future_free_void(future) },
        // lift function
        { Unit },
        
        // Error FFI converter
        UniffiNullRustCallStatusErrorHandler,
    )
    }

    
    @Throws(ClientException::class)
    @Suppress("ASSIGNED_BUT_NEVER_ACCESSED_VARIABLE")
    override suspend fun `silentTopic`(`topicId`: kotlin.String, `duration`: kotlin.String?) {
        return uniffiRustCallAsync(
        callWithPointer { thisPtr ->
            UniffiLib.INSTANCE.uniffi_restsend_sdk_fn_method_client_silent_topic(
                thisPtr,
                FfiConverterString.lower(`topicId`),FfiConverterOptionalString.lower(`duration`),
            )
        },
        { future, callback, continuation -> UniffiLib.INSTANCE.ffi_restsend_sdk_rust_future_poll_void(future, callback, continuation) },
        { future, continuation -> UniffiLib.INSTANCE.ffi_restsend_sdk_rust_future_complete_void(future, continuation) },
        { future -> UniffiLib.INSTANCE.ffi_restsend_sdk_rust_future_free_void(future) },
        // lift function
        { Unit },
        
        // Error FFI converter
        ClientException.ErrorHandler,
    )
    }

    
    @Throws(ClientException::class)
    @Suppress("ASSIGNED_BUT_NEVER_ACCESSED_VARIABLE")
    override suspend fun `silentTopicMember`(`topicId`: kotlin.String, `userId`: kotlin.String, `duration`: kotlin.String?) {
        return uniffiRustCallAsync(
        callWithPointer { thisPtr ->
            UniffiLib.INSTANCE.uniffi_restsend_sdk_fn_method_client_silent_topic_member(
                thisPtr,
                FfiConverterString.lower(`topicId`),FfiConverterString.lower(`userId`),FfiConverterOptionalString.lower(`duration`),
            )
        },
        { future, callback, continuation -> UniffiLib.INSTANCE.ffi_restsend_sdk_rust_future_poll_void(future, callback, continuation) },
        { future, continuation -> UniffiLib.INSTANCE.ffi_restsend_sdk_rust_future_complete_void(future, continuation) },
        { future -> UniffiLib.INSTANCE.ffi_restsend_sdk_rust_future_free_void(future) },
        // lift function
        { Unit },
        
        // Error FFI converter
        ClientException.ErrorHandler,
    )
    }

    
    @Suppress("ASSIGNED_BUT_NEVER_ACCESSED_VARIABLE")
    override suspend fun `syncChatLogs`(`topicId`: kotlin.String, `lastSeq`: kotlin.Long?, `limit`: kotlin.UInt, `callback`: SyncChatLogsCallback, `ensureConversationLastVersion`: kotlin.Boolean?) {
        return uniffiRustCallAsync(
        callWithPointer { thisPtr ->
            UniffiLib.INSTANCE.uniffi_restsend_sdk_fn_method_client_sync_chat_logs(
                thisPtr,
                FfiConverterString.lower(`topicId`),FfiConverterOptionalLong.lower(`lastSeq`),FfiConverterUInt.lower(`limit`),FfiConverterTypeSyncChatLogsCallback.lower(`callback`),FfiConverterOptionalBoolean.lower(`ensureConversationLastVersion`),
            )
        },
        { future, callback, continuation -> UniffiLib.INSTANCE.ffi_restsend_sdk_rust_future_poll_void(future, callback, continuation) },
        { future, continuation -> UniffiLib.INSTANCE.ffi_restsend_sdk_rust_future_complete_void(future, continuation) },
        { future -> UniffiLib.INSTANCE.ffi_restsend_sdk_rust_future_free_void(future) },
        // lift function
        { Unit },
        
        // Error FFI converter
        UniffiNullRustCallStatusErrorHandler,
    )
    }

    
    @Suppress("ASSIGNED_BUT_NEVER_ACCESSED_VARIABLE")
    override suspend fun `syncConversations`(`updatedAt`: kotlin.String?, `limit`: kotlin.UInt, `syncLogs`: kotlin.Boolean, `syncLogsLimit`: kotlin.UInt?, `syncLogsMaxCount`: kotlin.UInt?, `lastRemovedAt`: kotlin.String?, `callback`: SyncConversationsCallback) {
        return uniffiRustCallAsync(
        callWithPointer { thisPtr ->
            UniffiLib.INSTANCE.uniffi_restsend_sdk_fn_method_client_sync_conversations(
                thisPtr,
                FfiConverterOptionalString.lower(`updatedAt`),FfiConverterUInt.lower(`limit`),FfiConverterBoolean.lower(`syncLogs`),FfiConverterOptionalUInt.lower(`syncLogsLimit`),FfiConverterOptionalUInt.lower(`syncLogsMaxCount`),FfiConverterOptionalString.lower(`lastRemovedAt`),FfiConverterTypeSyncConversationsCallback.lower(`callback`),
            )
        },
        { future, callback, continuation -> UniffiLib.INSTANCE.ffi_restsend_sdk_rust_future_poll_void(future, callback, continuation) },
        { future, continuation -> UniffiLib.INSTANCE.ffi_restsend_sdk_rust_future_complete_void(future, continuation) },
        { future -> UniffiLib.INSTANCE.ffi_restsend_sdk_rust_future_free_void(future) },
        // lift function
        { Unit },
        
        // Error FFI converter
        UniffiNullRustCallStatusErrorHandler,
    )
    }

    
    @Throws(ClientException::class)
    @Suppress("ASSIGNED_BUT_NEVER_ACCESSED_VARIABLE")
    override suspend fun `transferTopic`(`topicId`: kotlin.String, `userId`: kotlin.String) {
        return uniffiRustCallAsync(
        callWithPointer { thisPtr ->
            UniffiLib.INSTANCE.uniffi_restsend_sdk_fn_method_client_transfer_topic(
                thisPtr,
                FfiConverterString.lower(`topicId`),FfiConverterString.lower(`userId`),
            )
        },
        { future, callback, continuation -> UniffiLib.INSTANCE.ffi_restsend_sdk_rust_future_poll_void(future, callback, continuation) },
        { future, continuation -> UniffiLib.INSTANCE.ffi_restsend_sdk_rust_future_complete_void(future, continuation) },
        { future -> UniffiLib.INSTANCE.ffi_restsend_sdk_rust_future_free_void(future) },
        // lift function
        { Unit },
        
        // Error FFI converter
        ClientException.ErrorHandler,
    )
    }

    
    @Suppress("ASSIGNED_BUT_NEVER_ACCESSED_VARIABLE")
    override suspend fun `trySyncChatLogs`(`conversation`: Conversation, `limit`: kotlin.UInt?) : Conversation? {
        return uniffiRustCallAsync(
        callWithPointer { thisPtr ->
            UniffiLib.INSTANCE.uniffi_restsend_sdk_fn_method_client_try_sync_chat_logs(
                thisPtr,
                FfiConverterTypeConversation.lower(`conversation`),FfiConverterOptionalUInt.lower(`limit`),
            )
        },
        { future, callback, continuation -> UniffiLib.INSTANCE.ffi_restsend_sdk_rust_future_poll_rust_buffer(future, callback, continuation) },
        { future, continuation -> UniffiLib.INSTANCE.ffi_restsend_sdk_rust_future_complete_rust_buffer(future, continuation) },
        { future -> UniffiLib.INSTANCE.ffi_restsend_sdk_rust_future_free_rust_buffer(future) },
        // lift function
        { FfiConverterOptionalTypeConversation.lift(it) },
        // Error FFI converter
        UniffiNullRustCallStatusErrorHandler,
    )
    }

    
    @Throws(ClientException::class)
    @Suppress("ASSIGNED_BUT_NEVER_ACCESSED_VARIABLE")
    override suspend fun `updateTopic`(`topicId`: kotlin.String, `name`: kotlin.String?, `icon`: kotlin.String?) {
        return uniffiRustCallAsync(
        callWithPointer { thisPtr ->
            UniffiLib.INSTANCE.uniffi_restsend_sdk_fn_method_client_update_topic(
                thisPtr,
                FfiConverterString.lower(`topicId`),FfiConverterOptionalString.lower(`name`),FfiConverterOptionalString.lower(`icon`),
            )
        },
        { future, callback, continuation -> UniffiLib.INSTANCE.ffi_restsend_sdk_rust_future_poll_void(future, callback, continuation) },
        { future, continuation -> UniffiLib.INSTANCE.ffi_restsend_sdk_rust_future_complete_void(future, continuation) },
        { future -> UniffiLib.INSTANCE.ffi_restsend_sdk_rust_future_free_void(future) },
        // lift function
        { Unit },
        
        // Error FFI converter
        ClientException.ErrorHandler,
    )
    }

    
    @Throws(ClientException::class)
    @Suppress("ASSIGNED_BUT_NEVER_ACCESSED_VARIABLE")
    override suspend fun `updateTopicNotice`(`topicId`: kotlin.String, `text`: kotlin.String) {
        return uniffiRustCallAsync(
        callWithPointer { thisPtr ->
            UniffiLib.INSTANCE.uniffi_restsend_sdk_fn_method_client_update_topic_notice(
                thisPtr,
                FfiConverterString.lower(`topicId`),FfiConverterString.lower(`text`),
            )
        },
        { future, callback, continuation -> UniffiLib.INSTANCE.ffi_restsend_sdk_rust_future_poll_void(future, callback, continuation) },
        { future, continuation -> UniffiLib.INSTANCE.ffi_restsend_sdk_rust_future_complete_void(future, continuation) },
        { future -> UniffiLib.INSTANCE.ffi_restsend_sdk_rust_future_free_void(future) },
        // lift function
        { Unit },
        
        // Error FFI converter
        ClientException.ErrorHandler,
    )
    }

    

    
    
    companion object
    
}

/**
 * @suppress
 */
public object FfiConverterTypeClient: FfiConverter<Client, Pointer> {

    override fun lower(value: Client): Pointer {
        return value.uniffiClonePointer()
    }

    override fun lift(value: Pointer): Client {
        return Client(value)
    }

    override fun read(buf: ByteBuffer): Client {
        // The Rust code always writes pointers as 8 bytes, and will
        // fail to compile if they don't fit.
        return lift(Pointer(buf.getLong()))
    }

    override fun allocationSize(value: Client) = 8UL

    override fun write(value: Client, buf: ByteBuffer) {
        // The Rust code always expects pointers written as 8 bytes,
        // and will fail to compile if they don't fit.
        buf.putLong(Pointer.nativeValue(lower(value)))
    }
}



data class ApiSendResponse (
    var `senderId`: kotlin.String, 
    var `topicId`: kotlin.String, 
    var `attendeeId`: kotlin.String, 
    var `chatId`: kotlin.String, 
    var `code`: kotlin.UShort, 
    var `seq`: kotlin.Long, 
    var `message`: kotlin.String, 
    var `usage`: kotlin.Long
) {
    
    companion object
}

/**
 * @suppress
 */
public object FfiConverterTypeAPISendResponse: FfiConverterRustBuffer<ApiSendResponse> {
    override fun read(buf: ByteBuffer): ApiSendResponse {
        return ApiSendResponse(
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterUShort.read(buf),
            FfiConverterLong.read(buf),
            FfiConverterString.read(buf),
            FfiConverterLong.read(buf),
        )
    }

    override fun allocationSize(value: ApiSendResponse) = (
            FfiConverterString.allocationSize(value.`senderId`) +
            FfiConverterString.allocationSize(value.`topicId`) +
            FfiConverterString.allocationSize(value.`attendeeId`) +
            FfiConverterString.allocationSize(value.`chatId`) +
            FfiConverterUShort.allocationSize(value.`code`) +
            FfiConverterLong.allocationSize(value.`seq`) +
            FfiConverterString.allocationSize(value.`message`) +
            FfiConverterLong.allocationSize(value.`usage`)
    )

    override fun write(value: ApiSendResponse, buf: ByteBuffer) {
            FfiConverterString.write(value.`senderId`, buf)
            FfiConverterString.write(value.`topicId`, buf)
            FfiConverterString.write(value.`attendeeId`, buf)
            FfiConverterString.write(value.`chatId`, buf)
            FfiConverterUShort.write(value.`code`, buf)
            FfiConverterLong.write(value.`seq`, buf)
            FfiConverterString.write(value.`message`, buf)
            FfiConverterLong.write(value.`usage`, buf)
    }
}



data class Attachment (
    /**
     * if url is not empty, it means the attachment is from remote, without upload
     */
    var `url`: kotlin.String, 
    var `size`: kotlin.Long, 
    var `thumbnail`: kotlin.String, 
    var `fileName`: kotlin.String, 
    var `filePath`: kotlin.String, 
    var `urlOrData`: kotlin.String, 
    var `isPrivate`: kotlin.Boolean, 
    var `status`: AttachmentStatus
) {
    
    companion object
}

/**
 * @suppress
 */
public object FfiConverterTypeAttachment: FfiConverterRustBuffer<Attachment> {
    override fun read(buf: ByteBuffer): Attachment {
        return Attachment(
            FfiConverterString.read(buf),
            FfiConverterLong.read(buf),
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterBoolean.read(buf),
            FfiConverterTypeAttachmentStatus.read(buf),
        )
    }

    override fun allocationSize(value: Attachment) = (
            FfiConverterString.allocationSize(value.`url`) +
            FfiConverterLong.allocationSize(value.`size`) +
            FfiConverterString.allocationSize(value.`thumbnail`) +
            FfiConverterString.allocationSize(value.`fileName`) +
            FfiConverterString.allocationSize(value.`filePath`) +
            FfiConverterString.allocationSize(value.`urlOrData`) +
            FfiConverterBoolean.allocationSize(value.`isPrivate`) +
            FfiConverterTypeAttachmentStatus.allocationSize(value.`status`)
    )

    override fun write(value: Attachment, buf: ByteBuffer) {
            FfiConverterString.write(value.`url`, buf)
            FfiConverterLong.write(value.`size`, buf)
            FfiConverterString.write(value.`thumbnail`, buf)
            FfiConverterString.write(value.`fileName`, buf)
            FfiConverterString.write(value.`filePath`, buf)
            FfiConverterString.write(value.`urlOrData`, buf)
            FfiConverterBoolean.write(value.`isPrivate`, buf)
            FfiConverterTypeAttachmentStatus.write(value.`status`, buf)
    }
}



data class AuthInfo (
    var `endpoint`: kotlin.String, 
    var `userId`: kotlin.String, 
    var `avatar`: kotlin.String, 
    var `name`: kotlin.String, 
    var `token`: kotlin.String, 
    var `isStaff`: kotlin.Boolean, 
    var `isCrossDomain`: kotlin.Boolean, 
    var `privateExtra`: Map<kotlin.String, kotlin.String>?
) {
    
    companion object
}

/**
 * @suppress
 */
public object FfiConverterTypeAuthInfo: FfiConverterRustBuffer<AuthInfo> {
    override fun read(buf: ByteBuffer): AuthInfo {
        return AuthInfo(
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterBoolean.read(buf),
            FfiConverterBoolean.read(buf),
            FfiConverterOptionalMapStringString.read(buf),
        )
    }

    override fun allocationSize(value: AuthInfo) = (
            FfiConverterString.allocationSize(value.`endpoint`) +
            FfiConverterString.allocationSize(value.`userId`) +
            FfiConverterString.allocationSize(value.`avatar`) +
            FfiConverterString.allocationSize(value.`name`) +
            FfiConverterString.allocationSize(value.`token`) +
            FfiConverterBoolean.allocationSize(value.`isStaff`) +
            FfiConverterBoolean.allocationSize(value.`isCrossDomain`) +
            FfiConverterOptionalMapStringString.allocationSize(value.`privateExtra`)
    )

    override fun write(value: AuthInfo, buf: ByteBuffer) {
            FfiConverterString.write(value.`endpoint`, buf)
            FfiConverterString.write(value.`userId`, buf)
            FfiConverterString.write(value.`avatar`, buf)
            FfiConverterString.write(value.`name`, buf)
            FfiConverterString.write(value.`token`, buf)
            FfiConverterBoolean.write(value.`isStaff`, buf)
            FfiConverterBoolean.write(value.`isCrossDomain`, buf)
            FfiConverterOptionalMapStringString.write(value.`privateExtra`, buf)
    }
}



data class ChatLog (
    var `topicId`: kotlin.String, 
    var `id`: kotlin.String, 
    var `seq`: kotlin.Long, 
    var `createdAt`: kotlin.String, 
    var `senderId`: kotlin.String, 
    var `content`: Content, 
    var `read`: kotlin.Boolean, 
    var `recall`: kotlin.Boolean, 
    var `status`: ChatLogStatus, 
    var `cachedAt`: kotlin.Long, 
    var `isCountable`: kotlin.Boolean
) {
    
    companion object
}

/**
 * @suppress
 */
public object FfiConverterTypeChatLog: FfiConverterRustBuffer<ChatLog> {
    override fun read(buf: ByteBuffer): ChatLog {
        return ChatLog(
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterLong.read(buf),
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterTypeContent.read(buf),
            FfiConverterBoolean.read(buf),
            FfiConverterBoolean.read(buf),
            FfiConverterTypeChatLogStatus.read(buf),
            FfiConverterLong.read(buf),
            FfiConverterBoolean.read(buf),
        )
    }

    override fun allocationSize(value: ChatLog) = (
            FfiConverterString.allocationSize(value.`topicId`) +
            FfiConverterString.allocationSize(value.`id`) +
            FfiConverterLong.allocationSize(value.`seq`) +
            FfiConverterString.allocationSize(value.`createdAt`) +
            FfiConverterString.allocationSize(value.`senderId`) +
            FfiConverterTypeContent.allocationSize(value.`content`) +
            FfiConverterBoolean.allocationSize(value.`read`) +
            FfiConverterBoolean.allocationSize(value.`recall`) +
            FfiConverterTypeChatLogStatus.allocationSize(value.`status`) +
            FfiConverterLong.allocationSize(value.`cachedAt`) +
            FfiConverterBoolean.allocationSize(value.`isCountable`)
    )

    override fun write(value: ChatLog, buf: ByteBuffer) {
            FfiConverterString.write(value.`topicId`, buf)
            FfiConverterString.write(value.`id`, buf)
            FfiConverterLong.write(value.`seq`, buf)
            FfiConverterString.write(value.`createdAt`, buf)
            FfiConverterString.write(value.`senderId`, buf)
            FfiConverterTypeContent.write(value.`content`, buf)
            FfiConverterBoolean.write(value.`read`, buf)
            FfiConverterBoolean.write(value.`recall`, buf)
            FfiConverterTypeChatLogStatus.write(value.`status`, buf)
            FfiConverterLong.write(value.`cachedAt`, buf)
            FfiConverterBoolean.write(value.`isCountable`, buf)
    }
}



data class ChatRequest (
    var `reqType`: kotlin.String, 
    var `chatId`: kotlin.String, 
    var `code`: kotlin.UInt, 
    var `topicId`: kotlin.String, 
    var `seq`: kotlin.Long, 
    var `attendee`: kotlin.String, 
    var `attendeeProfile`: User?, 
    var `createdAt`: kotlin.String, 
    var `content`: Content?, 
    var `e2eContent`: kotlin.String?, 
    var `message`: kotlin.String?, 
    var `source`: kotlin.String?
) {
    
    companion object
}

/**
 * @suppress
 */
public object FfiConverterTypeChatRequest: FfiConverterRustBuffer<ChatRequest> {
    override fun read(buf: ByteBuffer): ChatRequest {
        return ChatRequest(
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterUInt.read(buf),
            FfiConverterString.read(buf),
            FfiConverterLong.read(buf),
            FfiConverterString.read(buf),
            FfiConverterOptionalTypeUser.read(buf),
            FfiConverterString.read(buf),
            FfiConverterOptionalTypeContent.read(buf),
            FfiConverterOptionalString.read(buf),
            FfiConverterOptionalString.read(buf),
            FfiConverterOptionalString.read(buf),
        )
    }

    override fun allocationSize(value: ChatRequest) = (
            FfiConverterString.allocationSize(value.`reqType`) +
            FfiConverterString.allocationSize(value.`chatId`) +
            FfiConverterUInt.allocationSize(value.`code`) +
            FfiConverterString.allocationSize(value.`topicId`) +
            FfiConverterLong.allocationSize(value.`seq`) +
            FfiConverterString.allocationSize(value.`attendee`) +
            FfiConverterOptionalTypeUser.allocationSize(value.`attendeeProfile`) +
            FfiConverterString.allocationSize(value.`createdAt`) +
            FfiConverterOptionalTypeContent.allocationSize(value.`content`) +
            FfiConverterOptionalString.allocationSize(value.`e2eContent`) +
            FfiConverterOptionalString.allocationSize(value.`message`) +
            FfiConverterOptionalString.allocationSize(value.`source`)
    )

    override fun write(value: ChatRequest, buf: ByteBuffer) {
            FfiConverterString.write(value.`reqType`, buf)
            FfiConverterString.write(value.`chatId`, buf)
            FfiConverterUInt.write(value.`code`, buf)
            FfiConverterString.write(value.`topicId`, buf)
            FfiConverterLong.write(value.`seq`, buf)
            FfiConverterString.write(value.`attendee`, buf)
            FfiConverterOptionalTypeUser.write(value.`attendeeProfile`, buf)
            FfiConverterString.write(value.`createdAt`, buf)
            FfiConverterOptionalTypeContent.write(value.`content`, buf)
            FfiConverterOptionalString.write(value.`e2eContent`, buf)
            FfiConverterOptionalString.write(value.`message`, buf)
            FfiConverterOptionalString.write(value.`source`, buf)
    }
}



data class ChatRequestStatus (
    /**
     * The message is read by the user
     */
    var `hasRead`: kotlin.Boolean, 
    /**
     * The message is not read count
     */
    var `unreadCountable`: kotlin.Boolean
) {
    
    companion object
}

/**
 * @suppress
 */
public object FfiConverterTypeChatRequestStatus: FfiConverterRustBuffer<ChatRequestStatus> {
    override fun read(buf: ByteBuffer): ChatRequestStatus {
        return ChatRequestStatus(
            FfiConverterBoolean.read(buf),
            FfiConverterBoolean.read(buf),
        )
    }

    override fun allocationSize(value: ChatRequestStatus) = (
            FfiConverterBoolean.allocationSize(value.`hasRead`) +
            FfiConverterBoolean.allocationSize(value.`unreadCountable`)
    )

    override fun write(value: ChatRequestStatus, buf: ByteBuffer) {
            FfiConverterBoolean.write(value.`hasRead`, buf)
            FfiConverterBoolean.write(value.`unreadCountable`, buf)
    }
}



data class Content (
    var `contentType`: kotlin.String, 
    var `encrypted`: kotlin.Boolean, 
    var `checksum`: kotlin.UInt, 
    var `text`: kotlin.String, 
    var `placeholder`: kotlin.String, 
    var `thumbnail`: kotlin.String, 
    var `duration`: kotlin.String, 
    var `size`: kotlin.ULong, 
    var `width`: kotlin.Float, 
    var `height`: kotlin.Float, 
    var `mentions`: List<kotlin.String>, 
    var `mentionAll`: kotlin.Boolean, 
    var `reply`: kotlin.String, 
    var `replyContent`: kotlin.String?, 
    var `createdAt`: kotlin.String, 
    var `attachment`: Attachment?, 
    var `extra`: Map<kotlin.String, kotlin.String>?, 
    var `unreadable`: kotlin.Boolean
) {
    
    companion object
}

/**
 * @suppress
 */
public object FfiConverterTypeContent: FfiConverterRustBuffer<Content> {
    override fun read(buf: ByteBuffer): Content {
        return Content(
            FfiConverterString.read(buf),
            FfiConverterBoolean.read(buf),
            FfiConverterUInt.read(buf),
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterULong.read(buf),
            FfiConverterFloat.read(buf),
            FfiConverterFloat.read(buf),
            FfiConverterSequenceString.read(buf),
            FfiConverterBoolean.read(buf),
            FfiConverterString.read(buf),
            FfiConverterOptionalString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterOptionalTypeAttachment.read(buf),
            FfiConverterOptionalMapStringString.read(buf),
            FfiConverterBoolean.read(buf),
        )
    }

    override fun allocationSize(value: Content) = (
            FfiConverterString.allocationSize(value.`contentType`) +
            FfiConverterBoolean.allocationSize(value.`encrypted`) +
            FfiConverterUInt.allocationSize(value.`checksum`) +
            FfiConverterString.allocationSize(value.`text`) +
            FfiConverterString.allocationSize(value.`placeholder`) +
            FfiConverterString.allocationSize(value.`thumbnail`) +
            FfiConverterString.allocationSize(value.`duration`) +
            FfiConverterULong.allocationSize(value.`size`) +
            FfiConverterFloat.allocationSize(value.`width`) +
            FfiConverterFloat.allocationSize(value.`height`) +
            FfiConverterSequenceString.allocationSize(value.`mentions`) +
            FfiConverterBoolean.allocationSize(value.`mentionAll`) +
            FfiConverterString.allocationSize(value.`reply`) +
            FfiConverterOptionalString.allocationSize(value.`replyContent`) +
            FfiConverterString.allocationSize(value.`createdAt`) +
            FfiConverterOptionalTypeAttachment.allocationSize(value.`attachment`) +
            FfiConverterOptionalMapStringString.allocationSize(value.`extra`) +
            FfiConverterBoolean.allocationSize(value.`unreadable`)
    )

    override fun write(value: Content, buf: ByteBuffer) {
            FfiConverterString.write(value.`contentType`, buf)
            FfiConverterBoolean.write(value.`encrypted`, buf)
            FfiConverterUInt.write(value.`checksum`, buf)
            FfiConverterString.write(value.`text`, buf)
            FfiConverterString.write(value.`placeholder`, buf)
            FfiConverterString.write(value.`thumbnail`, buf)
            FfiConverterString.write(value.`duration`, buf)
            FfiConverterULong.write(value.`size`, buf)
            FfiConverterFloat.write(value.`width`, buf)
            FfiConverterFloat.write(value.`height`, buf)
            FfiConverterSequenceString.write(value.`mentions`, buf)
            FfiConverterBoolean.write(value.`mentionAll`, buf)
            FfiConverterString.write(value.`reply`, buf)
            FfiConverterOptionalString.write(value.`replyContent`, buf)
            FfiConverterString.write(value.`createdAt`, buf)
            FfiConverterOptionalTypeAttachment.write(value.`attachment`, buf)
            FfiConverterOptionalMapStringString.write(value.`extra`, buf)
            FfiConverterBoolean.write(value.`unreadable`, buf)
    }
}



data class Conversation (
    var `ownerId`: kotlin.String, 
    var `topicId`: kotlin.String, 
    var `updatedAt`: kotlin.String, 
    var `startSeq`: kotlin.Long, 
    var `lastSeq`: kotlin.Long, 
    var `lastReadSeq`: kotlin.Long, 
    var `lastReadAt`: kotlin.String?, 
    var `multiple`: kotlin.Boolean, 
    var `attendee`: kotlin.String, 
    var `members`: kotlin.Long, 
    var `name`: kotlin.String, 
    var `icon`: kotlin.String, 
    var `sticky`: kotlin.Boolean, 
    var `mute`: kotlin.Boolean, 
    var `source`: kotlin.String, 
    var `unread`: kotlin.Long, 
    var `lastSenderId`: kotlin.String, 
    var `lastMessage`: Content?, 
    var `lastMessageAt`: kotlin.String, 
    var `lastMessageSeq`: kotlin.Long?, 
    var `remark`: kotlin.String?, 
    var `extra`: Map<kotlin.String, kotlin.String>?, 
    var `topicExtra`: Map<kotlin.String, kotlin.String>?, 
    var `topicOwnerId`: kotlin.String?, 
    var `topicCreatedAt`: kotlin.String?, 
    var `tags`: List<Tag>?, 
    var `cachedAt`: kotlin.Long, 
    var `isPartial`: kotlin.Boolean
) {
    
    companion object
}

/**
 * @suppress
 */
public object FfiConverterTypeConversation: FfiConverterRustBuffer<Conversation> {
    override fun read(buf: ByteBuffer): Conversation {
        return Conversation(
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterLong.read(buf),
            FfiConverterLong.read(buf),
            FfiConverterLong.read(buf),
            FfiConverterOptionalString.read(buf),
            FfiConverterBoolean.read(buf),
            FfiConverterString.read(buf),
            FfiConverterLong.read(buf),
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterBoolean.read(buf),
            FfiConverterBoolean.read(buf),
            FfiConverterString.read(buf),
            FfiConverterLong.read(buf),
            FfiConverterString.read(buf),
            FfiConverterOptionalTypeContent.read(buf),
            FfiConverterString.read(buf),
            FfiConverterOptionalLong.read(buf),
            FfiConverterOptionalString.read(buf),
            FfiConverterOptionalMapStringString.read(buf),
            FfiConverterOptionalMapStringString.read(buf),
            FfiConverterOptionalString.read(buf),
            FfiConverterOptionalString.read(buf),
            FfiConverterOptionalSequenceTypeTag.read(buf),
            FfiConverterLong.read(buf),
            FfiConverterBoolean.read(buf),
        )
    }

    override fun allocationSize(value: Conversation) = (
            FfiConverterString.allocationSize(value.`ownerId`) +
            FfiConverterString.allocationSize(value.`topicId`) +
            FfiConverterString.allocationSize(value.`updatedAt`) +
            FfiConverterLong.allocationSize(value.`startSeq`) +
            FfiConverterLong.allocationSize(value.`lastSeq`) +
            FfiConverterLong.allocationSize(value.`lastReadSeq`) +
            FfiConverterOptionalString.allocationSize(value.`lastReadAt`) +
            FfiConverterBoolean.allocationSize(value.`multiple`) +
            FfiConverterString.allocationSize(value.`attendee`) +
            FfiConverterLong.allocationSize(value.`members`) +
            FfiConverterString.allocationSize(value.`name`) +
            FfiConverterString.allocationSize(value.`icon`) +
            FfiConverterBoolean.allocationSize(value.`sticky`) +
            FfiConverterBoolean.allocationSize(value.`mute`) +
            FfiConverterString.allocationSize(value.`source`) +
            FfiConverterLong.allocationSize(value.`unread`) +
            FfiConverterString.allocationSize(value.`lastSenderId`) +
            FfiConverterOptionalTypeContent.allocationSize(value.`lastMessage`) +
            FfiConverterString.allocationSize(value.`lastMessageAt`) +
            FfiConverterOptionalLong.allocationSize(value.`lastMessageSeq`) +
            FfiConverterOptionalString.allocationSize(value.`remark`) +
            FfiConverterOptionalMapStringString.allocationSize(value.`extra`) +
            FfiConverterOptionalMapStringString.allocationSize(value.`topicExtra`) +
            FfiConverterOptionalString.allocationSize(value.`topicOwnerId`) +
            FfiConverterOptionalString.allocationSize(value.`topicCreatedAt`) +
            FfiConverterOptionalSequenceTypeTag.allocationSize(value.`tags`) +
            FfiConverterLong.allocationSize(value.`cachedAt`) +
            FfiConverterBoolean.allocationSize(value.`isPartial`)
    )

    override fun write(value: Conversation, buf: ByteBuffer) {
            FfiConverterString.write(value.`ownerId`, buf)
            FfiConverterString.write(value.`topicId`, buf)
            FfiConverterString.write(value.`updatedAt`, buf)
            FfiConverterLong.write(value.`startSeq`, buf)
            FfiConverterLong.write(value.`lastSeq`, buf)
            FfiConverterLong.write(value.`lastReadSeq`, buf)
            FfiConverterOptionalString.write(value.`lastReadAt`, buf)
            FfiConverterBoolean.write(value.`multiple`, buf)
            FfiConverterString.write(value.`attendee`, buf)
            FfiConverterLong.write(value.`members`, buf)
            FfiConverterString.write(value.`name`, buf)
            FfiConverterString.write(value.`icon`, buf)
            FfiConverterBoolean.write(value.`sticky`, buf)
            FfiConverterBoolean.write(value.`mute`, buf)
            FfiConverterString.write(value.`source`, buf)
            FfiConverterLong.write(value.`unread`, buf)
            FfiConverterString.write(value.`lastSenderId`, buf)
            FfiConverterOptionalTypeContent.write(value.`lastMessage`, buf)
            FfiConverterString.write(value.`lastMessageAt`, buf)
            FfiConverterOptionalLong.write(value.`lastMessageSeq`, buf)
            FfiConverterOptionalString.write(value.`remark`, buf)
            FfiConverterOptionalMapStringString.write(value.`extra`, buf)
            FfiConverterOptionalMapStringString.write(value.`topicExtra`, buf)
            FfiConverterOptionalString.write(value.`topicOwnerId`, buf)
            FfiConverterOptionalString.write(value.`topicCreatedAt`, buf)
            FfiConverterOptionalSequenceTypeTag.write(value.`tags`, buf)
            FfiConverterLong.write(value.`cachedAt`, buf)
            FfiConverterBoolean.write(value.`isPartial`, buf)
    }
}



data class GetChatLogsResult (
    var `hasMore`: kotlin.Boolean, 
    var `startSeq`: kotlin.Long, 
    var `endSeq`: kotlin.Long, 
    var `items`: List<ChatLog>
) {
    
    companion object
}

/**
 * @suppress
 */
public object FfiConverterTypeGetChatLogsResult: FfiConverterRustBuffer<GetChatLogsResult> {
    override fun read(buf: ByteBuffer): GetChatLogsResult {
        return GetChatLogsResult(
            FfiConverterBoolean.read(buf),
            FfiConverterLong.read(buf),
            FfiConverterLong.read(buf),
            FfiConverterSequenceTypeChatLog.read(buf),
        )
    }

    override fun allocationSize(value: GetChatLogsResult) = (
            FfiConverterBoolean.allocationSize(value.`hasMore`) +
            FfiConverterLong.allocationSize(value.`startSeq`) +
            FfiConverterLong.allocationSize(value.`endSeq`) +
            FfiConverterSequenceTypeChatLog.allocationSize(value.`items`)
    )

    override fun write(value: GetChatLogsResult, buf: ByteBuffer) {
            FfiConverterBoolean.write(value.`hasMore`, buf)
            FfiConverterLong.write(value.`startSeq`, buf)
            FfiConverterLong.write(value.`endSeq`, buf)
            FfiConverterSequenceTypeChatLog.write(value.`items`, buf)
    }
}



data class ListUserResult (
    var `hasMore`: kotlin.Boolean, 
    var `updatedAt`: kotlin.String, 
    var `items`: List<User>
) {
    
    companion object
}

/**
 * @suppress
 */
public object FfiConverterTypeListUserResult: FfiConverterRustBuffer<ListUserResult> {
    override fun read(buf: ByteBuffer): ListUserResult {
        return ListUserResult(
            FfiConverterBoolean.read(buf),
            FfiConverterString.read(buf),
            FfiConverterSequenceTypeUser.read(buf),
        )
    }

    override fun allocationSize(value: ListUserResult) = (
            FfiConverterBoolean.allocationSize(value.`hasMore`) +
            FfiConverterString.allocationSize(value.`updatedAt`) +
            FfiConverterSequenceTypeUser.allocationSize(value.`items`)
    )

    override fun write(value: ListUserResult, buf: ByteBuffer) {
            FfiConverterBoolean.write(value.`hasMore`, buf)
            FfiConverterString.write(value.`updatedAt`, buf)
            FfiConverterSequenceTypeUser.write(value.`items`, buf)
    }
}



data class Tag (
    var `id`: kotlin.String, 
    var `tagType`: kotlin.String, 
    var `label`: kotlin.String
) {
    
    companion object
}

/**
 * @suppress
 */
public object FfiConverterTypeTag: FfiConverterRustBuffer<Tag> {
    override fun read(buf: ByteBuffer): Tag {
        return Tag(
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
        )
    }

    override fun allocationSize(value: Tag) = (
            FfiConverterString.allocationSize(value.`id`) +
            FfiConverterString.allocationSize(value.`tagType`) +
            FfiConverterString.allocationSize(value.`label`)
    )

    override fun write(value: Tag, buf: ByteBuffer) {
            FfiConverterString.write(value.`id`, buf)
            FfiConverterString.write(value.`tagType`, buf)
            FfiConverterString.write(value.`label`, buf)
    }
}



data class Topic (
    var `id`: kotlin.String, 
    var `name`: kotlin.String, 
    var `icon`: kotlin.String, 
    var `remark`: kotlin.String, 
    var `ownerId`: kotlin.String, 
    var `attendeeId`: kotlin.String, 
    var `admins`: List<kotlin.String>, 
    var `members`: kotlin.UInt, 
    var `lastSeq`: kotlin.Long, 
    var `multiple`: kotlin.Boolean, 
    var `source`: kotlin.String, 
    var `private`: kotlin.Boolean, 
    var `createdAt`: kotlin.String, 
    var `updatedAt`: kotlin.String, 
    var `notice`: TopicNotice?, 
    var `extra`: Map<kotlin.String, kotlin.String>?, 
    var `silent`: kotlin.Boolean, 
    var `cachedAt`: kotlin.Long
) {
    
    companion object
}

/**
 * @suppress
 */
public object FfiConverterTypeTopic: FfiConverterRustBuffer<Topic> {
    override fun read(buf: ByteBuffer): Topic {
        return Topic(
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterSequenceString.read(buf),
            FfiConverterUInt.read(buf),
            FfiConverterLong.read(buf),
            FfiConverterBoolean.read(buf),
            FfiConverterString.read(buf),
            FfiConverterBoolean.read(buf),
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterOptionalTypeTopicNotice.read(buf),
            FfiConverterOptionalMapStringString.read(buf),
            FfiConverterBoolean.read(buf),
            FfiConverterLong.read(buf),
        )
    }

    override fun allocationSize(value: Topic) = (
            FfiConverterString.allocationSize(value.`id`) +
            FfiConverterString.allocationSize(value.`name`) +
            FfiConverterString.allocationSize(value.`icon`) +
            FfiConverterString.allocationSize(value.`remark`) +
            FfiConverterString.allocationSize(value.`ownerId`) +
            FfiConverterString.allocationSize(value.`attendeeId`) +
            FfiConverterSequenceString.allocationSize(value.`admins`) +
            FfiConverterUInt.allocationSize(value.`members`) +
            FfiConverterLong.allocationSize(value.`lastSeq`) +
            FfiConverterBoolean.allocationSize(value.`multiple`) +
            FfiConverterString.allocationSize(value.`source`) +
            FfiConverterBoolean.allocationSize(value.`private`) +
            FfiConverterString.allocationSize(value.`createdAt`) +
            FfiConverterString.allocationSize(value.`updatedAt`) +
            FfiConverterOptionalTypeTopicNotice.allocationSize(value.`notice`) +
            FfiConverterOptionalMapStringString.allocationSize(value.`extra`) +
            FfiConverterBoolean.allocationSize(value.`silent`) +
            FfiConverterLong.allocationSize(value.`cachedAt`)
    )

    override fun write(value: Topic, buf: ByteBuffer) {
            FfiConverterString.write(value.`id`, buf)
            FfiConverterString.write(value.`name`, buf)
            FfiConverterString.write(value.`icon`, buf)
            FfiConverterString.write(value.`remark`, buf)
            FfiConverterString.write(value.`ownerId`, buf)
            FfiConverterString.write(value.`attendeeId`, buf)
            FfiConverterSequenceString.write(value.`admins`, buf)
            FfiConverterUInt.write(value.`members`, buf)
            FfiConverterLong.write(value.`lastSeq`, buf)
            FfiConverterBoolean.write(value.`multiple`, buf)
            FfiConverterString.write(value.`source`, buf)
            FfiConverterBoolean.write(value.`private`, buf)
            FfiConverterString.write(value.`createdAt`, buf)
            FfiConverterString.write(value.`updatedAt`, buf)
            FfiConverterOptionalTypeTopicNotice.write(value.`notice`, buf)
            FfiConverterOptionalMapStringString.write(value.`extra`, buf)
            FfiConverterBoolean.write(value.`silent`, buf)
            FfiConverterLong.write(value.`cachedAt`, buf)
    }
}



data class TopicKnock (
    var `createdAt`: kotlin.String, 
    var `updatedAt`: kotlin.String, 
    var `topicId`: kotlin.String, 
    var `userId`: kotlin.String, 
    var `message`: kotlin.String, 
    var `source`: kotlin.String, 
    var `status`: kotlin.String, 
    var `adminId`: kotlin.String
) {
    
    companion object
}

/**
 * @suppress
 */
public object FfiConverterTypeTopicKnock: FfiConverterRustBuffer<TopicKnock> {
    override fun read(buf: ByteBuffer): TopicKnock {
        return TopicKnock(
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
        )
    }

    override fun allocationSize(value: TopicKnock) = (
            FfiConverterString.allocationSize(value.`createdAt`) +
            FfiConverterString.allocationSize(value.`updatedAt`) +
            FfiConverterString.allocationSize(value.`topicId`) +
            FfiConverterString.allocationSize(value.`userId`) +
            FfiConverterString.allocationSize(value.`message`) +
            FfiConverterString.allocationSize(value.`source`) +
            FfiConverterString.allocationSize(value.`status`) +
            FfiConverterString.allocationSize(value.`adminId`)
    )

    override fun write(value: TopicKnock, buf: ByteBuffer) {
            FfiConverterString.write(value.`createdAt`, buf)
            FfiConverterString.write(value.`updatedAt`, buf)
            FfiConverterString.write(value.`topicId`, buf)
            FfiConverterString.write(value.`userId`, buf)
            FfiConverterString.write(value.`message`, buf)
            FfiConverterString.write(value.`source`, buf)
            FfiConverterString.write(value.`status`, buf)
            FfiConverterString.write(value.`adminId`, buf)
    }
}



data class TopicMember (
    var `topicId`: kotlin.String, 
    var `userId`: kotlin.String, 
    var `name`: kotlin.String, 
    var `source`: kotlin.String, 
    var `silenceAt`: kotlin.String?, 
    var `joinedAt`: kotlin.String, 
    var `updatedAt`: kotlin.String, 
    var `extra`: Map<kotlin.String, kotlin.String>?
) {
    
    companion object
}

/**
 * @suppress
 */
public object FfiConverterTypeTopicMember: FfiConverterRustBuffer<TopicMember> {
    override fun read(buf: ByteBuffer): TopicMember {
        return TopicMember(
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterOptionalString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterOptionalMapStringString.read(buf),
        )
    }

    override fun allocationSize(value: TopicMember) = (
            FfiConverterString.allocationSize(value.`topicId`) +
            FfiConverterString.allocationSize(value.`userId`) +
            FfiConverterString.allocationSize(value.`name`) +
            FfiConverterString.allocationSize(value.`source`) +
            FfiConverterOptionalString.allocationSize(value.`silenceAt`) +
            FfiConverterString.allocationSize(value.`joinedAt`) +
            FfiConverterString.allocationSize(value.`updatedAt`) +
            FfiConverterOptionalMapStringString.allocationSize(value.`extra`)
    )

    override fun write(value: TopicMember, buf: ByteBuffer) {
            FfiConverterString.write(value.`topicId`, buf)
            FfiConverterString.write(value.`userId`, buf)
            FfiConverterString.write(value.`name`, buf)
            FfiConverterString.write(value.`source`, buf)
            FfiConverterOptionalString.write(value.`silenceAt`, buf)
            FfiConverterString.write(value.`joinedAt`, buf)
            FfiConverterString.write(value.`updatedAt`, buf)
            FfiConverterOptionalMapStringString.write(value.`extra`, buf)
    }
}



data class TopicNotice (
    var `text`: kotlin.String, 
    var `publisher`: kotlin.String, 
    var `updatedAt`: kotlin.String
) {
    
    companion object
}

/**
 * @suppress
 */
public object FfiConverterTypeTopicNotice: FfiConverterRustBuffer<TopicNotice> {
    override fun read(buf: ByteBuffer): TopicNotice {
        return TopicNotice(
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
        )
    }

    override fun allocationSize(value: TopicNotice) = (
            FfiConverterString.allocationSize(value.`text`) +
            FfiConverterString.allocationSize(value.`publisher`) +
            FfiConverterString.allocationSize(value.`updatedAt`)
    )

    override fun write(value: TopicNotice, buf: ByteBuffer) {
            FfiConverterString.write(value.`text`, buf)
            FfiConverterString.write(value.`publisher`, buf)
            FfiConverterString.write(value.`updatedAt`, buf)
    }
}



data class Upload (
    var `path`: kotlin.String, 
    var `fileName`: kotlin.String, 
    var `thumbnail`: kotlin.String, 
    var `ext`: kotlin.String, 
    var `size`: kotlin.ULong, 
    var `external`: kotlin.Boolean
) {
    
    companion object
}

/**
 * @suppress
 */
public object FfiConverterTypeUpload: FfiConverterRustBuffer<Upload> {
    override fun read(buf: ByteBuffer): Upload {
        return Upload(
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterULong.read(buf),
            FfiConverterBoolean.read(buf),
        )
    }

    override fun allocationSize(value: Upload) = (
            FfiConverterString.allocationSize(value.`path`) +
            FfiConverterString.allocationSize(value.`fileName`) +
            FfiConverterString.allocationSize(value.`thumbnail`) +
            FfiConverterString.allocationSize(value.`ext`) +
            FfiConverterULong.allocationSize(value.`size`) +
            FfiConverterBoolean.allocationSize(value.`external`)
    )

    override fun write(value: Upload, buf: ByteBuffer) {
            FfiConverterString.write(value.`path`, buf)
            FfiConverterString.write(value.`fileName`, buf)
            FfiConverterString.write(value.`thumbnail`, buf)
            FfiConverterString.write(value.`ext`, buf)
            FfiConverterULong.write(value.`size`, buf)
            FfiConverterBoolean.write(value.`external`, buf)
    }
}



data class User (
    var `userId`: kotlin.String, 
    var `name`: kotlin.String, 
    var `avatar`: kotlin.String, 
    var `publicKey`: kotlin.String, 
    var `remark`: kotlin.String, 
    var `isContact`: kotlin.Boolean, 
    var `isStar`: kotlin.Boolean, 
    var `isBlocked`: kotlin.Boolean, 
    var `locale`: kotlin.String, 
    var `city`: kotlin.String, 
    var `country`: kotlin.String, 
    var `source`: kotlin.String, 
    var `createdAt`: kotlin.String, 
    var `gender`: kotlin.String, 
    var `memo`: kotlin.String, 
    var `extra`: Map<kotlin.String, kotlin.String>?, 
    var `isStaff`: kotlin.Boolean, 
    var `cachedAt`: kotlin.Long, 
    var `isPartial`: kotlin.Boolean
) {
    
    companion object
}

/**
 * @suppress
 */
public object FfiConverterTypeUser: FfiConverterRustBuffer<User> {
    override fun read(buf: ByteBuffer): User {
        return User(
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterBoolean.read(buf),
            FfiConverterBoolean.read(buf),
            FfiConverterBoolean.read(buf),
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterOptionalMapStringString.read(buf),
            FfiConverterBoolean.read(buf),
            FfiConverterLong.read(buf),
            FfiConverterBoolean.read(buf),
        )
    }

    override fun allocationSize(value: User) = (
            FfiConverterString.allocationSize(value.`userId`) +
            FfiConverterString.allocationSize(value.`name`) +
            FfiConverterString.allocationSize(value.`avatar`) +
            FfiConverterString.allocationSize(value.`publicKey`) +
            FfiConverterString.allocationSize(value.`remark`) +
            FfiConverterBoolean.allocationSize(value.`isContact`) +
            FfiConverterBoolean.allocationSize(value.`isStar`) +
            FfiConverterBoolean.allocationSize(value.`isBlocked`) +
            FfiConverterString.allocationSize(value.`locale`) +
            FfiConverterString.allocationSize(value.`city`) +
            FfiConverterString.allocationSize(value.`country`) +
            FfiConverterString.allocationSize(value.`source`) +
            FfiConverterString.allocationSize(value.`createdAt`) +
            FfiConverterString.allocationSize(value.`gender`) +
            FfiConverterString.allocationSize(value.`memo`) +
            FfiConverterOptionalMapStringString.allocationSize(value.`extra`) +
            FfiConverterBoolean.allocationSize(value.`isStaff`) +
            FfiConverterLong.allocationSize(value.`cachedAt`) +
            FfiConverterBoolean.allocationSize(value.`isPartial`)
    )

    override fun write(value: User, buf: ByteBuffer) {
            FfiConverterString.write(value.`userId`, buf)
            FfiConverterString.write(value.`name`, buf)
            FfiConverterString.write(value.`avatar`, buf)
            FfiConverterString.write(value.`publicKey`, buf)
            FfiConverterString.write(value.`remark`, buf)
            FfiConverterBoolean.write(value.`isContact`, buf)
            FfiConverterBoolean.write(value.`isStar`, buf)
            FfiConverterBoolean.write(value.`isBlocked`, buf)
            FfiConverterString.write(value.`locale`, buf)
            FfiConverterString.write(value.`city`, buf)
            FfiConverterString.write(value.`country`, buf)
            FfiConverterString.write(value.`source`, buf)
            FfiConverterString.write(value.`createdAt`, buf)
            FfiConverterString.write(value.`gender`, buf)
            FfiConverterString.write(value.`memo`, buf)
            FfiConverterOptionalMapStringString.write(value.`extra`, buf)
            FfiConverterBoolean.write(value.`isStaff`, buf)
            FfiConverterLong.write(value.`cachedAt`, buf)
            FfiConverterBoolean.write(value.`isPartial`, buf)
    }
}




enum class AttachmentStatus {
    
    TO_UPLOAD,
    TO_DOWNLOAD,
    UPLOADING,
    DOWNLOADING,
    PAUSED,
    DONE,
    FAILED;
    companion object
}


/**
 * @suppress
 */
public object FfiConverterTypeAttachmentStatus: FfiConverterRustBuffer<AttachmentStatus> {
    override fun read(buf: ByteBuffer) = try {
        AttachmentStatus.values()[buf.getInt() - 1]
    } catch (e: IndexOutOfBoundsException) {
        throw RuntimeException("invalid enum value, something is very wrong!!", e)
    }

    override fun allocationSize(value: AttachmentStatus) = 4UL

    override fun write(value: AttachmentStatus, buf: ByteBuffer) {
        buf.putInt(value.ordinal + 1)
    }
}






enum class ChatLogStatus {
    
    UPLOADING,
    SENDING,
    SENT,
    DOWNLOADING,
    RECEIVED,
    READ,
    SEND_FAILED;
    companion object
}


/**
 * @suppress
 */
public object FfiConverterTypeChatLogStatus: FfiConverterRustBuffer<ChatLogStatus> {
    override fun read(buf: ByteBuffer) = try {
        ChatLogStatus.values()[buf.getInt() - 1]
    } catch (e: IndexOutOfBoundsException) {
        throw RuntimeException("invalid enum value, something is very wrong!!", e)
    }

    override fun allocationSize(value: ChatLogStatus) = 4UL

    override fun write(value: ChatLogStatus, buf: ByteBuffer) {
        buf.putInt(value.ordinal + 1)
    }
}







sealed class ClientException(message: String): kotlin.Exception(message) {
        
        class InvalidPassword(message: String) : ClientException(message)
        
        class Forbidden(message: String) : ClientException(message)
        
        class TokenExpired(message: String) : ClientException(message)
        
        class NetworkBroken(message: String) : ClientException(message)
        
        class TopicNotFound(message: String) : ClientException(message)
        
        class TopicKnockNotFound(message: String) : ClientException(message)
        
        class ChatLogNotFound(message: String) : ClientException(message)
        
        class InvalidContent(message: String) : ClientException(message)
        
        class ConversationNotFound(message: String) : ClientException(message)
        
        class UserNotFound(message: String) : ClientException(message)
        
        class KickOffByOtherClient(message: String) : ClientException(message)
        
        class StdException(message: String) : ClientException(message)
        
        class WebsocketException(message: String) : ClientException(message)
        
        class Http(message: String) : ClientException(message)
        
        class UserCancel(message: String) : ClientException(message)
        
        class Storage(message: String) : ClientException(message)
        
        class Other(message: String) : ClientException(message)
        

    companion object ErrorHandler : UniffiRustCallStatusErrorHandler<ClientException> {
        override fun lift(error_buf: RustBuffer.ByValue): ClientException = FfiConverterTypeClientError.lift(error_buf)
    }
}

/**
 * @suppress
 */
public object FfiConverterTypeClientError : FfiConverterRustBuffer<ClientException> {
    override fun read(buf: ByteBuffer): ClientException {
        
            return when(buf.getInt()) {
            1 -> ClientException.InvalidPassword(FfiConverterString.read(buf))
            2 -> ClientException.Forbidden(FfiConverterString.read(buf))
            3 -> ClientException.TokenExpired(FfiConverterString.read(buf))
            4 -> ClientException.NetworkBroken(FfiConverterString.read(buf))
            5 -> ClientException.TopicNotFound(FfiConverterString.read(buf))
            6 -> ClientException.TopicKnockNotFound(FfiConverterString.read(buf))
            7 -> ClientException.ChatLogNotFound(FfiConverterString.read(buf))
            8 -> ClientException.InvalidContent(FfiConverterString.read(buf))
            9 -> ClientException.ConversationNotFound(FfiConverterString.read(buf))
            10 -> ClientException.UserNotFound(FfiConverterString.read(buf))
            11 -> ClientException.KickOffByOtherClient(FfiConverterString.read(buf))
            12 -> ClientException.StdException(FfiConverterString.read(buf))
            13 -> ClientException.WebsocketException(FfiConverterString.read(buf))
            14 -> ClientException.Http(FfiConverterString.read(buf))
            15 -> ClientException.UserCancel(FfiConverterString.read(buf))
            16 -> ClientException.Storage(FfiConverterString.read(buf))
            17 -> ClientException.Other(FfiConverterString.read(buf))
            else -> throw RuntimeException("invalid error enum value, something is very wrong!!")
        }
        
    }

    override fun allocationSize(value: ClientException): ULong {
        return 4UL
    }

    override fun write(value: ClientException, buf: ByteBuffer) {
        when(value) {
            is ClientException.InvalidPassword -> {
                buf.putInt(1)
                Unit
            }
            is ClientException.Forbidden -> {
                buf.putInt(2)
                Unit
            }
            is ClientException.TokenExpired -> {
                buf.putInt(3)
                Unit
            }
            is ClientException.NetworkBroken -> {
                buf.putInt(4)
                Unit
            }
            is ClientException.TopicNotFound -> {
                buf.putInt(5)
                Unit
            }
            is ClientException.TopicKnockNotFound -> {
                buf.putInt(6)
                Unit
            }
            is ClientException.ChatLogNotFound -> {
                buf.putInt(7)
                Unit
            }
            is ClientException.InvalidContent -> {
                buf.putInt(8)
                Unit
            }
            is ClientException.ConversationNotFound -> {
                buf.putInt(9)
                Unit
            }
            is ClientException.UserNotFound -> {
                buf.putInt(10)
                Unit
            }
            is ClientException.KickOffByOtherClient -> {
                buf.putInt(11)
                Unit
            }
            is ClientException.StdException -> {
                buf.putInt(12)
                Unit
            }
            is ClientException.WebsocketException -> {
                buf.putInt(13)
                Unit
            }
            is ClientException.Http -> {
                buf.putInt(14)
                Unit
            }
            is ClientException.UserCancel -> {
                buf.putInt(15)
                Unit
            }
            is ClientException.Storage -> {
                buf.putInt(16)
                Unit
            }
            is ClientException.Other -> {
                buf.putInt(17)
                Unit
            }
        }.let { /* this makes the `when` an expression, which ensures it is exhaustive */ }
    }

}





public interface CountableCallback {
    
    fun `isCountable`(`content`: Content): kotlin.Boolean
    
    companion object
}

// Magic number for the Rust proxy to call using the same mechanism as every other method,
// to free the callback once it's dropped by Rust.
internal const val IDX_CALLBACK_FREE = 0
// Callback return codes
internal const val UNIFFI_CALLBACK_SUCCESS = 0
internal const val UNIFFI_CALLBACK_ERROR = 1
internal const val UNIFFI_CALLBACK_UNEXPECTED_ERROR = 2

/**
 * @suppress
 */
public abstract class FfiConverterCallbackInterface<CallbackInterface: Any>: FfiConverter<CallbackInterface, Long> {
    internal val handleMap = UniffiHandleMap<CallbackInterface>()

    internal fun drop(handle: Long) {
        handleMap.remove(handle)
    }

    override fun lift(value: Long): CallbackInterface {
        return handleMap.get(value)
    }

    override fun read(buf: ByteBuffer) = lift(buf.getLong())

    override fun lower(value: CallbackInterface) = handleMap.insert(value)

    override fun allocationSize(value: CallbackInterface) = 8UL

    override fun write(value: CallbackInterface, buf: ByteBuffer) {
        buf.putLong(lower(value))
    }
}

// Put the implementation in an object so we don't pollute the top-level namespace
internal object uniffiCallbackInterfaceCountableCallback {
    internal object `isCountable`: UniffiCallbackInterfaceCountableCallbackMethod0 {
        override fun callback(`uniffiHandle`: Long,`content`: RustBuffer.ByValue,`uniffiOutReturn`: ByteByReference,uniffiCallStatus: UniffiRustCallStatus,) {
            val uniffiObj = FfiConverterTypeCountableCallback.handleMap.get(uniffiHandle)
            val makeCall = { ->
                uniffiObj.`isCountable`(
                    FfiConverterTypeContent.lift(`content`),
                )
            }
            val writeReturn = { value: kotlin.Boolean -> uniffiOutReturn.setValue(FfiConverterBoolean.lower(value)) }
            uniffiTraitInterfaceCall(uniffiCallStatus, makeCall, writeReturn)
        }
    }

    internal object uniffiFree: UniffiCallbackInterfaceFree {
        override fun callback(handle: Long) {
            FfiConverterTypeCountableCallback.handleMap.remove(handle)
        }
    }

    internal var vtable = UniffiVTableCallbackInterfaceCountableCallback.UniffiByValue(
        `isCountable`,
        uniffiFree,
    )

    // Registers the foreign callback with the Rust side.
    // This method is generated for each callback interface.
    internal fun register(lib: UniffiLib) {
        lib.uniffi_restsend_sdk_fn_init_callback_vtable_countablecallback(vtable)
    }
}

/**
 * The ffiConverter which transforms the Callbacks in to handles to pass to Rust.
 *
 * @suppress
 */
public object FfiConverterTypeCountableCallback: FfiConverterCallbackInterface<CountableCallback>()





public interface DownloadCallback {
    
    fun `onProgress`(`progress`: kotlin.ULong, `total`: kotlin.ULong)
    
    fun `onSuccess`(`url`: kotlin.String, `fileName`: kotlin.String)
    
    fun `onFail`(`e`: ClientException)
    
    companion object
}



// Put the implementation in an object so we don't pollute the top-level namespace
internal object uniffiCallbackInterfaceDownloadCallback {
    internal object `onProgress`: UniffiCallbackInterfaceDownloadCallbackMethod0 {
        override fun callback(`uniffiHandle`: Long,`progress`: Long,`total`: Long,`uniffiOutReturn`: Pointer,uniffiCallStatus: UniffiRustCallStatus,) {
            val uniffiObj = FfiConverterTypeDownloadCallback.handleMap.get(uniffiHandle)
            val makeCall = { ->
                uniffiObj.`onProgress`(
                    FfiConverterULong.lift(`progress`),
                    FfiConverterULong.lift(`total`),
                )
            }
            val writeReturn = { _: Unit -> Unit }
            uniffiTraitInterfaceCall(uniffiCallStatus, makeCall, writeReturn)
        }
    }
    internal object `onSuccess`: UniffiCallbackInterfaceDownloadCallbackMethod1 {
        override fun callback(`uniffiHandle`: Long,`url`: RustBuffer.ByValue,`fileName`: RustBuffer.ByValue,`uniffiOutReturn`: Pointer,uniffiCallStatus: UniffiRustCallStatus,) {
            val uniffiObj = FfiConverterTypeDownloadCallback.handleMap.get(uniffiHandle)
            val makeCall = { ->
                uniffiObj.`onSuccess`(
                    FfiConverterString.lift(`url`),
                    FfiConverterString.lift(`fileName`),
                )
            }
            val writeReturn = { _: Unit -> Unit }
            uniffiTraitInterfaceCall(uniffiCallStatus, makeCall, writeReturn)
        }
    }
    internal object `onFail`: UniffiCallbackInterfaceDownloadCallbackMethod2 {
        override fun callback(`uniffiHandle`: Long,`e`: RustBuffer.ByValue,`uniffiOutReturn`: Pointer,uniffiCallStatus: UniffiRustCallStatus,) {
            val uniffiObj = FfiConverterTypeDownloadCallback.handleMap.get(uniffiHandle)
            val makeCall = { ->
                uniffiObj.`onFail`(
                    FfiConverterTypeClientError.lift(`e`),
                )
            }
            val writeReturn = { _: Unit -> Unit }
            uniffiTraitInterfaceCall(uniffiCallStatus, makeCall, writeReturn)
        }
    }

    internal object uniffiFree: UniffiCallbackInterfaceFree {
        override fun callback(handle: Long) {
            FfiConverterTypeDownloadCallback.handleMap.remove(handle)
        }
    }

    internal var vtable = UniffiVTableCallbackInterfaceDownloadCallback.UniffiByValue(
        `onProgress`,
        `onSuccess`,
        `onFail`,
        uniffiFree,
    )

    // Registers the foreign callback with the Rust side.
    // This method is generated for each callback interface.
    internal fun register(lib: UniffiLib) {
        lib.uniffi_restsend_sdk_fn_init_callback_vtable_downloadcallback(vtable)
    }
}

/**
 * The ffiConverter which transforms the Callbacks in to handles to pass to Rust.
 *
 * @suppress
 */
public object FfiConverterTypeDownloadCallback: FfiConverterCallbackInterface<DownloadCallback>()





public interface MessageCallback {
    
    fun `onSent`(`chatId`: kotlin.String)
    
    fun `onProgress`(`progress`: kotlin.ULong, `total`: kotlin.ULong)
    
    fun `onAttachmentUpload`(`result`: Upload): Content?
    
    fun `onAck`(`req`: ChatRequest)
    
    fun `onFail`(`reason`: kotlin.String)
    
    companion object
}



// Put the implementation in an object so we don't pollute the top-level namespace
internal object uniffiCallbackInterfaceMessageCallback {
    internal object `onSent`: UniffiCallbackInterfaceMessageCallbackMethod0 {
        override fun callback(`uniffiHandle`: Long,`chatId`: RustBuffer.ByValue,`uniffiOutReturn`: Pointer,uniffiCallStatus: UniffiRustCallStatus,) {
            val uniffiObj = FfiConverterTypeMessageCallback.handleMap.get(uniffiHandle)
            val makeCall = { ->
                uniffiObj.`onSent`(
                    FfiConverterString.lift(`chatId`),
                )
            }
            val writeReturn = { _: Unit -> Unit }
            uniffiTraitInterfaceCall(uniffiCallStatus, makeCall, writeReturn)
        }
    }
    internal object `onProgress`: UniffiCallbackInterfaceMessageCallbackMethod1 {
        override fun callback(`uniffiHandle`: Long,`progress`: Long,`total`: Long,`uniffiOutReturn`: Pointer,uniffiCallStatus: UniffiRustCallStatus,) {
            val uniffiObj = FfiConverterTypeMessageCallback.handleMap.get(uniffiHandle)
            val makeCall = { ->
                uniffiObj.`onProgress`(
                    FfiConverterULong.lift(`progress`),
                    FfiConverterULong.lift(`total`),
                )
            }
            val writeReturn = { _: Unit -> Unit }
            uniffiTraitInterfaceCall(uniffiCallStatus, makeCall, writeReturn)
        }
    }
    internal object `onAttachmentUpload`: UniffiCallbackInterfaceMessageCallbackMethod2 {
        override fun callback(`uniffiHandle`: Long,`result`: RustBuffer.ByValue,`uniffiOutReturn`: RustBuffer,uniffiCallStatus: UniffiRustCallStatus,) {
            val uniffiObj = FfiConverterTypeMessageCallback.handleMap.get(uniffiHandle)
            val makeCall = { ->
                uniffiObj.`onAttachmentUpload`(
                    FfiConverterTypeUpload.lift(`result`),
                )
            }
            val writeReturn = { value: Content? -> uniffiOutReturn.setValue(FfiConverterOptionalTypeContent.lower(value)) }
            uniffiTraitInterfaceCall(uniffiCallStatus, makeCall, writeReturn)
        }
    }
    internal object `onAck`: UniffiCallbackInterfaceMessageCallbackMethod3 {
        override fun callback(`uniffiHandle`: Long,`req`: RustBuffer.ByValue,`uniffiOutReturn`: Pointer,uniffiCallStatus: UniffiRustCallStatus,) {
            val uniffiObj = FfiConverterTypeMessageCallback.handleMap.get(uniffiHandle)
            val makeCall = { ->
                uniffiObj.`onAck`(
                    FfiConverterTypeChatRequest.lift(`req`),
                )
            }
            val writeReturn = { _: Unit -> Unit }
            uniffiTraitInterfaceCall(uniffiCallStatus, makeCall, writeReturn)
        }
    }
    internal object `onFail`: UniffiCallbackInterfaceMessageCallbackMethod4 {
        override fun callback(`uniffiHandle`: Long,`reason`: RustBuffer.ByValue,`uniffiOutReturn`: Pointer,uniffiCallStatus: UniffiRustCallStatus,) {
            val uniffiObj = FfiConverterTypeMessageCallback.handleMap.get(uniffiHandle)
            val makeCall = { ->
                uniffiObj.`onFail`(
                    FfiConverterString.lift(`reason`),
                )
            }
            val writeReturn = { _: Unit -> Unit }
            uniffiTraitInterfaceCall(uniffiCallStatus, makeCall, writeReturn)
        }
    }

    internal object uniffiFree: UniffiCallbackInterfaceFree {
        override fun callback(handle: Long) {
            FfiConverterTypeMessageCallback.handleMap.remove(handle)
        }
    }

    internal var vtable = UniffiVTableCallbackInterfaceMessageCallback.UniffiByValue(
        `onSent`,
        `onProgress`,
        `onAttachmentUpload`,
        `onAck`,
        `onFail`,
        uniffiFree,
    )

    // Registers the foreign callback with the Rust side.
    // This method is generated for each callback interface.
    internal fun register(lib: UniffiLib) {
        lib.uniffi_restsend_sdk_fn_init_callback_vtable_messagecallback(vtable)
    }
}

/**
 * The ffiConverter which transforms the Callbacks in to handles to pass to Rust.
 *
 * @suppress
 */
public object FfiConverterTypeMessageCallback: FfiConverterCallbackInterface<MessageCallback>()





public interface RsCallback {
    
    fun `onConnected`()
    
    fun `onConnecting`()
    
    fun `onTokenExpired`(`reason`: kotlin.String)
    
    fun `onNetBroken`(`reason`: kotlin.String)
    
    fun `onKickoffByOtherClient`(`reason`: kotlin.String)
    
    fun `onSystemRequest`(`req`: ChatRequest): ChatRequest?
    
    fun `onUnknownRequest`(`req`: ChatRequest): ChatRequest?
    
    fun `onTopicTyping`(`topicId`: kotlin.String, `message`: kotlin.String?)
    
    fun `onNewMessage`(`topicId`: kotlin.String, `message`: ChatRequest): ChatRequestStatus
    
    fun `onTopicRead`(`topicId`: kotlin.String, `message`: ChatRequest)
    
    fun `onConversationsUpdated`(`conversations`: List<Conversation>)
    
    fun `onConversationRemoved`(`conversationId`: kotlin.String)
    
    companion object
}



// Put the implementation in an object so we don't pollute the top-level namespace
internal object uniffiCallbackInterfaceRsCallback {
    internal object `onConnected`: UniffiCallbackInterfaceRsCallbackMethod0 {
        override fun callback(`uniffiHandle`: Long,`uniffiOutReturn`: Pointer,uniffiCallStatus: UniffiRustCallStatus,) {
            val uniffiObj = FfiConverterTypeRsCallback.handleMap.get(uniffiHandle)
            val makeCall = { ->
                uniffiObj.`onConnected`(
                )
            }
            val writeReturn = { _: Unit -> Unit }
            uniffiTraitInterfaceCall(uniffiCallStatus, makeCall, writeReturn)
        }
    }
    internal object `onConnecting`: UniffiCallbackInterfaceRsCallbackMethod1 {
        override fun callback(`uniffiHandle`: Long,`uniffiOutReturn`: Pointer,uniffiCallStatus: UniffiRustCallStatus,) {
            val uniffiObj = FfiConverterTypeRsCallback.handleMap.get(uniffiHandle)
            val makeCall = { ->
                uniffiObj.`onConnecting`(
                )
            }
            val writeReturn = { _: Unit -> Unit }
            uniffiTraitInterfaceCall(uniffiCallStatus, makeCall, writeReturn)
        }
    }
    internal object `onTokenExpired`: UniffiCallbackInterfaceRsCallbackMethod2 {
        override fun callback(`uniffiHandle`: Long,`reason`: RustBuffer.ByValue,`uniffiOutReturn`: Pointer,uniffiCallStatus: UniffiRustCallStatus,) {
            val uniffiObj = FfiConverterTypeRsCallback.handleMap.get(uniffiHandle)
            val makeCall = { ->
                uniffiObj.`onTokenExpired`(
                    FfiConverterString.lift(`reason`),
                )
            }
            val writeReturn = { _: Unit -> Unit }
            uniffiTraitInterfaceCall(uniffiCallStatus, makeCall, writeReturn)
        }
    }
    internal object `onNetBroken`: UniffiCallbackInterfaceRsCallbackMethod3 {
        override fun callback(`uniffiHandle`: Long,`reason`: RustBuffer.ByValue,`uniffiOutReturn`: Pointer,uniffiCallStatus: UniffiRustCallStatus,) {
            val uniffiObj = FfiConverterTypeRsCallback.handleMap.get(uniffiHandle)
            val makeCall = { ->
                uniffiObj.`onNetBroken`(
                    FfiConverterString.lift(`reason`),
                )
            }
            val writeReturn = { _: Unit -> Unit }
            uniffiTraitInterfaceCall(uniffiCallStatus, makeCall, writeReturn)
        }
    }
    internal object `onKickoffByOtherClient`: UniffiCallbackInterfaceRsCallbackMethod4 {
        override fun callback(`uniffiHandle`: Long,`reason`: RustBuffer.ByValue,`uniffiOutReturn`: Pointer,uniffiCallStatus: UniffiRustCallStatus,) {
            val uniffiObj = FfiConverterTypeRsCallback.handleMap.get(uniffiHandle)
            val makeCall = { ->
                uniffiObj.`onKickoffByOtherClient`(
                    FfiConverterString.lift(`reason`),
                )
            }
            val writeReturn = { _: Unit -> Unit }
            uniffiTraitInterfaceCall(uniffiCallStatus, makeCall, writeReturn)
        }
    }
    internal object `onSystemRequest`: UniffiCallbackInterfaceRsCallbackMethod5 {
        override fun callback(`uniffiHandle`: Long,`req`: RustBuffer.ByValue,`uniffiOutReturn`: RustBuffer,uniffiCallStatus: UniffiRustCallStatus,) {
            val uniffiObj = FfiConverterTypeRsCallback.handleMap.get(uniffiHandle)
            val makeCall = { ->
                uniffiObj.`onSystemRequest`(
                    FfiConverterTypeChatRequest.lift(`req`),
                )
            }
            val writeReturn = { value: ChatRequest? -> uniffiOutReturn.setValue(FfiConverterOptionalTypeChatRequest.lower(value)) }
            uniffiTraitInterfaceCall(uniffiCallStatus, makeCall, writeReturn)
        }
    }
    internal object `onUnknownRequest`: UniffiCallbackInterfaceRsCallbackMethod6 {
        override fun callback(`uniffiHandle`: Long,`req`: RustBuffer.ByValue,`uniffiOutReturn`: RustBuffer,uniffiCallStatus: UniffiRustCallStatus,) {
            val uniffiObj = FfiConverterTypeRsCallback.handleMap.get(uniffiHandle)
            val makeCall = { ->
                uniffiObj.`onUnknownRequest`(
                    FfiConverterTypeChatRequest.lift(`req`),
                )
            }
            val writeReturn = { value: ChatRequest? -> uniffiOutReturn.setValue(FfiConverterOptionalTypeChatRequest.lower(value)) }
            uniffiTraitInterfaceCall(uniffiCallStatus, makeCall, writeReturn)
        }
    }
    internal object `onTopicTyping`: UniffiCallbackInterfaceRsCallbackMethod7 {
        override fun callback(`uniffiHandle`: Long,`topicId`: RustBuffer.ByValue,`message`: RustBuffer.ByValue,`uniffiOutReturn`: Pointer,uniffiCallStatus: UniffiRustCallStatus,) {
            val uniffiObj = FfiConverterTypeRsCallback.handleMap.get(uniffiHandle)
            val makeCall = { ->
                uniffiObj.`onTopicTyping`(
                    FfiConverterString.lift(`topicId`),
                    FfiConverterOptionalString.lift(`message`),
                )
            }
            val writeReturn = { _: Unit -> Unit }
            uniffiTraitInterfaceCall(uniffiCallStatus, makeCall, writeReturn)
        }
    }
    internal object `onNewMessage`: UniffiCallbackInterfaceRsCallbackMethod8 {
        override fun callback(`uniffiHandle`: Long,`topicId`: RustBuffer.ByValue,`message`: RustBuffer.ByValue,`uniffiOutReturn`: RustBuffer,uniffiCallStatus: UniffiRustCallStatus,) {
            val uniffiObj = FfiConverterTypeRsCallback.handleMap.get(uniffiHandle)
            val makeCall = { ->
                uniffiObj.`onNewMessage`(
                    FfiConverterString.lift(`topicId`),
                    FfiConverterTypeChatRequest.lift(`message`),
                )
            }
            val writeReturn = { value: ChatRequestStatus -> uniffiOutReturn.setValue(FfiConverterTypeChatRequestStatus.lower(value)) }
            uniffiTraitInterfaceCall(uniffiCallStatus, makeCall, writeReturn)
        }
    }
    internal object `onTopicRead`: UniffiCallbackInterfaceRsCallbackMethod9 {
        override fun callback(`uniffiHandle`: Long,`topicId`: RustBuffer.ByValue,`message`: RustBuffer.ByValue,`uniffiOutReturn`: Pointer,uniffiCallStatus: UniffiRustCallStatus,) {
            val uniffiObj = FfiConverterTypeRsCallback.handleMap.get(uniffiHandle)
            val makeCall = { ->
                uniffiObj.`onTopicRead`(
                    FfiConverterString.lift(`topicId`),
                    FfiConverterTypeChatRequest.lift(`message`),
                )
            }
            val writeReturn = { _: Unit -> Unit }
            uniffiTraitInterfaceCall(uniffiCallStatus, makeCall, writeReturn)
        }
    }
    internal object `onConversationsUpdated`: UniffiCallbackInterfaceRsCallbackMethod10 {
        override fun callback(`uniffiHandle`: Long,`conversations`: RustBuffer.ByValue,`uniffiOutReturn`: Pointer,uniffiCallStatus: UniffiRustCallStatus,) {
            val uniffiObj = FfiConverterTypeRsCallback.handleMap.get(uniffiHandle)
            val makeCall = { ->
                uniffiObj.`onConversationsUpdated`(
                    FfiConverterSequenceTypeConversation.lift(`conversations`),
                )
            }
            val writeReturn = { _: Unit -> Unit }
            uniffiTraitInterfaceCall(uniffiCallStatus, makeCall, writeReturn)
        }
    }
    internal object `onConversationRemoved`: UniffiCallbackInterfaceRsCallbackMethod11 {
        override fun callback(`uniffiHandle`: Long,`conversationId`: RustBuffer.ByValue,`uniffiOutReturn`: Pointer,uniffiCallStatus: UniffiRustCallStatus,) {
            val uniffiObj = FfiConverterTypeRsCallback.handleMap.get(uniffiHandle)
            val makeCall = { ->
                uniffiObj.`onConversationRemoved`(
                    FfiConverterString.lift(`conversationId`),
                )
            }
            val writeReturn = { _: Unit -> Unit }
            uniffiTraitInterfaceCall(uniffiCallStatus, makeCall, writeReturn)
        }
    }

    internal object uniffiFree: UniffiCallbackInterfaceFree {
        override fun callback(handle: Long) {
            FfiConverterTypeRsCallback.handleMap.remove(handle)
        }
    }

    internal var vtable = UniffiVTableCallbackInterfaceRsCallback.UniffiByValue(
        `onConnected`,
        `onConnecting`,
        `onTokenExpired`,
        `onNetBroken`,
        `onKickoffByOtherClient`,
        `onSystemRequest`,
        `onUnknownRequest`,
        `onTopicTyping`,
        `onNewMessage`,
        `onTopicRead`,
        `onConversationsUpdated`,
        `onConversationRemoved`,
        uniffiFree,
    )

    // Registers the foreign callback with the Rust side.
    // This method is generated for each callback interface.
    internal fun register(lib: UniffiLib) {
        lib.uniffi_restsend_sdk_fn_init_callback_vtable_rscallback(vtable)
    }
}

/**
 * The ffiConverter which transforms the Callbacks in to handles to pass to Rust.
 *
 * @suppress
 */
public object FfiConverterTypeRsCallback: FfiConverterCallbackInterface<RsCallback>()





public interface SyncChatLogsCallback {
    
    fun `onSuccess`(`r`: GetChatLogsResult)
    
    fun `onFail`(`e`: ClientException)
    
    companion object
}



// Put the implementation in an object so we don't pollute the top-level namespace
internal object uniffiCallbackInterfaceSyncChatLogsCallback {
    internal object `onSuccess`: UniffiCallbackInterfaceSyncChatLogsCallbackMethod0 {
        override fun callback(`uniffiHandle`: Long,`r`: RustBuffer.ByValue,`uniffiOutReturn`: Pointer,uniffiCallStatus: UniffiRustCallStatus,) {
            val uniffiObj = FfiConverterTypeSyncChatLogsCallback.handleMap.get(uniffiHandle)
            val makeCall = { ->
                uniffiObj.`onSuccess`(
                    FfiConverterTypeGetChatLogsResult.lift(`r`),
                )
            }
            val writeReturn = { _: Unit -> Unit }
            uniffiTraitInterfaceCall(uniffiCallStatus, makeCall, writeReturn)
        }
    }
    internal object `onFail`: UniffiCallbackInterfaceSyncChatLogsCallbackMethod1 {
        override fun callback(`uniffiHandle`: Long,`e`: RustBuffer.ByValue,`uniffiOutReturn`: Pointer,uniffiCallStatus: UniffiRustCallStatus,) {
            val uniffiObj = FfiConverterTypeSyncChatLogsCallback.handleMap.get(uniffiHandle)
            val makeCall = { ->
                uniffiObj.`onFail`(
                    FfiConverterTypeClientError.lift(`e`),
                )
            }
            val writeReturn = { _: Unit -> Unit }
            uniffiTraitInterfaceCall(uniffiCallStatus, makeCall, writeReturn)
        }
    }

    internal object uniffiFree: UniffiCallbackInterfaceFree {
        override fun callback(handle: Long) {
            FfiConverterTypeSyncChatLogsCallback.handleMap.remove(handle)
        }
    }

    internal var vtable = UniffiVTableCallbackInterfaceSyncChatLogsCallback.UniffiByValue(
        `onSuccess`,
        `onFail`,
        uniffiFree,
    )

    // Registers the foreign callback with the Rust side.
    // This method is generated for each callback interface.
    internal fun register(lib: UniffiLib) {
        lib.uniffi_restsend_sdk_fn_init_callback_vtable_syncchatlogscallback(vtable)
    }
}

/**
 * The ffiConverter which transforms the Callbacks in to handles to pass to Rust.
 *
 * @suppress
 */
public object FfiConverterTypeSyncChatLogsCallback: FfiConverterCallbackInterface<SyncChatLogsCallback>()





public interface SyncConversationsCallback {
    
    fun `onSuccess`(`updatedAt`: kotlin.String, `lastRemovedAt`: kotlin.String?, `count`: kotlin.UInt)
    
    fun `onFail`(`e`: ClientException)
    
    companion object
}



// Put the implementation in an object so we don't pollute the top-level namespace
internal object uniffiCallbackInterfaceSyncConversationsCallback {
    internal object `onSuccess`: UniffiCallbackInterfaceSyncConversationsCallbackMethod0 {
        override fun callback(`uniffiHandle`: Long,`updatedAt`: RustBuffer.ByValue,`lastRemovedAt`: RustBuffer.ByValue,`count`: Int,`uniffiOutReturn`: Pointer,uniffiCallStatus: UniffiRustCallStatus,) {
            val uniffiObj = FfiConverterTypeSyncConversationsCallback.handleMap.get(uniffiHandle)
            val makeCall = { ->
                uniffiObj.`onSuccess`(
                    FfiConverterString.lift(`updatedAt`),
                    FfiConverterOptionalString.lift(`lastRemovedAt`),
                    FfiConverterUInt.lift(`count`),
                )
            }
            val writeReturn = { _: Unit -> Unit }
            uniffiTraitInterfaceCall(uniffiCallStatus, makeCall, writeReturn)
        }
    }
    internal object `onFail`: UniffiCallbackInterfaceSyncConversationsCallbackMethod1 {
        override fun callback(`uniffiHandle`: Long,`e`: RustBuffer.ByValue,`uniffiOutReturn`: Pointer,uniffiCallStatus: UniffiRustCallStatus,) {
            val uniffiObj = FfiConverterTypeSyncConversationsCallback.handleMap.get(uniffiHandle)
            val makeCall = { ->
                uniffiObj.`onFail`(
                    FfiConverterTypeClientError.lift(`e`),
                )
            }
            val writeReturn = { _: Unit -> Unit }
            uniffiTraitInterfaceCall(uniffiCallStatus, makeCall, writeReturn)
        }
    }

    internal object uniffiFree: UniffiCallbackInterfaceFree {
        override fun callback(handle: Long) {
            FfiConverterTypeSyncConversationsCallback.handleMap.remove(handle)
        }
    }

    internal var vtable = UniffiVTableCallbackInterfaceSyncConversationsCallback.UniffiByValue(
        `onSuccess`,
        `onFail`,
        uniffiFree,
    )

    // Registers the foreign callback with the Rust side.
    // This method is generated for each callback interface.
    internal fun register(lib: UniffiLib) {
        lib.uniffi_restsend_sdk_fn_init_callback_vtable_syncconversationscallback(vtable)
    }
}

/**
 * The ffiConverter which transforms the Callbacks in to handles to pass to Rust.
 *
 * @suppress
 */
public object FfiConverterTypeSyncConversationsCallback: FfiConverterCallbackInterface<SyncConversationsCallback>()





public interface UploadCallback {
    
    fun `onProgress`(`progress`: kotlin.ULong, `total`: kotlin.ULong)
    
    fun `onSuccess`(`result`: Upload)
    
    fun `onFail`(`e`: ClientException)
    
    companion object
}



// Put the implementation in an object so we don't pollute the top-level namespace
internal object uniffiCallbackInterfaceUploadCallback {
    internal object `onProgress`: UniffiCallbackInterfaceUploadCallbackMethod0 {
        override fun callback(`uniffiHandle`: Long,`progress`: Long,`total`: Long,`uniffiOutReturn`: Pointer,uniffiCallStatus: UniffiRustCallStatus,) {
            val uniffiObj = FfiConverterTypeUploadCallback.handleMap.get(uniffiHandle)
            val makeCall = { ->
                uniffiObj.`onProgress`(
                    FfiConverterULong.lift(`progress`),
                    FfiConverterULong.lift(`total`),
                )
            }
            val writeReturn = { _: Unit -> Unit }
            uniffiTraitInterfaceCall(uniffiCallStatus, makeCall, writeReturn)
        }
    }
    internal object `onSuccess`: UniffiCallbackInterfaceUploadCallbackMethod1 {
        override fun callback(`uniffiHandle`: Long,`result`: RustBuffer.ByValue,`uniffiOutReturn`: Pointer,uniffiCallStatus: UniffiRustCallStatus,) {
            val uniffiObj = FfiConverterTypeUploadCallback.handleMap.get(uniffiHandle)
            val makeCall = { ->
                uniffiObj.`onSuccess`(
                    FfiConverterTypeUpload.lift(`result`),
                )
            }
            val writeReturn = { _: Unit -> Unit }
            uniffiTraitInterfaceCall(uniffiCallStatus, makeCall, writeReturn)
        }
    }
    internal object `onFail`: UniffiCallbackInterfaceUploadCallbackMethod2 {
        override fun callback(`uniffiHandle`: Long,`e`: RustBuffer.ByValue,`uniffiOutReturn`: Pointer,uniffiCallStatus: UniffiRustCallStatus,) {
            val uniffiObj = FfiConverterTypeUploadCallback.handleMap.get(uniffiHandle)
            val makeCall = { ->
                uniffiObj.`onFail`(
                    FfiConverterTypeClientError.lift(`e`),
                )
            }
            val writeReturn = { _: Unit -> Unit }
            uniffiTraitInterfaceCall(uniffiCallStatus, makeCall, writeReturn)
        }
    }

    internal object uniffiFree: UniffiCallbackInterfaceFree {
        override fun callback(handle: Long) {
            FfiConverterTypeUploadCallback.handleMap.remove(handle)
        }
    }

    internal var vtable = UniffiVTableCallbackInterfaceUploadCallback.UniffiByValue(
        `onProgress`,
        `onSuccess`,
        `onFail`,
        uniffiFree,
    )

    // Registers the foreign callback with the Rust side.
    // This method is generated for each callback interface.
    internal fun register(lib: UniffiLib) {
        lib.uniffi_restsend_sdk_fn_init_callback_vtable_uploadcallback(vtable)
    }
}

/**
 * The ffiConverter which transforms the Callbacks in to handles to pass to Rust.
 *
 * @suppress
 */
public object FfiConverterTypeUploadCallback: FfiConverterCallbackInterface<UploadCallback>()




/**
 * @suppress
 */
public object FfiConverterOptionalUInt: FfiConverterRustBuffer<kotlin.UInt?> {
    override fun read(buf: ByteBuffer): kotlin.UInt? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterUInt.read(buf)
    }

    override fun allocationSize(value: kotlin.UInt?): ULong {
        if (value == null) {
            return 1UL
        } else {
            return 1UL + FfiConverterUInt.allocationSize(value)
        }
    }

    override fun write(value: kotlin.UInt?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterUInt.write(value, buf)
        }
    }
}




/**
 * @suppress
 */
public object FfiConverterOptionalLong: FfiConverterRustBuffer<kotlin.Long?> {
    override fun read(buf: ByteBuffer): kotlin.Long? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterLong.read(buf)
    }

    override fun allocationSize(value: kotlin.Long?): ULong {
        if (value == null) {
            return 1UL
        } else {
            return 1UL + FfiConverterLong.allocationSize(value)
        }
    }

    override fun write(value: kotlin.Long?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterLong.write(value, buf)
        }
    }
}




/**
 * @suppress
 */
public object FfiConverterOptionalBoolean: FfiConverterRustBuffer<kotlin.Boolean?> {
    override fun read(buf: ByteBuffer): kotlin.Boolean? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterBoolean.read(buf)
    }

    override fun allocationSize(value: kotlin.Boolean?): ULong {
        if (value == null) {
            return 1UL
        } else {
            return 1UL + FfiConverterBoolean.allocationSize(value)
        }
    }

    override fun write(value: kotlin.Boolean?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterBoolean.write(value, buf)
        }
    }
}




/**
 * @suppress
 */
public object FfiConverterOptionalString: FfiConverterRustBuffer<kotlin.String?> {
    override fun read(buf: ByteBuffer): kotlin.String? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterString.read(buf)
    }

    override fun allocationSize(value: kotlin.String?): ULong {
        if (value == null) {
            return 1UL
        } else {
            return 1UL + FfiConverterString.allocationSize(value)
        }
    }

    override fun write(value: kotlin.String?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterString.write(value, buf)
        }
    }
}




/**
 * @suppress
 */
public object FfiConverterOptionalTypeAttachment: FfiConverterRustBuffer<Attachment?> {
    override fun read(buf: ByteBuffer): Attachment? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterTypeAttachment.read(buf)
    }

    override fun allocationSize(value: Attachment?): ULong {
        if (value == null) {
            return 1UL
        } else {
            return 1UL + FfiConverterTypeAttachment.allocationSize(value)
        }
    }

    override fun write(value: Attachment?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterTypeAttachment.write(value, buf)
        }
    }
}




/**
 * @suppress
 */
public object FfiConverterOptionalTypeAuthInfo: FfiConverterRustBuffer<AuthInfo?> {
    override fun read(buf: ByteBuffer): AuthInfo? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterTypeAuthInfo.read(buf)
    }

    override fun allocationSize(value: AuthInfo?): ULong {
        if (value == null) {
            return 1UL
        } else {
            return 1UL + FfiConverterTypeAuthInfo.allocationSize(value)
        }
    }

    override fun write(value: AuthInfo?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterTypeAuthInfo.write(value, buf)
        }
    }
}




/**
 * @suppress
 */
public object FfiConverterOptionalTypeChatLog: FfiConverterRustBuffer<ChatLog?> {
    override fun read(buf: ByteBuffer): ChatLog? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterTypeChatLog.read(buf)
    }

    override fun allocationSize(value: ChatLog?): ULong {
        if (value == null) {
            return 1UL
        } else {
            return 1UL + FfiConverterTypeChatLog.allocationSize(value)
        }
    }

    override fun write(value: ChatLog?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterTypeChatLog.write(value, buf)
        }
    }
}




/**
 * @suppress
 */
public object FfiConverterOptionalTypeChatRequest: FfiConverterRustBuffer<ChatRequest?> {
    override fun read(buf: ByteBuffer): ChatRequest? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterTypeChatRequest.read(buf)
    }

    override fun allocationSize(value: ChatRequest?): ULong {
        if (value == null) {
            return 1UL
        } else {
            return 1UL + FfiConverterTypeChatRequest.allocationSize(value)
        }
    }

    override fun write(value: ChatRequest?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterTypeChatRequest.write(value, buf)
        }
    }
}




/**
 * @suppress
 */
public object FfiConverterOptionalTypeContent: FfiConverterRustBuffer<Content?> {
    override fun read(buf: ByteBuffer): Content? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterTypeContent.read(buf)
    }

    override fun allocationSize(value: Content?): ULong {
        if (value == null) {
            return 1UL
        } else {
            return 1UL + FfiConverterTypeContent.allocationSize(value)
        }
    }

    override fun write(value: Content?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterTypeContent.write(value, buf)
        }
    }
}




/**
 * @suppress
 */
public object FfiConverterOptionalTypeConversation: FfiConverterRustBuffer<Conversation?> {
    override fun read(buf: ByteBuffer): Conversation? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterTypeConversation.read(buf)
    }

    override fun allocationSize(value: Conversation?): ULong {
        if (value == null) {
            return 1UL
        } else {
            return 1UL + FfiConverterTypeConversation.allocationSize(value)
        }
    }

    override fun write(value: Conversation?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterTypeConversation.write(value, buf)
        }
    }
}




/**
 * @suppress
 */
public object FfiConverterOptionalTypeGetChatLogsResult: FfiConverterRustBuffer<GetChatLogsResult?> {
    override fun read(buf: ByteBuffer): GetChatLogsResult? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterTypeGetChatLogsResult.read(buf)
    }

    override fun allocationSize(value: GetChatLogsResult?): ULong {
        if (value == null) {
            return 1UL
        } else {
            return 1UL + FfiConverterTypeGetChatLogsResult.allocationSize(value)
        }
    }

    override fun write(value: GetChatLogsResult?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterTypeGetChatLogsResult.write(value, buf)
        }
    }
}




/**
 * @suppress
 */
public object FfiConverterOptionalTypeTopicNotice: FfiConverterRustBuffer<TopicNotice?> {
    override fun read(buf: ByteBuffer): TopicNotice? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterTypeTopicNotice.read(buf)
    }

    override fun allocationSize(value: TopicNotice?): ULong {
        if (value == null) {
            return 1UL
        } else {
            return 1UL + FfiConverterTypeTopicNotice.allocationSize(value)
        }
    }

    override fun write(value: TopicNotice?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterTypeTopicNotice.write(value, buf)
        }
    }
}




/**
 * @suppress
 */
public object FfiConverterOptionalTypeUser: FfiConverterRustBuffer<User?> {
    override fun read(buf: ByteBuffer): User? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterTypeUser.read(buf)
    }

    override fun allocationSize(value: User?): ULong {
        if (value == null) {
            return 1UL
        } else {
            return 1UL + FfiConverterTypeUser.allocationSize(value)
        }
    }

    override fun write(value: User?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterTypeUser.write(value, buf)
        }
    }
}




/**
 * @suppress
 */
public object FfiConverterOptionalTypeCountableCallback: FfiConverterRustBuffer<CountableCallback?> {
    override fun read(buf: ByteBuffer): CountableCallback? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterTypeCountableCallback.read(buf)
    }

    override fun allocationSize(value: CountableCallback?): ULong {
        if (value == null) {
            return 1UL
        } else {
            return 1UL + FfiConverterTypeCountableCallback.allocationSize(value)
        }
    }

    override fun write(value: CountableCallback?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterTypeCountableCallback.write(value, buf)
        }
    }
}




/**
 * @suppress
 */
public object FfiConverterOptionalTypeMessageCallback: FfiConverterRustBuffer<MessageCallback?> {
    override fun read(buf: ByteBuffer): MessageCallback? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterTypeMessageCallback.read(buf)
    }

    override fun allocationSize(value: MessageCallback?): ULong {
        if (value == null) {
            return 1UL
        } else {
            return 1UL + FfiConverterTypeMessageCallback.allocationSize(value)
        }
    }

    override fun write(value: MessageCallback?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterTypeMessageCallback.write(value, buf)
        }
    }
}




/**
 * @suppress
 */
public object FfiConverterOptionalTypeRsCallback: FfiConverterRustBuffer<RsCallback?> {
    override fun read(buf: ByteBuffer): RsCallback? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterTypeRsCallback.read(buf)
    }

    override fun allocationSize(value: RsCallback?): ULong {
        if (value == null) {
            return 1UL
        } else {
            return 1UL + FfiConverterTypeRsCallback.allocationSize(value)
        }
    }

    override fun write(value: RsCallback?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterTypeRsCallback.write(value, buf)
        }
    }
}




/**
 * @suppress
 */
public object FfiConverterOptionalSequenceString: FfiConverterRustBuffer<List<kotlin.String>?> {
    override fun read(buf: ByteBuffer): List<kotlin.String>? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterSequenceString.read(buf)
    }

    override fun allocationSize(value: List<kotlin.String>?): ULong {
        if (value == null) {
            return 1UL
        } else {
            return 1UL + FfiConverterSequenceString.allocationSize(value)
        }
    }

    override fun write(value: List<kotlin.String>?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterSequenceString.write(value, buf)
        }
    }
}




/**
 * @suppress
 */
public object FfiConverterOptionalSequenceTypeTag: FfiConverterRustBuffer<List<Tag>?> {
    override fun read(buf: ByteBuffer): List<Tag>? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterSequenceTypeTag.read(buf)
    }

    override fun allocationSize(value: List<Tag>?): ULong {
        if (value == null) {
            return 1UL
        } else {
            return 1UL + FfiConverterSequenceTypeTag.allocationSize(value)
        }
    }

    override fun write(value: List<Tag>?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterSequenceTypeTag.write(value, buf)
        }
    }
}




/**
 * @suppress
 */
public object FfiConverterOptionalSequenceTypeTopicKnock: FfiConverterRustBuffer<List<TopicKnock>?> {
    override fun read(buf: ByteBuffer): List<TopicKnock>? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterSequenceTypeTopicKnock.read(buf)
    }

    override fun allocationSize(value: List<TopicKnock>?): ULong {
        if (value == null) {
            return 1UL
        } else {
            return 1UL + FfiConverterSequenceTypeTopicKnock.allocationSize(value)
        }
    }

    override fun write(value: List<TopicKnock>?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterSequenceTypeTopicKnock.write(value, buf)
        }
    }
}




/**
 * @suppress
 */
public object FfiConverterOptionalSequenceTypeUser: FfiConverterRustBuffer<List<User>?> {
    override fun read(buf: ByteBuffer): List<User>? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterSequenceTypeUser.read(buf)
    }

    override fun allocationSize(value: List<User>?): ULong {
        if (value == null) {
            return 1UL
        } else {
            return 1UL + FfiConverterSequenceTypeUser.allocationSize(value)
        }
    }

    override fun write(value: List<User>?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterSequenceTypeUser.write(value, buf)
        }
    }
}




/**
 * @suppress
 */
public object FfiConverterOptionalMapStringString: FfiConverterRustBuffer<Map<kotlin.String, kotlin.String>?> {
    override fun read(buf: ByteBuffer): Map<kotlin.String, kotlin.String>? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterMapStringString.read(buf)
    }

    override fun allocationSize(value: Map<kotlin.String, kotlin.String>?): ULong {
        if (value == null) {
            return 1UL
        } else {
            return 1UL + FfiConverterMapStringString.allocationSize(value)
        }
    }

    override fun write(value: Map<kotlin.String, kotlin.String>?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterMapStringString.write(value, buf)
        }
    }
}




/**
 * @suppress
 */
public object FfiConverterSequenceString: FfiConverterRustBuffer<List<kotlin.String>> {
    override fun read(buf: ByteBuffer): List<kotlin.String> {
        val len = buf.getInt()
        return List<kotlin.String>(len) {
            FfiConverterString.read(buf)
        }
    }

    override fun allocationSize(value: List<kotlin.String>): ULong {
        val sizeForLength = 4UL
        val sizeForItems = value.map { FfiConverterString.allocationSize(it) }.sum()
        return sizeForLength + sizeForItems
    }

    override fun write(value: List<kotlin.String>, buf: ByteBuffer) {
        buf.putInt(value.size)
        value.iterator().forEach {
            FfiConverterString.write(it, buf)
        }
    }
}




/**
 * @suppress
 */
public object FfiConverterSequenceTypeChatLog: FfiConverterRustBuffer<List<ChatLog>> {
    override fun read(buf: ByteBuffer): List<ChatLog> {
        val len = buf.getInt()
        return List<ChatLog>(len) {
            FfiConverterTypeChatLog.read(buf)
        }
    }

    override fun allocationSize(value: List<ChatLog>): ULong {
        val sizeForLength = 4UL
        val sizeForItems = value.map { FfiConverterTypeChatLog.allocationSize(it) }.sum()
        return sizeForLength + sizeForItems
    }

    override fun write(value: List<ChatLog>, buf: ByteBuffer) {
        buf.putInt(value.size)
        value.iterator().forEach {
            FfiConverterTypeChatLog.write(it, buf)
        }
    }
}




/**
 * @suppress
 */
public object FfiConverterSequenceTypeConversation: FfiConverterRustBuffer<List<Conversation>> {
    override fun read(buf: ByteBuffer): List<Conversation> {
        val len = buf.getInt()
        return List<Conversation>(len) {
            FfiConverterTypeConversation.read(buf)
        }
    }

    override fun allocationSize(value: List<Conversation>): ULong {
        val sizeForLength = 4UL
        val sizeForItems = value.map { FfiConverterTypeConversation.allocationSize(it) }.sum()
        return sizeForLength + sizeForItems
    }

    override fun write(value: List<Conversation>, buf: ByteBuffer) {
        buf.putInt(value.size)
        value.iterator().forEach {
            FfiConverterTypeConversation.write(it, buf)
        }
    }
}




/**
 * @suppress
 */
public object FfiConverterSequenceTypeTag: FfiConverterRustBuffer<List<Tag>> {
    override fun read(buf: ByteBuffer): List<Tag> {
        val len = buf.getInt()
        return List<Tag>(len) {
            FfiConverterTypeTag.read(buf)
        }
    }

    override fun allocationSize(value: List<Tag>): ULong {
        val sizeForLength = 4UL
        val sizeForItems = value.map { FfiConverterTypeTag.allocationSize(it) }.sum()
        return sizeForLength + sizeForItems
    }

    override fun write(value: List<Tag>, buf: ByteBuffer) {
        buf.putInt(value.size)
        value.iterator().forEach {
            FfiConverterTypeTag.write(it, buf)
        }
    }
}




/**
 * @suppress
 */
public object FfiConverterSequenceTypeTopicKnock: FfiConverterRustBuffer<List<TopicKnock>> {
    override fun read(buf: ByteBuffer): List<TopicKnock> {
        val len = buf.getInt()
        return List<TopicKnock>(len) {
            FfiConverterTypeTopicKnock.read(buf)
        }
    }

    override fun allocationSize(value: List<TopicKnock>): ULong {
        val sizeForLength = 4UL
        val sizeForItems = value.map { FfiConverterTypeTopicKnock.allocationSize(it) }.sum()
        return sizeForLength + sizeForItems
    }

    override fun write(value: List<TopicKnock>, buf: ByteBuffer) {
        buf.putInt(value.size)
        value.iterator().forEach {
            FfiConverterTypeTopicKnock.write(it, buf)
        }
    }
}




/**
 * @suppress
 */
public object FfiConverterSequenceTypeUser: FfiConverterRustBuffer<List<User>> {
    override fun read(buf: ByteBuffer): List<User> {
        val len = buf.getInt()
        return List<User>(len) {
            FfiConverterTypeUser.read(buf)
        }
    }

    override fun allocationSize(value: List<User>): ULong {
        val sizeForLength = 4UL
        val sizeForItems = value.map { FfiConverterTypeUser.allocationSize(it) }.sum()
        return sizeForLength + sizeForItems
    }

    override fun write(value: List<User>, buf: ByteBuffer) {
        buf.putInt(value.size)
        value.iterator().forEach {
            FfiConverterTypeUser.write(it, buf)
        }
    }
}




/**
 * @suppress
 */
public object FfiConverterMapStringString: FfiConverterRustBuffer<Map<kotlin.String, kotlin.String>> {
    override fun read(buf: ByteBuffer): Map<kotlin.String, kotlin.String> {
        val len = buf.getInt()
        return buildMap<kotlin.String, kotlin.String>(len) {
            repeat(len) {
                val k = FfiConverterString.read(buf)
                val v = FfiConverterString.read(buf)
                this[k] = v
            }
        }
    }

    override fun allocationSize(value: Map<kotlin.String, kotlin.String>): ULong {
        val spaceForMapSize = 4UL
        val spaceForChildren = value.map { (k, v) ->
            FfiConverterString.allocationSize(k) +
            FfiConverterString.allocationSize(v)
        }.sum()
        return spaceForMapSize + spaceForChildren
    }

    override fun write(value: Map<kotlin.String, kotlin.String>, buf: ByteBuffer) {
        buf.putInt(value.size)
        // The parens on `(k, v)` here ensure we're calling the right method,
        // which is important for compatibility with older android devices.
        // Ref https://blog.danlew.net/2017/03/16/kotlin-puzzler-whose-line-is-it-anyways/
        value.forEach { (k, v) ->
            FfiConverterString.write(k, buf)
            FfiConverterString.write(v, buf)
        }
    }
}




/**
 * @suppress
 */
public object FfiConverterMapStringTypeConversation: FfiConverterRustBuffer<Map<kotlin.String, Conversation>> {
    override fun read(buf: ByteBuffer): Map<kotlin.String, Conversation> {
        val len = buf.getInt()
        return buildMap<kotlin.String, Conversation>(len) {
            repeat(len) {
                val k = FfiConverterString.read(buf)
                val v = FfiConverterTypeConversation.read(buf)
                this[k] = v
            }
        }
    }

    override fun allocationSize(value: Map<kotlin.String, Conversation>): ULong {
        val spaceForMapSize = 4UL
        val spaceForChildren = value.map { (k, v) ->
            FfiConverterString.allocationSize(k) +
            FfiConverterTypeConversation.allocationSize(v)
        }.sum()
        return spaceForMapSize + spaceForChildren
    }

    override fun write(value: Map<kotlin.String, Conversation>, buf: ByteBuffer) {
        buf.putInt(value.size)
        // The parens on `(k, v)` here ensure we're calling the right method,
        // which is important for compatibility with older android devices.
        // Ref https://blog.danlew.net/2017/03/16/kotlin-puzzler-whose-line-is-it-anyways/
        value.forEach { (k, v) ->
            FfiConverterString.write(k, buf)
            FfiConverterTypeConversation.write(v, buf)
        }
    }
}







 fun `getCurrentUser`(`root`: kotlin.String): AuthInfo? {
            return FfiConverterOptionalTypeAuthInfo.lift(
    uniffiRustCall() { _status ->
    UniffiLib.INSTANCE.uniffi_restsend_sdk_fn_func_get_current_user(
        FfiConverterString.lower(`root`),_status)
}
    )
    }
    

    @Throws(ClientException::class)
    @Suppress("ASSIGNED_BUT_NEVER_ACCESSED_VARIABLE")
     suspend fun `guestLogin`(`endpoint`: kotlin.String, `guestId`: kotlin.String, `extra`: Map<kotlin.String, kotlin.String>?) : AuthInfo {
        return uniffiRustCallAsync(
        UniffiLib.INSTANCE.uniffi_restsend_sdk_fn_func_guest_login(FfiConverterString.lower(`endpoint`),FfiConverterString.lower(`guestId`),FfiConverterOptionalMapStringString.lower(`extra`),),
        { future, callback, continuation -> UniffiLib.INSTANCE.ffi_restsend_sdk_rust_future_poll_rust_buffer(future, callback, continuation) },
        { future, continuation -> UniffiLib.INSTANCE.ffi_restsend_sdk_rust_future_complete_rust_buffer(future, continuation) },
        { future -> UniffiLib.INSTANCE.ffi_restsend_sdk_rust_future_free_rust_buffer(future) },
        // lift function
        { FfiConverterTypeAuthInfo.lift(it) },
        // Error FFI converter
        ClientException.ErrorHandler,
    )
    }
 fun `initLog`(`level`: kotlin.String, `isTest`: kotlin.Boolean)
        = 
    uniffiRustCall() { _status ->
    UniffiLib.INSTANCE.uniffi_restsend_sdk_fn_func_init_log(
        FfiConverterString.lower(`level`),FfiConverterBoolean.lower(`isTest`),_status)
}
    
    

    @Throws(ClientException::class)
    @Suppress("ASSIGNED_BUT_NEVER_ACCESSED_VARIABLE")
     suspend fun `loginWithPassword`(`endpoint`: kotlin.String, `email`: kotlin.String, `password`: kotlin.String) : AuthInfo {
        return uniffiRustCallAsync(
        UniffiLib.INSTANCE.uniffi_restsend_sdk_fn_func_login_with_password(FfiConverterString.lower(`endpoint`),FfiConverterString.lower(`email`),FfiConverterString.lower(`password`),),
        { future, callback, continuation -> UniffiLib.INSTANCE.ffi_restsend_sdk_rust_future_poll_rust_buffer(future, callback, continuation) },
        { future, continuation -> UniffiLib.INSTANCE.ffi_restsend_sdk_rust_future_complete_rust_buffer(future, continuation) },
        { future -> UniffiLib.INSTANCE.ffi_restsend_sdk_rust_future_free_rust_buffer(future) },
        // lift function
        { FfiConverterTypeAuthInfo.lift(it) },
        // Error FFI converter
        ClientException.ErrorHandler,
    )
    }

    @Throws(ClientException::class)
    @Suppress("ASSIGNED_BUT_NEVER_ACCESSED_VARIABLE")
     suspend fun `loginWithToken`(`endpoint`: kotlin.String, `email`: kotlin.String, `token`: kotlin.String) : AuthInfo {
        return uniffiRustCallAsync(
        UniffiLib.INSTANCE.uniffi_restsend_sdk_fn_func_login_with_token(FfiConverterString.lower(`endpoint`),FfiConverterString.lower(`email`),FfiConverterString.lower(`token`),),
        { future, callback, continuation -> UniffiLib.INSTANCE.ffi_restsend_sdk_rust_future_poll_rust_buffer(future, callback, continuation) },
        { future, continuation -> UniffiLib.INSTANCE.ffi_restsend_sdk_rust_future_complete_rust_buffer(future, continuation) },
        { future -> UniffiLib.INSTANCE.ffi_restsend_sdk_rust_future_free_rust_buffer(future) },
        // lift function
        { FfiConverterTypeAuthInfo.lift(it) },
        // Error FFI converter
        ClientException.ErrorHandler,
    )
    }

    @Throws(ClientException::class)
    @Suppress("ASSIGNED_BUT_NEVER_ACCESSED_VARIABLE")
     suspend fun `logout`(`endpoint`: kotlin.String, `token`: kotlin.String) {
        return uniffiRustCallAsync(
        UniffiLib.INSTANCE.uniffi_restsend_sdk_fn_func_logout(FfiConverterString.lower(`endpoint`),FfiConverterString.lower(`token`),),
        { future, callback, continuation -> UniffiLib.INSTANCE.ffi_restsend_sdk_rust_future_poll_void(future, callback, continuation) },
        { future, continuation -> UniffiLib.INSTANCE.ffi_restsend_sdk_rust_future_complete_void(future, continuation) },
        { future -> UniffiLib.INSTANCE.ffi_restsend_sdk_rust_future_free_void(future) },
        // lift function
        { Unit },
        
        // Error FFI converter
        ClientException.ErrorHandler,
    )
    }

    @Throws(ClientException::class) fun `setCurrentUser`(`root`: kotlin.String, `userId`: kotlin.String)
        = 
    uniffiRustCallWithError(ClientException) { _status ->
    UniffiLib.INSTANCE.uniffi_restsend_sdk_fn_func_set_current_user(
        FfiConverterString.lower(`root`),FfiConverterString.lower(`userId`),_status)
}
    
    

    @Throws(ClientException::class)
    @Suppress("ASSIGNED_BUT_NEVER_ACCESSED_VARIABLE")
     suspend fun `signup`(`endpoint`: kotlin.String, `email`: kotlin.String, `password`: kotlin.String) : AuthInfo {
        return uniffiRustCallAsync(
        UniffiLib.INSTANCE.uniffi_restsend_sdk_fn_func_signup(FfiConverterString.lower(`endpoint`),FfiConverterString.lower(`email`),FfiConverterString.lower(`password`),),
        { future, callback, continuation -> UniffiLib.INSTANCE.ffi_restsend_sdk_rust_future_poll_rust_buffer(future, callback, continuation) },
        { future, continuation -> UniffiLib.INSTANCE.ffi_restsend_sdk_rust_future_complete_rust_buffer(future, continuation) },
        { future -> UniffiLib.INSTANCE.ffi_restsend_sdk_rust_future_free_rust_buffer(future) },
        // lift function
        { FfiConverterTypeAuthInfo.lift(it) },
        // Error FFI converter
        ClientException.ErrorHandler,
    )
    }


