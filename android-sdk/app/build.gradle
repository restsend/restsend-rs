plugins {
    id 'com.android.library'
    //alias(libs.plugins.android.application)
    alias(libs.plugins.kotlin.android)
}

android {
    namespace 'uniffi.restsend_sdk'
    compileSdk 35

    defaultConfig {
        minSdk 21
        targetSdk 35
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_11
        targetCompatibility JavaVersion.VERSION_11
    }
    kotlinOptions {
        jvmTarget = '11'
    }
}

dependencies {
    api 'net.java.dev.jna:jna:5.16.0@aar'
    implementation libs.androidx.core.ktx
    implementation libs.androidx.appcompat
    implementation libs.material
    testImplementation libs.junit
    androidTestImplementation libs.androidx.junit
    androidTestImplementation libs.androidx.espresso.core   
}



task getCargoVersion {
    doLast {
        def cargoToml = file('../../crates/restsend/Cargo.toml')
        def cargoContent = cargoToml.text
        def versionMatcher = cargoContent =~ /version\s*=\s*"(.*)"/
        if (versionMatcher) {
            def version = versionMatcher[0][1]
            println "Cargo.toml version: $version"
            project.ext.cargoVersion = version
        } else {
            throw "Version not found in Cargo.toml"
        }
    }
}

task scpAar {
    dependsOn getCargoVersion
    dependsOn tasks.named('assemble')
    doLast {
        def aarFile = file("build/outputs/aar/app-release.aar")
        if (!aarFile.exists()) {
            throw "AAR file not found: ${aarFile}"
        }
        def version = project.ext.cargoVersion
        def targetFileName = "restsend-sdk-${version}.aar"
        def targetFilePath = "ubuntu@chat.ruzhila.cn:/var/www/chat/downloads/${targetFileName}"
        println "Copying build/outputs/aar/app-release.aar to ${targetFilePath}"
        exec {
            commandLine 'rsync', "-avz", aarFile.absolutePath, targetFilePath
        }
    }
}

task buildAndDeploy {
    dependsOn scpAar
}