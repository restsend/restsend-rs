// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.6.0.

// ignore_for_file: unused_import, unused_element, unnecessary_import, duplicate_ignore, invalid_use_of_internal_member, annotate_overrides, non_constant_identifier_names, curly_braces_in_flow_control_structures, prefer_const_literals_to_create_immutables, unused_field

import 'client/account.dart';
import 'client/client.dart';
import 'dart:async';
import 'dart:convert';
import 'frb_generated.dart';
import 'frb_generated.io.dart'
    if (dart.library.js_interop) 'frb_generated.web.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';
import 'third_party/restsend_sdk/models.dart';
import 'third_party/restsend_sdk/models/chat_log.dart';
import 'third_party/restsend_sdk/models/conversation.dart';
import 'third_party/restsend_sdk/models/topic.dart';
import 'third_party/restsend_sdk/models/topic_member.dart';
import 'third_party/restsend_sdk/models/user.dart';

/// Main entrypoint of the Rust API
class RustLib extends BaseEntrypoint<RustLibApi, RustLibApiImpl, RustLibWire> {
  @internal
  static final instance = RustLib._();

  RustLib._();

  /// Initialize flutter_rust_bridge
  static Future<void> init({
    RustLibApi? api,
    BaseHandler? handler,
    ExternalLibrary? externalLibrary,
  }) async {
    await instance.initImpl(
      api: api,
      handler: handler,
      externalLibrary: externalLibrary,
    );
  }

  /// Initialize flutter_rust_bridge in mock mode.
  /// No libraries for FFI are loaded.
  static void initMock({
    required RustLibApi api,
  }) {
    instance.initMockImpl(
      api: api,
    );
  }

  /// Dispose flutter_rust_bridge
  ///
  /// The call to this function is optional, since flutter_rust_bridge (and everything else)
  /// is automatically disposed when the app stops.
  static void dispose() => instance.disposeImpl();

  @override
  ApiImplConstructor<RustLibApiImpl, RustLibWire> get apiImplConstructor =>
      RustLibApiImpl.new;

  @override
  WireConstructor<RustLibWire> get wireConstructor =>
      RustLibWire.fromExternalLibrary;

  @override
  Future<void> executeRustInitializers() async {
    await api.crateClientClientInitApp();
  }

  @override
  ExternalLibraryLoaderConfig get defaultExternalLibraryLoaderConfig =>
      kDefaultExternalLibraryLoaderConfig;

  @override
  String get codegenVersion => '2.6.0';

  @override
  int get rustContentHash => 1101477557;

  static const kDefaultExternalLibraryLoaderConfig =
      ExternalLibraryLoaderConfig(
    stem: 'restsend_dart',
    ioDirectory: 'rust/target/release/',
    webPrefix: 'pkg/',
  );
}

abstract class RustLibApi extends BaseApi {
  Future<void> crateClientClientClientAppActive({required Client that});

  Future<void> crateClientClientClientConnect({required Client that});

  String crateClientClientClientConnectionStatus({required Client that});

  Future<Client> crateClientClientClientNew(
      {required AuthInfo info, String? rootPath, String? dbName});

  void crateClientClientClientSetKeepalive(
      {required Client that, required int secs});

  Future<void> crateClientClientClientShutdown({required Client that});

  Future<Attachment> restsendSdkModelsChatLogAttachmentDefault();

  Future<Attachment> restsendSdkModelsChatLogAttachmentFromLocal(
      {required String fileName,
      required String filePath,
      required bool isPrivate});

  Future<Attachment> restsendSdkModelsChatLogAttachmentFromUrl(
      {required String url,
      required bool isPrivate,
      required PlatformInt64 size});

  Future<AttachmentStatus> restsendSdkModelsChatLogAttachmentStatusDefault();

  Future<AuthInfo> restsendSdkModelsUserAuthInfoDefault();

  Future<AuthInfo> restsendSdkModelsUserAuthInfoNew(
      {required String endpoint,
      required String userId,
      required String token});

  Future<ChatLog> restsendSdkModelsChatLogChatLogDefault();

  Future<ChatLog> restsendSdkModelsChatLogChatLogNew(
      {required String topicId, required String id});

  Future<PlatformInt64> restsendSdkModelsChatLogChatLogSortKey(
      {required ChatLog that});

  Future<ChatLogStatus> restsendSdkModelsChatLogChatLogStatusDefault();

  Future<Content> restsendSdkModelsChatLogContentDefault();

  Future<Content> restsendSdkModelsChatLogContentNew(
      {required ContentType contentType});

  Future<Content> restsendSdkModelsChatLogContentNewText(
      {required ContentType contentType, required String text});

  Future<Conversation> restsendSdkModelsConversationConversationDefault();

  Future<Conversation> restsendSdkModelsConversationConversationNew(
      {required String topicId});

  Future<PlatformInt64> restsendSdkModelsConversationConversationSortKey(
      {required Conversation that});

  Future<ConversationUpdateFields>
      restsendSdkModelsConversationConversationUpdateFieldsDefault();

  Future<String> crateClientAccountHello();

  Future<void> crateClientClientInitApp();

  Future<ListUserResult> restsendSdkModelsListUserResultDefault();

  Future<void> crateClientAccountLogout(
      {required String endpoint, required String token});

  Future<void> crateClientClientSetLogging({required String level});

  Future<AuthInfo> crateClientAccountSignin(
      {required String endpoint,
      required String userId,
      String? password,
      String? token});

  Future<AuthInfo> crateClientAccountSignup(
      {required String endpoint,
      required String userId,
      required String password});

  Future<Tag> restsendSdkModelsConversationTagDefault();

  Future<Topic> restsendSdkModelsTopicTopicDefault();

  Future<TopicKnock> restsendSdkModelsTopicKnockNew(
      {required String topicId, required String userId});

  Future<TopicMember> restsendSdkModelsTopicMemberTopicMemberDefault();

  Future<TopicMember> restsendSdkModelsTopicMemberTopicMemberNew(
      {required String topicId, required String userId});

  Future<Topic> restsendSdkModelsTopicTopicNew({required String topicId});

  Future<TopicNotice> restsendSdkModelsTopicTopicNoticeNew(
      {required String text,
      required String publisher,
      required String updatedAt});

  Future<User> restsendSdkModelsUserUserDefault();

  Future<User> restsendSdkModelsUserUserMerge(
      {required User that, required User user});

  Future<User> restsendSdkModelsUserUserNew({required String userId});

  Future<UserProfile> restsendSdkModelsUserUserProfileDefault();

  Future<PlatformInt64> restsendSdkModelsUserUserSortKey({required User that});

  RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_Client;

  RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_Client;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_ClientPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_ContentType;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_ContentType;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_ContentTypePtr;
}

class RustLibApiImpl extends RustLibApiImplPlatform implements RustLibApi {
  RustLibApiImpl({
    required super.handler,
    required super.wire,
    required super.generalizedFrbRustBinding,
    required super.portManager,
  });

  @override
  Future<void> crateClientClientClientAppActive({required Client that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerClient(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateClientClientClientAppActiveConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateClientClientClientAppActiveConstMeta =>
      const TaskConstMeta(
        debugName: "Client_app_active",
        argNames: ["that"],
      );

  @override
  Future<void> crateClientClientClientConnect({required Client that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerClient(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 2, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateClientClientClientConnectConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateClientClientClientConnectConstMeta =>
      const TaskConstMeta(
        debugName: "Client_connect",
        argNames: ["that"],
      );

  @override
  String crateClientClientClientConnectionStatus({required Client that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerClient(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 3)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateClientClientClientConnectionStatusConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateClientClientClientConnectionStatusConstMeta =>
      const TaskConstMeta(
        debugName: "Client_connection_status",
        argNames: ["that"],
      );

  @override
  Future<Client> crateClientClientClientNew(
      {required AuthInfo info, String? rootPath, String? dbName}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_auth_info(info, serializer);
        sse_encode_opt_String(rootPath, serializer);
        sse_encode_opt_String(dbName, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 4, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerClient,
        decodeErrorData: null,
      ),
      constMeta: kCrateClientClientClientNewConstMeta,
      argValues: [info, rootPath, dbName],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateClientClientClientNewConstMeta => const TaskConstMeta(
        debugName: "Client_new",
        argNames: ["info", "rootPath", "dbName"],
      );

  @override
  void crateClientClientClientSetKeepalive(
      {required Client that, required int secs}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerClient(
            that, serializer);
        sse_encode_u_32(secs, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 5)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateClientClientClientSetKeepaliveConstMeta,
      argValues: [that, secs],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateClientClientClientSetKeepaliveConstMeta =>
      const TaskConstMeta(
        debugName: "Client_set_keepalive(dart_style=keepalive)",
        argNames: ["that", "secs"],
      );

  @override
  Future<void> crateClientClientClientShutdown({required Client that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerClient(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 6, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateClientClientClientShutdownConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateClientClientClientShutdownConstMeta =>
      const TaskConstMeta(
        debugName: "Client_shutdown",
        argNames: ["that"],
      );

  @override
  Future<Attachment> restsendSdkModelsChatLogAttachmentDefault() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 7, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_attachment,
        decodeErrorData: null,
      ),
      constMeta: kRestsendSdkModelsChatLogAttachmentDefaultConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kRestsendSdkModelsChatLogAttachmentDefaultConstMeta =>
      const TaskConstMeta(
        debugName: "attachment_default",
        argNames: [],
      );

  @override
  Future<Attachment> restsendSdkModelsChatLogAttachmentFromLocal(
      {required String fileName,
      required String filePath,
      required bool isPrivate}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(fileName, serializer);
        sse_encode_String(filePath, serializer);
        sse_encode_bool(isPrivate, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 8, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_attachment,
        decodeErrorData: null,
      ),
      constMeta: kRestsendSdkModelsChatLogAttachmentFromLocalConstMeta,
      argValues: [fileName, filePath, isPrivate],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kRestsendSdkModelsChatLogAttachmentFromLocalConstMeta =>
      const TaskConstMeta(
        debugName: "attachment_from_local",
        argNames: ["fileName", "filePath", "isPrivate"],
      );

  @override
  Future<Attachment> restsendSdkModelsChatLogAttachmentFromUrl(
      {required String url,
      required bool isPrivate,
      required PlatformInt64 size}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(url, serializer);
        sse_encode_bool(isPrivate, serializer);
        sse_encode_i_64(size, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 9, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_attachment,
        decodeErrorData: null,
      ),
      constMeta: kRestsendSdkModelsChatLogAttachmentFromUrlConstMeta,
      argValues: [url, isPrivate, size],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kRestsendSdkModelsChatLogAttachmentFromUrlConstMeta =>
      const TaskConstMeta(
        debugName: "attachment_from_url",
        argNames: ["url", "isPrivate", "size"],
      );

  @override
  Future<AttachmentStatus> restsendSdkModelsChatLogAttachmentStatusDefault() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 10, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_attachment_status,
        decodeErrorData: null,
      ),
      constMeta: kRestsendSdkModelsChatLogAttachmentStatusDefaultConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kRestsendSdkModelsChatLogAttachmentStatusDefaultConstMeta =>
      const TaskConstMeta(
        debugName: "attachment_status_default",
        argNames: [],
      );

  @override
  Future<AuthInfo> restsendSdkModelsUserAuthInfoDefault() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 11, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_auth_info,
        decodeErrorData: null,
      ),
      constMeta: kRestsendSdkModelsUserAuthInfoDefaultConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kRestsendSdkModelsUserAuthInfoDefaultConstMeta =>
      const TaskConstMeta(
        debugName: "auth_info_default",
        argNames: [],
      );

  @override
  Future<AuthInfo> restsendSdkModelsUserAuthInfoNew(
      {required String endpoint,
      required String userId,
      required String token}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(endpoint, serializer);
        sse_encode_String(userId, serializer);
        sse_encode_String(token, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 12, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_auth_info,
        decodeErrorData: null,
      ),
      constMeta: kRestsendSdkModelsUserAuthInfoNewConstMeta,
      argValues: [endpoint, userId, token],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kRestsendSdkModelsUserAuthInfoNewConstMeta =>
      const TaskConstMeta(
        debugName: "auth_info_new",
        argNames: ["endpoint", "userId", "token"],
      );

  @override
  Future<ChatLog> restsendSdkModelsChatLogChatLogDefault() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 13, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_chat_log,
        decodeErrorData: null,
      ),
      constMeta: kRestsendSdkModelsChatLogChatLogDefaultConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kRestsendSdkModelsChatLogChatLogDefaultConstMeta =>
      const TaskConstMeta(
        debugName: "chat_log_default",
        argNames: [],
      );

  @override
  Future<ChatLog> restsendSdkModelsChatLogChatLogNew(
      {required String topicId, required String id}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(topicId, serializer);
        sse_encode_String(id, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 14, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_chat_log,
        decodeErrorData: null,
      ),
      constMeta: kRestsendSdkModelsChatLogChatLogNewConstMeta,
      argValues: [topicId, id],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kRestsendSdkModelsChatLogChatLogNewConstMeta =>
      const TaskConstMeta(
        debugName: "chat_log_new",
        argNames: ["topicId", "id"],
      );

  @override
  Future<PlatformInt64> restsendSdkModelsChatLogChatLogSortKey(
      {required ChatLog that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_chat_log(that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 15, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_i_64,
        decodeErrorData: null,
      ),
      constMeta: kRestsendSdkModelsChatLogChatLogSortKeyConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kRestsendSdkModelsChatLogChatLogSortKeyConstMeta =>
      const TaskConstMeta(
        debugName: "chat_log_sort_key",
        argNames: ["that"],
      );

  @override
  Future<ChatLogStatus> restsendSdkModelsChatLogChatLogStatusDefault() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 16, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_chat_log_status,
        decodeErrorData: null,
      ),
      constMeta: kRestsendSdkModelsChatLogChatLogStatusDefaultConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kRestsendSdkModelsChatLogChatLogStatusDefaultConstMeta =>
      const TaskConstMeta(
        debugName: "chat_log_status_default",
        argNames: [],
      );

  @override
  Future<Content> restsendSdkModelsChatLogContentDefault() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 17, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_content,
        decodeErrorData: null,
      ),
      constMeta: kRestsendSdkModelsChatLogContentDefaultConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kRestsendSdkModelsChatLogContentDefaultConstMeta =>
      const TaskConstMeta(
        debugName: "content_default",
        argNames: [],
      );

  @override
  Future<Content> restsendSdkModelsChatLogContentNew(
      {required ContentType contentType}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerContentType(
            contentType, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 18, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_content,
        decodeErrorData: null,
      ),
      constMeta: kRestsendSdkModelsChatLogContentNewConstMeta,
      argValues: [contentType],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kRestsendSdkModelsChatLogContentNewConstMeta =>
      const TaskConstMeta(
        debugName: "content_new",
        argNames: ["contentType"],
      );

  @override
  Future<Content> restsendSdkModelsChatLogContentNewText(
      {required ContentType contentType, required String text}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerContentType(
            contentType, serializer);
        sse_encode_String(text, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 19, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_content,
        decodeErrorData: null,
      ),
      constMeta: kRestsendSdkModelsChatLogContentNewTextConstMeta,
      argValues: [contentType, text],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kRestsendSdkModelsChatLogContentNewTextConstMeta =>
      const TaskConstMeta(
        debugName: "content_new_text",
        argNames: ["contentType", "text"],
      );

  @override
  Future<Conversation> restsendSdkModelsConversationConversationDefault() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 20, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_conversation,
        decodeErrorData: null,
      ),
      constMeta: kRestsendSdkModelsConversationConversationDefaultConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kRestsendSdkModelsConversationConversationDefaultConstMeta =>
          const TaskConstMeta(
            debugName: "conversation_default",
            argNames: [],
          );

  @override
  Future<Conversation> restsendSdkModelsConversationConversationNew(
      {required String topicId}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(topicId, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 21, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_conversation,
        decodeErrorData: null,
      ),
      constMeta: kRestsendSdkModelsConversationConversationNewConstMeta,
      argValues: [topicId],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kRestsendSdkModelsConversationConversationNewConstMeta =>
      const TaskConstMeta(
        debugName: "conversation_new",
        argNames: ["topicId"],
      );

  @override
  Future<PlatformInt64> restsendSdkModelsConversationConversationSortKey(
      {required Conversation that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_conversation(that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 22, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_i_64,
        decodeErrorData: null,
      ),
      constMeta: kRestsendSdkModelsConversationConversationSortKeyConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kRestsendSdkModelsConversationConversationSortKeyConstMeta =>
          const TaskConstMeta(
            debugName: "conversation_sort_key",
            argNames: ["that"],
          );

  @override
  Future<ConversationUpdateFields>
      restsendSdkModelsConversationConversationUpdateFieldsDefault() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 23, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_conversation_update_fields,
        decodeErrorData: null,
      ),
      constMeta:
          kRestsendSdkModelsConversationConversationUpdateFieldsDefaultConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kRestsendSdkModelsConversationConversationUpdateFieldsDefaultConstMeta =>
          const TaskConstMeta(
            debugName: "conversation_update_fields_default",
            argNames: [],
          );

  @override
  Future<String> crateClientAccountHello() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 24, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateClientAccountHelloConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateClientAccountHelloConstMeta => const TaskConstMeta(
        debugName: "hello",
        argNames: [],
      );

  @override
  Future<void> crateClientClientInitApp() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 25, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateClientClientInitAppConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateClientClientInitAppConstMeta => const TaskConstMeta(
        debugName: "init_app",
        argNames: [],
      );

  @override
  Future<ListUserResult> restsendSdkModelsListUserResultDefault() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 26, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_user_result,
        decodeErrorData: null,
      ),
      constMeta: kRestsendSdkModelsListUserResultDefaultConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kRestsendSdkModelsListUserResultDefaultConstMeta =>
      const TaskConstMeta(
        debugName: "list_user_result_default",
        argNames: [],
      );

  @override
  Future<void> crateClientAccountLogout(
      {required String endpoint, required String token}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(endpoint, serializer);
        sse_encode_String(token, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 27, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateClientAccountLogoutConstMeta,
      argValues: [endpoint, token],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateClientAccountLogoutConstMeta => const TaskConstMeta(
        debugName: "logout",
        argNames: ["endpoint", "token"],
      );

  @override
  Future<void> crateClientClientSetLogging({required String level}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(level, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 28, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateClientClientSetLoggingConstMeta,
      argValues: [level],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateClientClientSetLoggingConstMeta =>
      const TaskConstMeta(
        debugName: "set_logging",
        argNames: ["level"],
      );

  @override
  Future<AuthInfo> crateClientAccountSignin(
      {required String endpoint,
      required String userId,
      String? password,
      String? token}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(endpoint, serializer);
        sse_encode_String(userId, serializer);
        sse_encode_opt_String(password, serializer);
        sse_encode_opt_String(token, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 29, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_auth_info,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateClientAccountSigninConstMeta,
      argValues: [endpoint, userId, password, token],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateClientAccountSigninConstMeta => const TaskConstMeta(
        debugName: "signin",
        argNames: ["endpoint", "userId", "password", "token"],
      );

  @override
  Future<AuthInfo> crateClientAccountSignup(
      {required String endpoint,
      required String userId,
      required String password}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(endpoint, serializer);
        sse_encode_String(userId, serializer);
        sse_encode_String(password, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 30, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_auth_info,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateClientAccountSignupConstMeta,
      argValues: [endpoint, userId, password],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateClientAccountSignupConstMeta => const TaskConstMeta(
        debugName: "signup",
        argNames: ["endpoint", "userId", "password"],
      );

  @override
  Future<Tag> restsendSdkModelsConversationTagDefault() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 31, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_tag,
        decodeErrorData: null,
      ),
      constMeta: kRestsendSdkModelsConversationTagDefaultConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kRestsendSdkModelsConversationTagDefaultConstMeta =>
      const TaskConstMeta(
        debugName: "tag_default",
        argNames: [],
      );

  @override
  Future<Topic> restsendSdkModelsTopicTopicDefault() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 32, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_topic,
        decodeErrorData: null,
      ),
      constMeta: kRestsendSdkModelsTopicTopicDefaultConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kRestsendSdkModelsTopicTopicDefaultConstMeta =>
      const TaskConstMeta(
        debugName: "topic_default",
        argNames: [],
      );

  @override
  Future<TopicKnock> restsendSdkModelsTopicKnockNew(
      {required String topicId, required String userId}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(topicId, serializer);
        sse_encode_String(userId, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 33, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_topic_knock,
        decodeErrorData: null,
      ),
      constMeta: kRestsendSdkModelsTopicKnockNewConstMeta,
      argValues: [topicId, userId],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kRestsendSdkModelsTopicKnockNewConstMeta =>
      const TaskConstMeta(
        debugName: "topic_knock_new",
        argNames: ["topicId", "userId"],
      );

  @override
  Future<TopicMember> restsendSdkModelsTopicMemberTopicMemberDefault() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 34, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_topic_member,
        decodeErrorData: null,
      ),
      constMeta: kRestsendSdkModelsTopicMemberTopicMemberDefaultConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kRestsendSdkModelsTopicMemberTopicMemberDefaultConstMeta =>
      const TaskConstMeta(
        debugName: "topic_member_default",
        argNames: [],
      );

  @override
  Future<TopicMember> restsendSdkModelsTopicMemberTopicMemberNew(
      {required String topicId, required String userId}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(topicId, serializer);
        sse_encode_String(userId, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 35, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_topic_member,
        decodeErrorData: null,
      ),
      constMeta: kRestsendSdkModelsTopicMemberTopicMemberNewConstMeta,
      argValues: [topicId, userId],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kRestsendSdkModelsTopicMemberTopicMemberNewConstMeta =>
      const TaskConstMeta(
        debugName: "topic_member_new",
        argNames: ["topicId", "userId"],
      );

  @override
  Future<Topic> restsendSdkModelsTopicTopicNew({required String topicId}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(topicId, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 36, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_topic,
        decodeErrorData: null,
      ),
      constMeta: kRestsendSdkModelsTopicTopicNewConstMeta,
      argValues: [topicId],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kRestsendSdkModelsTopicTopicNewConstMeta =>
      const TaskConstMeta(
        debugName: "topic_new",
        argNames: ["topicId"],
      );

  @override
  Future<TopicNotice> restsendSdkModelsTopicTopicNoticeNew(
      {required String text,
      required String publisher,
      required String updatedAt}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(text, serializer);
        sse_encode_String(publisher, serializer);
        sse_encode_String(updatedAt, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 37, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_topic_notice,
        decodeErrorData: null,
      ),
      constMeta: kRestsendSdkModelsTopicTopicNoticeNewConstMeta,
      argValues: [text, publisher, updatedAt],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kRestsendSdkModelsTopicTopicNoticeNewConstMeta =>
      const TaskConstMeta(
        debugName: "topic_notice_new",
        argNames: ["text", "publisher", "updatedAt"],
      );

  @override
  Future<User> restsendSdkModelsUserUserDefault() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 38, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_user,
        decodeErrorData: null,
      ),
      constMeta: kRestsendSdkModelsUserUserDefaultConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kRestsendSdkModelsUserUserDefaultConstMeta =>
      const TaskConstMeta(
        debugName: "user_default",
        argNames: [],
      );

  @override
  Future<User> restsendSdkModelsUserUserMerge(
      {required User that, required User user}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_user(that, serializer);
        sse_encode_box_autoadd_user(user, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 39, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_user,
        decodeErrorData: null,
      ),
      constMeta: kRestsendSdkModelsUserUserMergeConstMeta,
      argValues: [that, user],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kRestsendSdkModelsUserUserMergeConstMeta =>
      const TaskConstMeta(
        debugName: "user_merge",
        argNames: ["that", "user"],
      );

  @override
  Future<User> restsendSdkModelsUserUserNew({required String userId}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(userId, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 40, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_user,
        decodeErrorData: null,
      ),
      constMeta: kRestsendSdkModelsUserUserNewConstMeta,
      argValues: [userId],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kRestsendSdkModelsUserUserNewConstMeta =>
      const TaskConstMeta(
        debugName: "user_new",
        argNames: ["userId"],
      );

  @override
  Future<UserProfile> restsendSdkModelsUserUserProfileDefault() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 41, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_user_profile,
        decodeErrorData: null,
      ),
      constMeta: kRestsendSdkModelsUserUserProfileDefaultConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kRestsendSdkModelsUserUserProfileDefaultConstMeta =>
      const TaskConstMeta(
        debugName: "user_profile_default",
        argNames: [],
      );

  @override
  Future<PlatformInt64> restsendSdkModelsUserUserSortKey({required User that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_user(that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 42, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_i_64,
        decodeErrorData: null,
      ),
      constMeta: kRestsendSdkModelsUserUserSortKeyConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kRestsendSdkModelsUserUserSortKeyConstMeta =>
      const TaskConstMeta(
        debugName: "user_sort_key",
        argNames: ["that"],
      );

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_Client => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerClient;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_Client => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerClient;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_ContentType => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerContentType;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_ContentType => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerContentType;

  @protected
  AnyhowException dco_decode_AnyhowException(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return AnyhowException(raw as String);
  }

  @protected
  Client
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerClient(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ClientImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  ContentType
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerContentType(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ContentTypeImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Client
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerClient(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ClientImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Map<String, String> dco_decode_Map_String_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return Map.fromEntries(dco_decode_list_record_string_string(raw)
        .map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  Client
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerClient(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ClientImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  ContentType
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerContentType(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ContentTypeImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  String dco_decode_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as String;
  }

  @protected
  Attachment dco_decode_attachment(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 8)
      throw Exception('unexpected arr length: expect 8 but see ${arr.length}');
    return Attachment(
      url: dco_decode_String(arr[0]),
      size: dco_decode_i_64(arr[1]),
      thumbnail: dco_decode_String(arr[2]),
      fileName: dco_decode_String(arr[3]),
      filePath: dco_decode_String(arr[4]),
      urlOrData: dco_decode_String(arr[5]),
      isPrivate: dco_decode_bool(arr[6]),
      status: dco_decode_attachment_status(arr[7]),
    );
  }

  @protected
  AttachmentStatus dco_decode_attachment_status(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return AttachmentStatus.values[raw as int];
  }

  @protected
  AuthInfo dco_decode_auth_info(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 8)
      throw Exception('unexpected arr length: expect 8 but see ${arr.length}');
    return AuthInfo(
      endpoint: dco_decode_String(arr[0]),
      userId: dco_decode_String(arr[1]),
      avatar: dco_decode_String(arr[2]),
      name: dco_decode_String(arr[3]),
      token: dco_decode_String(arr[4]),
      isStaff: dco_decode_bool(arr[5]),
      isCrossDomain: dco_decode_bool(arr[6]),
      privateExtra: dco_decode_opt_Map_String_String(arr[7]),
    );
  }

  @protected
  bool dco_decode_bool(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as bool;
  }

  @protected
  Attachment dco_decode_box_autoadd_attachment(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_attachment(raw);
  }

  @protected
  AuthInfo dco_decode_box_autoadd_auth_info(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_auth_info(raw);
  }

  @protected
  bool dco_decode_box_autoadd_bool(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as bool;
  }

  @protected
  ChatLog dco_decode_box_autoadd_chat_log(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_chat_log(raw);
  }

  @protected
  Content dco_decode_box_autoadd_content(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_content(raw);
  }

  @protected
  Conversation dco_decode_box_autoadd_conversation(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_conversation(raw);
  }

  @protected
  PlatformInt64 dco_decode_box_autoadd_i_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_i_64(raw);
  }

  @protected
  TopicNotice dco_decode_box_autoadd_topic_notice(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_topic_notice(raw);
  }

  @protected
  User dco_decode_box_autoadd_user(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_user(raw);
  }

  @protected
  ChatLog dco_decode_chat_log(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 10)
      throw Exception('unexpected arr length: expect 10 but see ${arr.length}');
    return ChatLog(
      topicId: dco_decode_String(arr[0]),
      id: dco_decode_String(arr[1]),
      seq: dco_decode_i_64(arr[2]),
      createdAt: dco_decode_String(arr[3]),
      senderId: dco_decode_String(arr[4]),
      content: dco_decode_content(arr[5]),
      read: dco_decode_bool(arr[6]),
      recall: dco_decode_bool(arr[7]),
      status: dco_decode_chat_log_status(arr[8]),
      cachedAt: dco_decode_i_64(arr[9]),
    );
  }

  @protected
  ChatLogStatus dco_decode_chat_log_status(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ChatLogStatus.values[raw as int];
  }

  @protected
  Content dco_decode_content(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 18)
      throw Exception('unexpected arr length: expect 18 but see ${arr.length}');
    return Content(
      contentType: dco_decode_String(arr[0]),
      encrypted: dco_decode_bool(arr[1]),
      checksum: dco_decode_u_32(arr[2]),
      text: dco_decode_String(arr[3]),
      placeholder: dco_decode_String(arr[4]),
      thumbnail: dco_decode_String(arr[5]),
      duration: dco_decode_String(arr[6]),
      size: dco_decode_u_64(arr[7]),
      width: dco_decode_f_32(arr[8]),
      height: dco_decode_f_32(arr[9]),
      mentions: dco_decode_list_String(arr[10]),
      mentionAll: dco_decode_bool(arr[11]),
      reply: dco_decode_String(arr[12]),
      replyContent: dco_decode_opt_String(arr[13]),
      createdAt: dco_decode_String(arr[14]),
      attachment: dco_decode_opt_box_autoadd_attachment(arr[15]),
      extra: dco_decode_opt_Map_String_String(arr[16]),
      unreadable: dco_decode_bool(arr[17]),
    );
  }

  @protected
  Conversation dco_decode_conversation(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 27)
      throw Exception('unexpected arr length: expect 27 but see ${arr.length}');
    return Conversation(
      ownerId: dco_decode_String(arr[0]),
      topicId: dco_decode_String(arr[1]),
      updatedAt: dco_decode_String(arr[2]),
      startSeq: dco_decode_i_64(arr[3]),
      lastSeq: dco_decode_i_64(arr[4]),
      lastReadSeq: dco_decode_i_64(arr[5]),
      lastReadAt: dco_decode_opt_String(arr[6]),
      multiple: dco_decode_bool(arr[7]),
      attendee: dco_decode_String(arr[8]),
      members: dco_decode_i_64(arr[9]),
      name: dco_decode_String(arr[10]),
      icon: dco_decode_String(arr[11]),
      sticky: dco_decode_bool(arr[12]),
      mute: dco_decode_bool(arr[13]),
      source: dco_decode_String(arr[14]),
      unread: dco_decode_i_64(arr[15]),
      lastSenderId: dco_decode_String(arr[16]),
      lastMessage: dco_decode_opt_box_autoadd_content(arr[17]),
      lastMessageAt: dco_decode_String(arr[18]),
      lastMessageSeq: dco_decode_opt_box_autoadd_i_64(arr[19]),
      remark: dco_decode_opt_String(arr[20]),
      extra: dco_decode_opt_Map_String_String(arr[21]),
      topicExtra: dco_decode_opt_Map_String_String(arr[22]),
      topicOwnerId: dco_decode_opt_String(arr[23]),
      tags: dco_decode_opt_list_tag(arr[24]),
      cachedAt: dco_decode_i_64(arr[25]),
      isPartial: dco_decode_bool(arr[26]),
    );
  }

  @protected
  ConversationUpdateFields dco_decode_conversation_update_fields(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 5)
      throw Exception('unexpected arr length: expect 5 but see ${arr.length}');
    return ConversationUpdateFields(
      sticky: dco_decode_opt_box_autoadd_bool(arr[0]),
      mute: dco_decode_opt_box_autoadd_bool(arr[1]),
      remark: dco_decode_opt_String(arr[2]),
      extra: dco_decode_opt_Map_String_String(arr[3]),
      tags: dco_decode_opt_list_tag(arr[4]),
    );
  }

  @protected
  double dco_decode_f_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as double;
  }

  @protected
  int dco_decode_i_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  PlatformInt64 dco_decode_i_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeI64(raw);
  }

  @protected
  List<String> dco_decode_list_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_String).toList();
  }

  @protected
  Uint8List dco_decode_list_prim_u_8_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as Uint8List;
  }

  @protected
  List<(String, String)> dco_decode_list_record_string_string(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_record_string_string).toList();
  }

  @protected
  List<Tag> dco_decode_list_tag(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_tag).toList();
  }

  @protected
  List<User> dco_decode_list_user(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_user).toList();
  }

  @protected
  ListUserResult dco_decode_list_user_result(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return ListUserResult(
      hasMore: dco_decode_bool(arr[0]),
      updatedAt: dco_decode_String(arr[1]),
      items: dco_decode_list_user(arr[2]),
    );
  }

  @protected
  Map<String, String>? dco_decode_opt_Map_String_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_Map_String_String(raw);
  }

  @protected
  String? dco_decode_opt_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_String(raw);
  }

  @protected
  Attachment? dco_decode_opt_box_autoadd_attachment(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_attachment(raw);
  }

  @protected
  bool? dco_decode_opt_box_autoadd_bool(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_bool(raw);
  }

  @protected
  Content? dco_decode_opt_box_autoadd_content(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_content(raw);
  }

  @protected
  PlatformInt64? dco_decode_opt_box_autoadd_i_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_i_64(raw);
  }

  @protected
  TopicNotice? dco_decode_opt_box_autoadd_topic_notice(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_topic_notice(raw);
  }

  @protected
  List<Tag>? dco_decode_opt_list_tag(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_list_tag(raw);
  }

  @protected
  (String, String) dco_decode_record_string_string(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2) {
      throw Exception('Expected 2 elements, got ${arr.length}');
    }
    return (
      dco_decode_String(arr[0]),
      dco_decode_String(arr[1]),
    );
  }

  @protected
  Tag dco_decode_tag(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return Tag(
      id: dco_decode_String(arr[0]),
      tagType: dco_decode_String(arr[1]),
      label: dco_decode_String(arr[2]),
    );
  }

  @protected
  Topic dco_decode_topic(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 18)
      throw Exception('unexpected arr length: expect 18 but see ${arr.length}');
    return Topic(
      id: dco_decode_String(arr[0]),
      name: dco_decode_String(arr[1]),
      icon: dco_decode_String(arr[2]),
      remark: dco_decode_String(arr[3]),
      ownerId: dco_decode_String(arr[4]),
      attendeeId: dco_decode_String(arr[5]),
      admins: dco_decode_list_String(arr[6]),
      members: dco_decode_u_32(arr[7]),
      lastSeq: dco_decode_i_64(arr[8]),
      multiple: dco_decode_bool(arr[9]),
      source: dco_decode_String(arr[10]),
      private: dco_decode_bool(arr[11]),
      createdAt: dco_decode_String(arr[12]),
      updatedAt: dco_decode_String(arr[13]),
      notice: dco_decode_opt_box_autoadd_topic_notice(arr[14]),
      extra: dco_decode_opt_Map_String_String(arr[15]),
      silent: dco_decode_bool(arr[16]),
      cachedAt: dco_decode_i_64(arr[17]),
    );
  }

  @protected
  TopicKnock dco_decode_topic_knock(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 8)
      throw Exception('unexpected arr length: expect 8 but see ${arr.length}');
    return TopicKnock(
      createdAt: dco_decode_String(arr[0]),
      updatedAt: dco_decode_String(arr[1]),
      topicId: dco_decode_String(arr[2]),
      userId: dco_decode_String(arr[3]),
      message: dco_decode_String(arr[4]),
      source: dco_decode_String(arr[5]),
      status: dco_decode_String(arr[6]),
      adminId: dco_decode_String(arr[7]),
    );
  }

  @protected
  TopicMember dco_decode_topic_member(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 8)
      throw Exception('unexpected arr length: expect 8 but see ${arr.length}');
    return TopicMember(
      topicId: dco_decode_String(arr[0]),
      userId: dco_decode_String(arr[1]),
      name: dco_decode_String(arr[2]),
      source: dco_decode_String(arr[3]),
      silenceAt: dco_decode_opt_String(arr[4]),
      joinedAt: dco_decode_String(arr[5]),
      updatedAt: dco_decode_String(arr[6]),
      extra: dco_decode_opt_Map_String_String(arr[7]),
    );
  }

  @protected
  TopicNotice dco_decode_topic_notice(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return TopicNotice(
      text: dco_decode_String(arr[0]),
      publisher: dco_decode_String(arr[1]),
      updatedAt: dco_decode_String(arr[2]),
    );
  }

  @protected
  int dco_decode_u_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  BigInt dco_decode_u_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeU64(raw);
  }

  @protected
  int dco_decode_u_8(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  void dco_decode_unit(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return;
  }

  @protected
  User dco_decode_user(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 19)
      throw Exception('unexpected arr length: expect 19 but see ${arr.length}');
    return User(
      userId: dco_decode_String(arr[0]),
      name: dco_decode_String(arr[1]),
      avatar: dco_decode_String(arr[2]),
      publicKey: dco_decode_String(arr[3]),
      remark: dco_decode_String(arr[4]),
      isContact: dco_decode_bool(arr[5]),
      isStar: dco_decode_bool(arr[6]),
      isBlocked: dco_decode_bool(arr[7]),
      locale: dco_decode_String(arr[8]),
      city: dco_decode_String(arr[9]),
      country: dco_decode_String(arr[10]),
      source: dco_decode_String(arr[11]),
      createdAt: dco_decode_String(arr[12]),
      gender: dco_decode_String(arr[13]),
      memo: dco_decode_String(arr[14]),
      extra: dco_decode_opt_Map_String_String(arr[15]),
      isStaff: dco_decode_bool(arr[16]),
      cachedAt: dco_decode_i_64(arr[17]),
      isPartial: dco_decode_bool(arr[18]),
    );
  }

  @protected
  UserProfile dco_decode_user_profile(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 6)
      throw Exception('unexpected arr length: expect 6 but see ${arr.length}');
    return UserProfile(
      avatar: dco_decode_String(arr[0]),
      gender: dco_decode_String(arr[1]),
      city: dco_decode_String(arr[2]),
      region: dco_decode_String(arr[3]),
      country: dco_decode_String(arr[4]),
      privateExtra: dco_decode_opt_Map_String_String(arr[5]),
    );
  }

  @protected
  BigInt dco_decode_usize(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeU64(raw);
  }

  @protected
  AnyhowException sse_decode_AnyhowException(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_String(deserializer);
    return AnyhowException(inner);
  }

  @protected
  Client
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerClient(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ClientImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  ContentType
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerContentType(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ContentTypeImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  Client
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerClient(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ClientImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  Map<String, String> sse_decode_Map_String_String(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_record_string_string(deserializer);
    return Map.fromEntries(inner.map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  Client
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerClient(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ClientImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  ContentType
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerContentType(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ContentTypeImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  String sse_decode_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_prim_u_8_strict(deserializer);
    return utf8.decoder.convert(inner);
  }

  @protected
  Attachment sse_decode_attachment(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_url = sse_decode_String(deserializer);
    var var_size = sse_decode_i_64(deserializer);
    var var_thumbnail = sse_decode_String(deserializer);
    var var_fileName = sse_decode_String(deserializer);
    var var_filePath = sse_decode_String(deserializer);
    var var_urlOrData = sse_decode_String(deserializer);
    var var_isPrivate = sse_decode_bool(deserializer);
    var var_status = sse_decode_attachment_status(deserializer);
    return Attachment(
        url: var_url,
        size: var_size,
        thumbnail: var_thumbnail,
        fileName: var_fileName,
        filePath: var_filePath,
        urlOrData: var_urlOrData,
        isPrivate: var_isPrivate,
        status: var_status);
  }

  @protected
  AttachmentStatus sse_decode_attachment_status(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_32(deserializer);
    return AttachmentStatus.values[inner];
  }

  @protected
  AuthInfo sse_decode_auth_info(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_endpoint = sse_decode_String(deserializer);
    var var_userId = sse_decode_String(deserializer);
    var var_avatar = sse_decode_String(deserializer);
    var var_name = sse_decode_String(deserializer);
    var var_token = sse_decode_String(deserializer);
    var var_isStaff = sse_decode_bool(deserializer);
    var var_isCrossDomain = sse_decode_bool(deserializer);
    var var_privateExtra = sse_decode_opt_Map_String_String(deserializer);
    return AuthInfo(
        endpoint: var_endpoint,
        userId: var_userId,
        avatar: var_avatar,
        name: var_name,
        token: var_token,
        isStaff: var_isStaff,
        isCrossDomain: var_isCrossDomain,
        privateExtra: var_privateExtra);
  }

  @protected
  bool sse_decode_bool(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8() != 0;
  }

  @protected
  Attachment sse_decode_box_autoadd_attachment(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_attachment(deserializer));
  }

  @protected
  AuthInfo sse_decode_box_autoadd_auth_info(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_auth_info(deserializer));
  }

  @protected
  bool sse_decode_box_autoadd_bool(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_bool(deserializer));
  }

  @protected
  ChatLog sse_decode_box_autoadd_chat_log(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_chat_log(deserializer));
  }

  @protected
  Content sse_decode_box_autoadd_content(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_content(deserializer));
  }

  @protected
  Conversation sse_decode_box_autoadd_conversation(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_conversation(deserializer));
  }

  @protected
  PlatformInt64 sse_decode_box_autoadd_i_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_i_64(deserializer));
  }

  @protected
  TopicNotice sse_decode_box_autoadd_topic_notice(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_topic_notice(deserializer));
  }

  @protected
  User sse_decode_box_autoadd_user(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_user(deserializer));
  }

  @protected
  ChatLog sse_decode_chat_log(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_topicId = sse_decode_String(deserializer);
    var var_id = sse_decode_String(deserializer);
    var var_seq = sse_decode_i_64(deserializer);
    var var_createdAt = sse_decode_String(deserializer);
    var var_senderId = sse_decode_String(deserializer);
    var var_content = sse_decode_content(deserializer);
    var var_read = sse_decode_bool(deserializer);
    var var_recall = sse_decode_bool(deserializer);
    var var_status = sse_decode_chat_log_status(deserializer);
    var var_cachedAt = sse_decode_i_64(deserializer);
    return ChatLog(
        topicId: var_topicId,
        id: var_id,
        seq: var_seq,
        createdAt: var_createdAt,
        senderId: var_senderId,
        content: var_content,
        read: var_read,
        recall: var_recall,
        status: var_status,
        cachedAt: var_cachedAt);
  }

  @protected
  ChatLogStatus sse_decode_chat_log_status(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_32(deserializer);
    return ChatLogStatus.values[inner];
  }

  @protected
  Content sse_decode_content(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_contentType = sse_decode_String(deserializer);
    var var_encrypted = sse_decode_bool(deserializer);
    var var_checksum = sse_decode_u_32(deserializer);
    var var_text = sse_decode_String(deserializer);
    var var_placeholder = sse_decode_String(deserializer);
    var var_thumbnail = sse_decode_String(deserializer);
    var var_duration = sse_decode_String(deserializer);
    var var_size = sse_decode_u_64(deserializer);
    var var_width = sse_decode_f_32(deserializer);
    var var_height = sse_decode_f_32(deserializer);
    var var_mentions = sse_decode_list_String(deserializer);
    var var_mentionAll = sse_decode_bool(deserializer);
    var var_reply = sse_decode_String(deserializer);
    var var_replyContent = sse_decode_opt_String(deserializer);
    var var_createdAt = sse_decode_String(deserializer);
    var var_attachment = sse_decode_opt_box_autoadd_attachment(deserializer);
    var var_extra = sse_decode_opt_Map_String_String(deserializer);
    var var_unreadable = sse_decode_bool(deserializer);
    return Content(
        contentType: var_contentType,
        encrypted: var_encrypted,
        checksum: var_checksum,
        text: var_text,
        placeholder: var_placeholder,
        thumbnail: var_thumbnail,
        duration: var_duration,
        size: var_size,
        width: var_width,
        height: var_height,
        mentions: var_mentions,
        mentionAll: var_mentionAll,
        reply: var_reply,
        replyContent: var_replyContent,
        createdAt: var_createdAt,
        attachment: var_attachment,
        extra: var_extra,
        unreadable: var_unreadable);
  }

  @protected
  Conversation sse_decode_conversation(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_ownerId = sse_decode_String(deserializer);
    var var_topicId = sse_decode_String(deserializer);
    var var_updatedAt = sse_decode_String(deserializer);
    var var_startSeq = sse_decode_i_64(deserializer);
    var var_lastSeq = sse_decode_i_64(deserializer);
    var var_lastReadSeq = sse_decode_i_64(deserializer);
    var var_lastReadAt = sse_decode_opt_String(deserializer);
    var var_multiple = sse_decode_bool(deserializer);
    var var_attendee = sse_decode_String(deserializer);
    var var_members = sse_decode_i_64(deserializer);
    var var_name = sse_decode_String(deserializer);
    var var_icon = sse_decode_String(deserializer);
    var var_sticky = sse_decode_bool(deserializer);
    var var_mute = sse_decode_bool(deserializer);
    var var_source = sse_decode_String(deserializer);
    var var_unread = sse_decode_i_64(deserializer);
    var var_lastSenderId = sse_decode_String(deserializer);
    var var_lastMessage = sse_decode_opt_box_autoadd_content(deserializer);
    var var_lastMessageAt = sse_decode_String(deserializer);
    var var_lastMessageSeq = sse_decode_opt_box_autoadd_i_64(deserializer);
    var var_remark = sse_decode_opt_String(deserializer);
    var var_extra = sse_decode_opt_Map_String_String(deserializer);
    var var_topicExtra = sse_decode_opt_Map_String_String(deserializer);
    var var_topicOwnerId = sse_decode_opt_String(deserializer);
    var var_tags = sse_decode_opt_list_tag(deserializer);
    var var_cachedAt = sse_decode_i_64(deserializer);
    var var_isPartial = sse_decode_bool(deserializer);
    return Conversation(
        ownerId: var_ownerId,
        topicId: var_topicId,
        updatedAt: var_updatedAt,
        startSeq: var_startSeq,
        lastSeq: var_lastSeq,
        lastReadSeq: var_lastReadSeq,
        lastReadAt: var_lastReadAt,
        multiple: var_multiple,
        attendee: var_attendee,
        members: var_members,
        name: var_name,
        icon: var_icon,
        sticky: var_sticky,
        mute: var_mute,
        source: var_source,
        unread: var_unread,
        lastSenderId: var_lastSenderId,
        lastMessage: var_lastMessage,
        lastMessageAt: var_lastMessageAt,
        lastMessageSeq: var_lastMessageSeq,
        remark: var_remark,
        extra: var_extra,
        topicExtra: var_topicExtra,
        topicOwnerId: var_topicOwnerId,
        tags: var_tags,
        cachedAt: var_cachedAt,
        isPartial: var_isPartial);
  }

  @protected
  ConversationUpdateFields sse_decode_conversation_update_fields(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_sticky = sse_decode_opt_box_autoadd_bool(deserializer);
    var var_mute = sse_decode_opt_box_autoadd_bool(deserializer);
    var var_remark = sse_decode_opt_String(deserializer);
    var var_extra = sse_decode_opt_Map_String_String(deserializer);
    var var_tags = sse_decode_opt_list_tag(deserializer);
    return ConversationUpdateFields(
        sticky: var_sticky,
        mute: var_mute,
        remark: var_remark,
        extra: var_extra,
        tags: var_tags);
  }

  @protected
  double sse_decode_f_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getFloat32();
  }

  @protected
  int sse_decode_i_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getInt32();
  }

  @protected
  PlatformInt64 sse_decode_i_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getPlatformInt64();
  }

  @protected
  List<String> sse_decode_list_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <String>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_String(deserializer));
    }
    return ans_;
  }

  @protected
  Uint8List sse_decode_list_prim_u_8_strict(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint8List(len_);
  }

  @protected
  List<(String, String)> sse_decode_list_record_string_string(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <(String, String)>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_record_string_string(deserializer));
    }
    return ans_;
  }

  @protected
  List<Tag> sse_decode_list_tag(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <Tag>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_tag(deserializer));
    }
    return ans_;
  }

  @protected
  List<User> sse_decode_list_user(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <User>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_user(deserializer));
    }
    return ans_;
  }

  @protected
  ListUserResult sse_decode_list_user_result(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_hasMore = sse_decode_bool(deserializer);
    var var_updatedAt = sse_decode_String(deserializer);
    var var_items = sse_decode_list_user(deserializer);
    return ListUserResult(
        hasMore: var_hasMore, updatedAt: var_updatedAt, items: var_items);
  }

  @protected
  Map<String, String>? sse_decode_opt_Map_String_String(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_Map_String_String(deserializer));
    } else {
      return null;
    }
  }

  @protected
  String? sse_decode_opt_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_String(deserializer));
    } else {
      return null;
    }
  }

  @protected
  Attachment? sse_decode_opt_box_autoadd_attachment(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_attachment(deserializer));
    } else {
      return null;
    }
  }

  @protected
  bool? sse_decode_opt_box_autoadd_bool(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_bool(deserializer));
    } else {
      return null;
    }
  }

  @protected
  Content? sse_decode_opt_box_autoadd_content(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_content(deserializer));
    } else {
      return null;
    }
  }

  @protected
  PlatformInt64? sse_decode_opt_box_autoadd_i_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_i_64(deserializer));
    } else {
      return null;
    }
  }

  @protected
  TopicNotice? sse_decode_opt_box_autoadd_topic_notice(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_topic_notice(deserializer));
    } else {
      return null;
    }
  }

  @protected
  List<Tag>? sse_decode_opt_list_tag(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_list_tag(deserializer));
    } else {
      return null;
    }
  }

  @protected
  (String, String) sse_decode_record_string_string(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_String(deserializer);
    var var_field1 = sse_decode_String(deserializer);
    return (var_field0, var_field1);
  }

  @protected
  Tag sse_decode_tag(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_id = sse_decode_String(deserializer);
    var var_tagType = sse_decode_String(deserializer);
    var var_label = sse_decode_String(deserializer);
    return Tag(id: var_id, tagType: var_tagType, label: var_label);
  }

  @protected
  Topic sse_decode_topic(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_id = sse_decode_String(deserializer);
    var var_name = sse_decode_String(deserializer);
    var var_icon = sse_decode_String(deserializer);
    var var_remark = sse_decode_String(deserializer);
    var var_ownerId = sse_decode_String(deserializer);
    var var_attendeeId = sse_decode_String(deserializer);
    var var_admins = sse_decode_list_String(deserializer);
    var var_members = sse_decode_u_32(deserializer);
    var var_lastSeq = sse_decode_i_64(deserializer);
    var var_multiple = sse_decode_bool(deserializer);
    var var_source = sse_decode_String(deserializer);
    var var_private = sse_decode_bool(deserializer);
    var var_createdAt = sse_decode_String(deserializer);
    var var_updatedAt = sse_decode_String(deserializer);
    var var_notice = sse_decode_opt_box_autoadd_topic_notice(deserializer);
    var var_extra = sse_decode_opt_Map_String_String(deserializer);
    var var_silent = sse_decode_bool(deserializer);
    var var_cachedAt = sse_decode_i_64(deserializer);
    return Topic(
        id: var_id,
        name: var_name,
        icon: var_icon,
        remark: var_remark,
        ownerId: var_ownerId,
        attendeeId: var_attendeeId,
        admins: var_admins,
        members: var_members,
        lastSeq: var_lastSeq,
        multiple: var_multiple,
        source: var_source,
        private: var_private,
        createdAt: var_createdAt,
        updatedAt: var_updatedAt,
        notice: var_notice,
        extra: var_extra,
        silent: var_silent,
        cachedAt: var_cachedAt);
  }

  @protected
  TopicKnock sse_decode_topic_knock(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_createdAt = sse_decode_String(deserializer);
    var var_updatedAt = sse_decode_String(deserializer);
    var var_topicId = sse_decode_String(deserializer);
    var var_userId = sse_decode_String(deserializer);
    var var_message = sse_decode_String(deserializer);
    var var_source = sse_decode_String(deserializer);
    var var_status = sse_decode_String(deserializer);
    var var_adminId = sse_decode_String(deserializer);
    return TopicKnock(
        createdAt: var_createdAt,
        updatedAt: var_updatedAt,
        topicId: var_topicId,
        userId: var_userId,
        message: var_message,
        source: var_source,
        status: var_status,
        adminId: var_adminId);
  }

  @protected
  TopicMember sse_decode_topic_member(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_topicId = sse_decode_String(deserializer);
    var var_userId = sse_decode_String(deserializer);
    var var_name = sse_decode_String(deserializer);
    var var_source = sse_decode_String(deserializer);
    var var_silenceAt = sse_decode_opt_String(deserializer);
    var var_joinedAt = sse_decode_String(deserializer);
    var var_updatedAt = sse_decode_String(deserializer);
    var var_extra = sse_decode_opt_Map_String_String(deserializer);
    return TopicMember(
        topicId: var_topicId,
        userId: var_userId,
        name: var_name,
        source: var_source,
        silenceAt: var_silenceAt,
        joinedAt: var_joinedAt,
        updatedAt: var_updatedAt,
        extra: var_extra);
  }

  @protected
  TopicNotice sse_decode_topic_notice(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_text = sse_decode_String(deserializer);
    var var_publisher = sse_decode_String(deserializer);
    var var_updatedAt = sse_decode_String(deserializer);
    return TopicNotice(
        text: var_text, publisher: var_publisher, updatedAt: var_updatedAt);
  }

  @protected
  int sse_decode_u_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint32();
  }

  @protected
  BigInt sse_decode_u_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getBigUint64();
  }

  @protected
  int sse_decode_u_8(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8();
  }

  @protected
  void sse_decode_unit(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  User sse_decode_user(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_userId = sse_decode_String(deserializer);
    var var_name = sse_decode_String(deserializer);
    var var_avatar = sse_decode_String(deserializer);
    var var_publicKey = sse_decode_String(deserializer);
    var var_remark = sse_decode_String(deserializer);
    var var_isContact = sse_decode_bool(deserializer);
    var var_isStar = sse_decode_bool(deserializer);
    var var_isBlocked = sse_decode_bool(deserializer);
    var var_locale = sse_decode_String(deserializer);
    var var_city = sse_decode_String(deserializer);
    var var_country = sse_decode_String(deserializer);
    var var_source = sse_decode_String(deserializer);
    var var_createdAt = sse_decode_String(deserializer);
    var var_gender = sse_decode_String(deserializer);
    var var_memo = sse_decode_String(deserializer);
    var var_extra = sse_decode_opt_Map_String_String(deserializer);
    var var_isStaff = sse_decode_bool(deserializer);
    var var_cachedAt = sse_decode_i_64(deserializer);
    var var_isPartial = sse_decode_bool(deserializer);
    return User(
        userId: var_userId,
        name: var_name,
        avatar: var_avatar,
        publicKey: var_publicKey,
        remark: var_remark,
        isContact: var_isContact,
        isStar: var_isStar,
        isBlocked: var_isBlocked,
        locale: var_locale,
        city: var_city,
        country: var_country,
        source: var_source,
        createdAt: var_createdAt,
        gender: var_gender,
        memo: var_memo,
        extra: var_extra,
        isStaff: var_isStaff,
        cachedAt: var_cachedAt,
        isPartial: var_isPartial);
  }

  @protected
  UserProfile sse_decode_user_profile(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_avatar = sse_decode_String(deserializer);
    var var_gender = sse_decode_String(deserializer);
    var var_city = sse_decode_String(deserializer);
    var var_region = sse_decode_String(deserializer);
    var var_country = sse_decode_String(deserializer);
    var var_privateExtra = sse_decode_opt_Map_String_String(deserializer);
    return UserProfile(
        avatar: var_avatar,
        gender: var_gender,
        city: var_city,
        region: var_region,
        country: var_country,
        privateExtra: var_privateExtra);
  }

  @protected
  BigInt sse_decode_usize(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getBigUint64();
  }

  @protected
  void sse_encode_AnyhowException(
      AnyhowException self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.message, serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerClient(
          Client self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as ClientImpl).frbInternalSseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerContentType(
          ContentType self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as ContentTypeImpl).frbInternalSseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerClient(
          Client self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as ClientImpl).frbInternalSseEncode(move: false), serializer);
  }

  @protected
  void sse_encode_Map_String_String(
      Map<String, String> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_record_string_string(
        self.entries.map((e) => (e.key, e.value)).toList(), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerClient(
          Client self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as ClientImpl).frbInternalSseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerContentType(
          ContentType self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as ContentTypeImpl).frbInternalSseEncode(move: null), serializer);
  }

  @protected
  void sse_encode_String(String self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_prim_u_8_strict(utf8.encoder.convert(self), serializer);
  }

  @protected
  void sse_encode_attachment(Attachment self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.url, serializer);
    sse_encode_i_64(self.size, serializer);
    sse_encode_String(self.thumbnail, serializer);
    sse_encode_String(self.fileName, serializer);
    sse_encode_String(self.filePath, serializer);
    sse_encode_String(self.urlOrData, serializer);
    sse_encode_bool(self.isPrivate, serializer);
    sse_encode_attachment_status(self.status, serializer);
  }

  @protected
  void sse_encode_attachment_status(
      AttachmentStatus self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_auth_info(AuthInfo self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.endpoint, serializer);
    sse_encode_String(self.userId, serializer);
    sse_encode_String(self.avatar, serializer);
    sse_encode_String(self.name, serializer);
    sse_encode_String(self.token, serializer);
    sse_encode_bool(self.isStaff, serializer);
    sse_encode_bool(self.isCrossDomain, serializer);
    sse_encode_opt_Map_String_String(self.privateExtra, serializer);
  }

  @protected
  void sse_encode_bool(bool self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self ? 1 : 0);
  }

  @protected
  void sse_encode_box_autoadd_attachment(
      Attachment self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_attachment(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_auth_info(
      AuthInfo self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_auth_info(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_bool(bool self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_bool(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_chat_log(ChatLog self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_chat_log(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_content(Content self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_content(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_conversation(
      Conversation self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_conversation(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_i_64(
      PlatformInt64 self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_64(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_topic_notice(
      TopicNotice self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_topic_notice(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_user(User self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_user(self, serializer);
  }

  @protected
  void sse_encode_chat_log(ChatLog self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.topicId, serializer);
    sse_encode_String(self.id, serializer);
    sse_encode_i_64(self.seq, serializer);
    sse_encode_String(self.createdAt, serializer);
    sse_encode_String(self.senderId, serializer);
    sse_encode_content(self.content, serializer);
    sse_encode_bool(self.read, serializer);
    sse_encode_bool(self.recall, serializer);
    sse_encode_chat_log_status(self.status, serializer);
    sse_encode_i_64(self.cachedAt, serializer);
  }

  @protected
  void sse_encode_chat_log_status(
      ChatLogStatus self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_content(Content self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.contentType, serializer);
    sse_encode_bool(self.encrypted, serializer);
    sse_encode_u_32(self.checksum, serializer);
    sse_encode_String(self.text, serializer);
    sse_encode_String(self.placeholder, serializer);
    sse_encode_String(self.thumbnail, serializer);
    sse_encode_String(self.duration, serializer);
    sse_encode_u_64(self.size, serializer);
    sse_encode_f_32(self.width, serializer);
    sse_encode_f_32(self.height, serializer);
    sse_encode_list_String(self.mentions, serializer);
    sse_encode_bool(self.mentionAll, serializer);
    sse_encode_String(self.reply, serializer);
    sse_encode_opt_String(self.replyContent, serializer);
    sse_encode_String(self.createdAt, serializer);
    sse_encode_opt_box_autoadd_attachment(self.attachment, serializer);
    sse_encode_opt_Map_String_String(self.extra, serializer);
    sse_encode_bool(self.unreadable, serializer);
  }

  @protected
  void sse_encode_conversation(Conversation self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.ownerId, serializer);
    sse_encode_String(self.topicId, serializer);
    sse_encode_String(self.updatedAt, serializer);
    sse_encode_i_64(self.startSeq, serializer);
    sse_encode_i_64(self.lastSeq, serializer);
    sse_encode_i_64(self.lastReadSeq, serializer);
    sse_encode_opt_String(self.lastReadAt, serializer);
    sse_encode_bool(self.multiple, serializer);
    sse_encode_String(self.attendee, serializer);
    sse_encode_i_64(self.members, serializer);
    sse_encode_String(self.name, serializer);
    sse_encode_String(self.icon, serializer);
    sse_encode_bool(self.sticky, serializer);
    sse_encode_bool(self.mute, serializer);
    sse_encode_String(self.source, serializer);
    sse_encode_i_64(self.unread, serializer);
    sse_encode_String(self.lastSenderId, serializer);
    sse_encode_opt_box_autoadd_content(self.lastMessage, serializer);
    sse_encode_String(self.lastMessageAt, serializer);
    sse_encode_opt_box_autoadd_i_64(self.lastMessageSeq, serializer);
    sse_encode_opt_String(self.remark, serializer);
    sse_encode_opt_Map_String_String(self.extra, serializer);
    sse_encode_opt_Map_String_String(self.topicExtra, serializer);
    sse_encode_opt_String(self.topicOwnerId, serializer);
    sse_encode_opt_list_tag(self.tags, serializer);
    sse_encode_i_64(self.cachedAt, serializer);
    sse_encode_bool(self.isPartial, serializer);
  }

  @protected
  void sse_encode_conversation_update_fields(
      ConversationUpdateFields self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_opt_box_autoadd_bool(self.sticky, serializer);
    sse_encode_opt_box_autoadd_bool(self.mute, serializer);
    sse_encode_opt_String(self.remark, serializer);
    sse_encode_opt_Map_String_String(self.extra, serializer);
    sse_encode_opt_list_tag(self.tags, serializer);
  }

  @protected
  void sse_encode_f_32(double self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putFloat32(self);
  }

  @protected
  void sse_encode_i_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putInt32(self);
  }

  @protected
  void sse_encode_i_64(PlatformInt64 self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putPlatformInt64(self);
  }

  @protected
  void sse_encode_list_String(List<String> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_String(item, serializer);
    }
  }

  @protected
  void sse_encode_list_prim_u_8_strict(
      Uint8List self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer.putUint8List(self);
  }

  @protected
  void sse_encode_list_record_string_string(
      List<(String, String)> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_record_string_string(item, serializer);
    }
  }

  @protected
  void sse_encode_list_tag(List<Tag> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_tag(item, serializer);
    }
  }

  @protected
  void sse_encode_list_user(List<User> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_user(item, serializer);
    }
  }

  @protected
  void sse_encode_list_user_result(
      ListUserResult self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_bool(self.hasMore, serializer);
    sse_encode_String(self.updatedAt, serializer);
    sse_encode_list_user(self.items, serializer);
  }

  @protected
  void sse_encode_opt_Map_String_String(
      Map<String, String>? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_Map_String_String(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_String(String? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_String(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_attachment(
      Attachment? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_attachment(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_bool(bool? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_bool(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_content(
      Content? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_content(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_i_64(
      PlatformInt64? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_i_64(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_topic_notice(
      TopicNotice? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_topic_notice(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_list_tag(List<Tag>? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_list_tag(self, serializer);
    }
  }

  @protected
  void sse_encode_record_string_string(
      (String, String) self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.$1, serializer);
    sse_encode_String(self.$2, serializer);
  }

  @protected
  void sse_encode_tag(Tag self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.id, serializer);
    sse_encode_String(self.tagType, serializer);
    sse_encode_String(self.label, serializer);
  }

  @protected
  void sse_encode_topic(Topic self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.id, serializer);
    sse_encode_String(self.name, serializer);
    sse_encode_String(self.icon, serializer);
    sse_encode_String(self.remark, serializer);
    sse_encode_String(self.ownerId, serializer);
    sse_encode_String(self.attendeeId, serializer);
    sse_encode_list_String(self.admins, serializer);
    sse_encode_u_32(self.members, serializer);
    sse_encode_i_64(self.lastSeq, serializer);
    sse_encode_bool(self.multiple, serializer);
    sse_encode_String(self.source, serializer);
    sse_encode_bool(self.private, serializer);
    sse_encode_String(self.createdAt, serializer);
    sse_encode_String(self.updatedAt, serializer);
    sse_encode_opt_box_autoadd_topic_notice(self.notice, serializer);
    sse_encode_opt_Map_String_String(self.extra, serializer);
    sse_encode_bool(self.silent, serializer);
    sse_encode_i_64(self.cachedAt, serializer);
  }

  @protected
  void sse_encode_topic_knock(TopicKnock self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.createdAt, serializer);
    sse_encode_String(self.updatedAt, serializer);
    sse_encode_String(self.topicId, serializer);
    sse_encode_String(self.userId, serializer);
    sse_encode_String(self.message, serializer);
    sse_encode_String(self.source, serializer);
    sse_encode_String(self.status, serializer);
    sse_encode_String(self.adminId, serializer);
  }

  @protected
  void sse_encode_topic_member(TopicMember self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.topicId, serializer);
    sse_encode_String(self.userId, serializer);
    sse_encode_String(self.name, serializer);
    sse_encode_String(self.source, serializer);
    sse_encode_opt_String(self.silenceAt, serializer);
    sse_encode_String(self.joinedAt, serializer);
    sse_encode_String(self.updatedAt, serializer);
    sse_encode_opt_Map_String_String(self.extra, serializer);
  }

  @protected
  void sse_encode_topic_notice(TopicNotice self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.text, serializer);
    sse_encode_String(self.publisher, serializer);
    sse_encode_String(self.updatedAt, serializer);
  }

  @protected
  void sse_encode_u_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint32(self);
  }

  @protected
  void sse_encode_u_64(BigInt self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putBigUint64(self);
  }

  @protected
  void sse_encode_u_8(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self);
  }

  @protected
  void sse_encode_unit(void self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  void sse_encode_user(User self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.userId, serializer);
    sse_encode_String(self.name, serializer);
    sse_encode_String(self.avatar, serializer);
    sse_encode_String(self.publicKey, serializer);
    sse_encode_String(self.remark, serializer);
    sse_encode_bool(self.isContact, serializer);
    sse_encode_bool(self.isStar, serializer);
    sse_encode_bool(self.isBlocked, serializer);
    sse_encode_String(self.locale, serializer);
    sse_encode_String(self.city, serializer);
    sse_encode_String(self.country, serializer);
    sse_encode_String(self.source, serializer);
    sse_encode_String(self.createdAt, serializer);
    sse_encode_String(self.gender, serializer);
    sse_encode_String(self.memo, serializer);
    sse_encode_opt_Map_String_String(self.extra, serializer);
    sse_encode_bool(self.isStaff, serializer);
    sse_encode_i_64(self.cachedAt, serializer);
    sse_encode_bool(self.isPartial, serializer);
  }

  @protected
  void sse_encode_user_profile(UserProfile self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.avatar, serializer);
    sse_encode_String(self.gender, serializer);
    sse_encode_String(self.city, serializer);
    sse_encode_String(self.region, serializer);
    sse_encode_String(self.country, serializer);
    sse_encode_opt_Map_String_String(self.privateExtra, serializer);
  }

  @protected
  void sse_encode_usize(BigInt self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putBigUint64(self);
  }
}

@sealed
class ClientImpl extends RustOpaque implements Client {
  // Not to be used by end users
  ClientImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  ClientImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_Client,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_Client,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_ClientPtr,
  );

  /// connect immediately if the connection is broken
  Future<void> appActive() =>
      RustLib.instance.api.crateClientClientClientAppActive(
        that: this,
      );

  Future<void> connect() => RustLib.instance.api.crateClientClientClientConnect(
        that: this,
      );

  String get connectionStatus =>
      RustLib.instance.api.crateClientClientClientConnectionStatus(
        that: this,
      );

  set keepalive(int secs) => RustLib.instance.api
      .crateClientClientClientSetKeepalive(that: this, secs: secs);

  Future<void> shutdown() =>
      RustLib.instance.api.crateClientClientClientShutdown(
        that: this,
      );
}

@sealed
class ContentTypeImpl extends RustOpaque implements ContentType {
  // Not to be used by end users
  ContentTypeImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  ContentTypeImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_ContentType,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_ContentType,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_ContentTypePtr,
  );
}
