// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.6.0.

#![allow(
    non_camel_case_types,
    unused,
    non_snake_case,
    clippy::needless_return,
    clippy::redundant_closure_call,
    clippy::redundant_closure,
    clippy::useless_conversion,
    clippy::unit_arg,
    clippy::unused_unit,
    clippy::double_parens,
    clippy::let_and_return,
    clippy::too_many_arguments,
    clippy::match_single_binding,
    clippy::clone_on_copy,
    clippy::let_unit_value,
    clippy::deref_addrof,
    clippy::explicit_auto_deref,
    clippy::borrow_deref_ref,
    clippy::needless_borrow
)]

// Section: imports

use crate::client::client::*;
use flutter_rust_bridge::for_generated::byteorder::{NativeEndian, ReadBytesExt, WriteBytesExt};
use flutter_rust_bridge::for_generated::{transform_result_dco, Lifetimeable, Lockable};
use flutter_rust_bridge::{Handler, IntoIntoDart};
use restsend_sdk::models::chat_log::*;
use restsend_sdk::storage::StoreModel;

// Section: boilerplate

flutter_rust_bridge::frb_generated_boilerplate!(
    default_stream_sink_codec = SseCodec,
    default_rust_opaque = RustOpaqueMoi,
    default_rust_auto_opaque = RustAutoOpaqueMoi,
);
pub(crate) const FLUTTER_RUST_BRIDGE_CODEGEN_VERSION: &str = "2.6.0";
pub(crate) const FLUTTER_RUST_BRIDGE_CODEGEN_CONTENT_HASH: i32 = 1101477557;

// Section: executor

flutter_rust_bridge::frb_generated_default_handler!();

// Section: wire_funcs

fn wire__crate__client__client__Client_app_active_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Client_app_active",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <RustOpaqueMoi<
                flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Client>,
            >>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, ()>((move || {
                    let mut api_that_guard = None;
                    let decode_indices_ =
                        flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![
                            flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                &api_that, 0, false,
                            ),
                        ]);
                    for i in decode_indices_ {
                        match i {
                            0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),
                            _ => unreachable!(),
                        }
                    }
                    let api_that_guard = api_that_guard.unwrap();
                    let output_ok = Result::<_, ()>::Ok({
                        crate::client::client::Client::app_active(&*api_that_guard);
                    })?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__crate__client__client__Client_connect_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Client_connect",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <RustOpaqueMoi<
                flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Client>,
            >>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| async move {
                transform_result_sse::<_, ()>(
                    (move || async move {
                        let mut api_that_guard = None;
                        let decode_indices_ =
                            flutter_rust_bridge::for_generated::lockable_compute_decode_order(
                                vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                    &api_that, 0, false,
                                )],
                            );
                        for i in decode_indices_ {
                            match i {
                                0 => {
                                    api_that_guard =
                                        Some(api_that.lockable_decode_async_ref().await)
                                }
                                _ => unreachable!(),
                            }
                        }
                        let api_that_guard = api_that_guard.unwrap();
                        let output_ok = Result::<_, ()>::Ok({
                            crate::client::client::Client::connect(&*api_that_guard).await;
                        })?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__client__client__Client_connection_status_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Client_connection_status",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <RustOpaqueMoi<
                flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Client>,
            >>::sse_decode(&mut deserializer);
            deserializer.end();
            transform_result_sse::<_, ()>((move || {
                let mut api_that_guard = None;
                let decode_indices_ =
                    flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![
                        flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                            &api_that, 0, false,
                        ),
                    ]);
                for i in decode_indices_ {
                    match i {
                        0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),
                        _ => unreachable!(),
                    }
                }
                let api_that_guard = api_that_guard.unwrap();
                let output_ok = Result::<_, ()>::Ok(
                    crate::client::client::Client::connection_status(&*api_that_guard),
                )?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__client__client__Client_new_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Client_new",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_info = <restsend_sdk::models::user::AuthInfo>::sse_decode(&mut deserializer);
            let api_root_path = <Option<String>>::sse_decode(&mut deserializer);
            let api_db_name = <Option<String>>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, ()>((move || {
                    let output_ok = Result::<_, ()>::Ok(crate::client::client::Client::new(
                        api_info,
                        api_root_path,
                        api_db_name,
                    ))?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__crate__client__client__Client_set_keepalive_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Client_set_keepalive(dart_style=keepalive)",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <RustOpaqueMoi<
                flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Client>,
            >>::sse_decode(&mut deserializer);
            let api_secs = <u32>::sse_decode(&mut deserializer);
            deserializer.end();
            transform_result_sse::<_, ()>((move || {
                let mut api_that_guard = None;
                let decode_indices_ =
                    flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![
                        flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                            &api_that, 0, false,
                        ),
                    ]);
                for i in decode_indices_ {
                    match i {
                        0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),
                        _ => unreachable!(),
                    }
                }
                let api_that_guard = api_that_guard.unwrap();
                let output_ok = Result::<_, ()>::Ok({
                    crate::client::client::Client::set_keepalive(&*api_that_guard, api_secs);
                })?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__client__client__Client_shutdown_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Client_shutdown",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <RustOpaqueMoi<
                flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Client>,
            >>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| async move {
                transform_result_sse::<_, ()>(
                    (move || async move {
                        let mut api_that_guard = None;
                        let decode_indices_ =
                            flutter_rust_bridge::for_generated::lockable_compute_decode_order(
                                vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                    &api_that, 0, false,
                                )],
                            );
                        for i in decode_indices_ {
                            match i {
                                0 => {
                                    api_that_guard =
                                        Some(api_that.lockable_decode_async_ref().await)
                                }
                                _ => unreachable!(),
                            }
                        }
                        let api_that_guard = api_that_guard.unwrap();
                        let output_ok = Result::<_, ()>::Ok({
                            crate::client::client::Client::shutdown(&*api_that_guard).await;
                        })?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__restsend_sdk__models__chat_log__attachment_default_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "attachment_default",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, ()>((move || {
                    let output_ok =
                        Result::<_, ()>::Ok(restsend_sdk::models::chat_log::Attachment::default())?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__restsend_sdk__models__chat_log__attachment_from_local_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "attachment_from_local",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_file_name = <String>::sse_decode(&mut deserializer);
            let api_file_path = <String>::sse_decode(&mut deserializer);
            let api_is_private = <bool>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, ()>((move || {
                    let output_ok = Result::<_, ()>::Ok(
                        restsend_sdk::models::chat_log::Attachment::from_local(
                            &api_file_name,
                            &api_file_path,
                            api_is_private,
                        ),
                    )?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__restsend_sdk__models__chat_log__attachment_from_url_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "attachment_from_url",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_url = <String>::sse_decode(&mut deserializer);
            let api_is_private = <bool>::sse_decode(&mut deserializer);
            let api_size = <i64>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, ()>((move || {
                    let output_ok =
                        Result::<_, ()>::Ok(restsend_sdk::models::chat_log::Attachment::from_url(
                            &api_url,
                            api_is_private,
                            api_size,
                        ))?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__restsend_sdk__models__chat_log__attachment_status_default_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "attachment_status_default",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, ()>((move || {
                    let output_ok = Result::<_, ()>::Ok(
                        restsend_sdk::models::chat_log::AttachmentStatus::default(),
                    )?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__restsend_sdk__models__user__auth_info_default_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "auth_info_default",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, ()>((move || {
                    let output_ok =
                        Result::<_, ()>::Ok(restsend_sdk::models::user::AuthInfo::default())?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__restsend_sdk__models__user__auth_info_new_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "auth_info_new",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_endpoint = <String>::sse_decode(&mut deserializer);
            let api_user_id = <String>::sse_decode(&mut deserializer);
            let api_token = <String>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, ()>((move || {
                    let output_ok =
                        Result::<_, ()>::Ok(restsend_sdk::models::user::AuthInfo::new(
                            &api_endpoint,
                            &api_user_id,
                            &api_token,
                        ))?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__restsend_sdk__models__chat_log__chat_log_default_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "chat_log_default",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, ()>((move || {
                    let output_ok =
                        Result::<_, ()>::Ok(restsend_sdk::models::chat_log::ChatLog::default())?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__restsend_sdk__models__chat_log__chat_log_new_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "chat_log_new",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_topic_id = <String>::sse_decode(&mut deserializer);
            let api_id = <String>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, ()>((move || {
                    let output_ok = Result::<_, ()>::Ok(
                        restsend_sdk::models::chat_log::ChatLog::new(&api_topic_id, &api_id),
                    )?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__restsend_sdk__models__chat_log__chat_log_sort_key_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "chat_log_sort_key",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <restsend_sdk::models::chat_log::ChatLog>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, ()>((move || {
                    let output_ok = Result::<_, ()>::Ok(
                        restsend_sdk::models::chat_log::ChatLog::sort_key(&api_that),
                    )?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__restsend_sdk__models__chat_log__chat_log_status_default_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "chat_log_status_default",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, ()>((move || {
                    let output_ok = Result::<_, ()>::Ok(
                        restsend_sdk::models::chat_log::ChatLogStatus::default(),
                    )?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__restsend_sdk__models__chat_log__content_default_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "content_default",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, ()>((move || {
                    let output_ok =
                        Result::<_, ()>::Ok(restsend_sdk::models::chat_log::Content::default())?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__restsend_sdk__models__chat_log__content_new_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "content_new",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_content_type = <ContentType>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, ()>((move || {
                    let output_ok = Result::<_, ()>::Ok(
                        restsend_sdk::models::chat_log::Content::new(api_content_type),
                    )?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__restsend_sdk__models__chat_log__content_new_text_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "content_new_text",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_content_type = <ContentType>::sse_decode(&mut deserializer);
            let api_text = <String>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, ()>((move || {
                    let output_ok =
                        Result::<_, ()>::Ok(restsend_sdk::models::chat_log::Content::new_text(
                            api_content_type,
                            &api_text,
                        ))?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__restsend_sdk__models__conversation__conversation_default_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "conversation_default",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, ()>((move || {
                    let output_ok = Result::<_, ()>::Ok(
                        restsend_sdk::models::conversation::Conversation::default(),
                    )?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__restsend_sdk__models__conversation__conversation_new_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "conversation_new",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_topic_id = <String>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, ()>((move || {
                    let output_ok = Result::<_, ()>::Ok(
                        restsend_sdk::models::conversation::Conversation::new(&api_topic_id),
                    )?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__restsend_sdk__models__conversation__conversation_sort_key_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "conversation_sort_key",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that =
                <restsend_sdk::models::conversation::Conversation>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, ()>((move || {
                    let output_ok = Result::<_, ()>::Ok(
                        restsend_sdk::models::conversation::Conversation::sort_key(&api_that),
                    )?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__restsend_sdk__models__conversation__conversation_update_fields_default_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "conversation_update_fields_default",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, ()>((move || {
                    let output_ok = Result::<_, ()>::Ok(
                        restsend_sdk::models::conversation::ConversationUpdateFields::default(),
                    )?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__crate__client__account__hello_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "hello",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
            move |context| async move {
                transform_result_sse::<_, flutter_rust_bridge::for_generated::anyhow::Error>(
                    (move || async move {
                        let output_ok = crate::client::account::hello().await?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__client__client__init_app_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "init_app",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, ()>((move || {
                    let output_ok = Result::<_, ()>::Ok({
                        crate::client::client::init_app();
                    })?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__restsend_sdk__models__list_user_result_default_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "list_user_result_default",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, ()>((move || {
                    let output_ok =
                        Result::<_, ()>::Ok(restsend_sdk::models::ListUserResult::default())?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__crate__client__account__logout_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "logout",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_endpoint = <String>::sse_decode(&mut deserializer);
            let api_token = <String>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| async move {
                transform_result_sse::<_, flutter_rust_bridge::for_generated::anyhow::Error>(
                    (move || async move {
                        let output_ok =
                            crate::client::account::logout(api_endpoint, api_token).await?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__client__client__set_logging_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "set_logging",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_level = <String>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, ()>((move || {
                    let output_ok = Result::<_, ()>::Ok({
                        crate::client::client::set_logging(api_level);
                    })?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__crate__client__account__signin_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "signin",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_endpoint = <String>::sse_decode(&mut deserializer);
            let api_user_id = <String>::sse_decode(&mut deserializer);
            let api_password = <Option<String>>::sse_decode(&mut deserializer);
            let api_token = <Option<String>>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| async move {
                transform_result_sse::<_, flutter_rust_bridge::for_generated::anyhow::Error>(
                    (move || async move {
                        let output_ok = crate::client::account::signin(
                            api_endpoint,
                            api_user_id,
                            api_password,
                            api_token,
                        )
                        .await?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__client__account__signup_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "signup",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_endpoint = <String>::sse_decode(&mut deserializer);
            let api_user_id = <String>::sse_decode(&mut deserializer);
            let api_password = <String>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| async move {
                transform_result_sse::<_, flutter_rust_bridge::for_generated::anyhow::Error>(
                    (move || async move {
                        let output_ok =
                            crate::client::account::signup(api_endpoint, api_user_id, api_password)
                                .await?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__restsend_sdk__models__conversation__tag_default_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "tag_default",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, ()>((move || {
                    let output_ok =
                        Result::<_, ()>::Ok(restsend_sdk::models::conversation::Tag::default())?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__restsend_sdk__models__topic__topic_default_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "topic_default",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, ()>((move || {
                    let output_ok =
                        Result::<_, ()>::Ok(restsend_sdk::models::topic::Topic::default())?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__restsend_sdk__models__topic_knock_new_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "topic_knock_new",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_topic_id = <String>::sse_decode(&mut deserializer);
            let api_user_id = <String>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, ()>((move || {
                    let output_ok = Result::<_, ()>::Ok(restsend_sdk::models::TopicKnock::new(
                        &api_topic_id,
                        &api_user_id,
                    ))?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__restsend_sdk__models__topic_member__topic_member_default_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "topic_member_default",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, ()>((move || {
                    let output_ok = Result::<_, ()>::Ok(
                        restsend_sdk::models::topic_member::TopicMember::default(),
                    )?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__restsend_sdk__models__topic_member__topic_member_new_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "topic_member_new",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_topic_id = <String>::sse_decode(&mut deserializer);
            let api_user_id = <String>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, ()>((move || {
                    let output_ok =
                        Result::<_, ()>::Ok(restsend_sdk::models::topic_member::TopicMember::new(
                            &api_topic_id,
                            &api_user_id,
                        ))?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__restsend_sdk__models__topic__topic_new_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "topic_new",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_topic_id = <String>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, ()>((move || {
                    let output_ok = Result::<_, ()>::Ok(restsend_sdk::models::topic::Topic::new(
                        &api_topic_id,
                    ))?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__restsend_sdk__models__topic__topic_notice_new_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "topic_notice_new",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_text = <String>::sse_decode(&mut deserializer);
            let api_publisher = <String>::sse_decode(&mut deserializer);
            let api_updated_at = <String>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, ()>((move || {
                    let output_ok =
                        Result::<_, ()>::Ok(restsend_sdk::models::topic::TopicNotice::new(
                            &api_text,
                            &api_publisher,
                            &api_updated_at,
                        ))?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__restsend_sdk__models__user__user_default_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "user_default",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, ()>((move || {
                    let output_ok =
                        Result::<_, ()>::Ok(restsend_sdk::models::user::User::default())?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__restsend_sdk__models__user__user_merge_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "user_merge",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <restsend_sdk::models::user::User>::sse_decode(&mut deserializer);
            let api_user = <restsend_sdk::models::user::User>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, ()>((move || {
                    let output_ok = Result::<_, ()>::Ok(restsend_sdk::models::user::User::merge(
                        &api_that, &api_user,
                    ))?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__restsend_sdk__models__user__user_new_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "user_new",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_user_id = <String>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, ()>((move || {
                    let output_ok =
                        Result::<_, ()>::Ok(restsend_sdk::models::user::User::new(&api_user_id))?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__restsend_sdk__models__user__user_profile_default_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "user_profile_default",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, ()>((move || {
                    let output_ok =
                        Result::<_, ()>::Ok(restsend_sdk::models::user::UserProfile::default())?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__restsend_sdk__models__user__user_sort_key_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "user_sort_key",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <restsend_sdk::models::user::User>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, ()>((move || {
                    let output_ok =
                        Result::<_, ()>::Ok(restsend_sdk::models::user::User::sort_key(&api_that))?;
                    Ok(output_ok)
                })())
            }
        },
    )
}

// Section: static_checks

#[allow(clippy::unnecessary_literal_unwrap)]
const _: fn() = || {
    {
        let Attachment = None::<restsend_sdk::models::chat_log::Attachment>.unwrap();
        let _: String = Attachment.url;
        let _: i64 = Attachment.size;
        let _: String = Attachment.thumbnail;
        let _: String = Attachment.file_name;
        let _: String = Attachment.file_path;
        let _: String = Attachment.url_or_data;
        let _: bool = Attachment.is_private;
        let _: restsend_sdk::models::chat_log::AttachmentStatus = Attachment.status;
    }
    {
        let AuthInfo = None::<restsend_sdk::models::user::AuthInfo>.unwrap();
        let _: String = AuthInfo.endpoint;
        let _: String = AuthInfo.user_id;
        let _: String = AuthInfo.avatar;
        let _: String = AuthInfo.name;
        let _: String = AuthInfo.token;
        let _: bool = AuthInfo.is_staff;
        let _: bool = AuthInfo.is_cross_domain;
        let _: Option<std::collections::HashMap<String, String>> = AuthInfo.private_extra;
    }
    {
        let ChatLog = None::<restsend_sdk::models::chat_log::ChatLog>.unwrap();
        let _: String = ChatLog.topic_id;
        let _: String = ChatLog.id;
        let _: i64 = ChatLog.seq;
        let _: String = ChatLog.created_at;
        let _: String = ChatLog.sender_id;
        let _: restsend_sdk::models::chat_log::Content = ChatLog.content;
        let _: bool = ChatLog.read;
        let _: bool = ChatLog.recall;
        let _: restsend_sdk::models::chat_log::ChatLogStatus = ChatLog.status;
        let _: i64 = ChatLog.cached_at;
    }
    {
        let Content = None::<restsend_sdk::models::chat_log::Content>.unwrap();
        let _: String = Content.content_type;
        let _: bool = Content.encrypted;
        let _: u32 = Content.checksum;
        let _: String = Content.text;
        let _: String = Content.placeholder;
        let _: String = Content.thumbnail;
        let _: String = Content.duration;
        let _: u64 = Content.size;
        let _: f32 = Content.width;
        let _: f32 = Content.height;
        let _: Vec<String> = Content.mentions;
        let _: bool = Content.mention_all;
        let _: String = Content.reply;
        let _: Option<String> = Content.reply_content;
        let _: String = Content.created_at;
        let _: Option<restsend_sdk::models::chat_log::Attachment> = Content.attachment;
        let _: Option<std::collections::HashMap<String, String>> = Content.extra;
        let _: bool = Content.unreadable;
    }
    {
        let Conversation = None::<restsend_sdk::models::conversation::Conversation>.unwrap();
        let _: String = Conversation.owner_id;
        let _: String = Conversation.topic_id;
        let _: String = Conversation.updated_at;
        let _: i64 = Conversation.start_seq;
        let _: i64 = Conversation.last_seq;
        let _: i64 = Conversation.last_read_seq;
        let _: Option<String> = Conversation.last_read_at;
        let _: bool = Conversation.multiple;
        let _: String = Conversation.attendee;
        let _: i64 = Conversation.members;
        let _: String = Conversation.name;
        let _: String = Conversation.icon;
        let _: bool = Conversation.sticky;
        let _: bool = Conversation.mute;
        let _: String = Conversation.source;
        let _: i64 = Conversation.unread;
        let _: String = Conversation.last_sender_id;
        let _: Option<restsend_sdk::models::chat_log::Content> = Conversation.last_message;
        let _: String = Conversation.last_message_at;
        let _: Option<i64> = Conversation.last_message_seq;
        let _: Option<String> = Conversation.remark;
        let _: Option<std::collections::HashMap<String, String>> = Conversation.extra;
        let _: Option<std::collections::HashMap<String, String>> = Conversation.topic_extra;
        let _: Option<String> = Conversation.topic_owner_id;
        let _: Option<Vec<restsend_sdk::models::conversation::Tag>> = Conversation.tags;
        let _: i64 = Conversation.cached_at;
        let _: bool = Conversation.is_partial;
    }
    {
        let ConversationUpdateFields =
            None::<restsend_sdk::models::conversation::ConversationUpdateFields>.unwrap();
        let _: Option<bool> = ConversationUpdateFields.sticky;
        let _: Option<bool> = ConversationUpdateFields.mute;
        let _: Option<String> = ConversationUpdateFields.remark;
        let _: Option<std::collections::HashMap<String, String>> = ConversationUpdateFields.extra;
        let _: Option<Vec<restsend_sdk::models::conversation::Tag>> = ConversationUpdateFields.tags;
    }
    {
        let ListUserResult = None::<restsend_sdk::models::ListUserResult>.unwrap();
        let _: bool = ListUserResult.has_more;
        let _: String = ListUserResult.updated_at;
        let _: Vec<restsend_sdk::models::user::User> = ListUserResult.items;
    }
    {
        let Tag = None::<restsend_sdk::models::conversation::Tag>.unwrap();
        let _: String = Tag.id;
        let _: String = Tag.tag_type;
        let _: String = Tag.label;
    }
    {
        let Topic = None::<restsend_sdk::models::topic::Topic>.unwrap();
        let _: String = Topic.id;
        let _: String = Topic.name;
        let _: String = Topic.icon;
        let _: String = Topic.remark;
        let _: String = Topic.owner_id;
        let _: String = Topic.attendee_id;
        let _: Vec<String> = Topic.admins;
        let _: u32 = Topic.members;
        let _: i64 = Topic.last_seq;
        let _: bool = Topic.multiple;
        let _: String = Topic.source;
        let _: bool = Topic.private;
        let _: String = Topic.created_at;
        let _: String = Topic.updated_at;
        let _: Option<restsend_sdk::models::topic::TopicNotice> = Topic.notice;
        let _: Option<std::collections::HashMap<String, String>> = Topic.extra;
        let _: bool = Topic.silent;
        let _: i64 = Topic.cached_at;
    }
    {
        let TopicKnock = None::<restsend_sdk::models::TopicKnock>.unwrap();
        let _: String = TopicKnock.created_at;
        let _: String = TopicKnock.updated_at;
        let _: String = TopicKnock.topic_id;
        let _: String = TopicKnock.user_id;
        let _: String = TopicKnock.message;
        let _: String = TopicKnock.source;
        let _: String = TopicKnock.status;
        let _: String = TopicKnock.admin_id;
    }
    {
        let TopicMember = None::<restsend_sdk::models::topic_member::TopicMember>.unwrap();
        let _: String = TopicMember.topic_id;
        let _: String = TopicMember.user_id;
        let _: String = TopicMember.name;
        let _: String = TopicMember.source;
        let _: Option<String> = TopicMember.silence_at;
        let _: String = TopicMember.joined_at;
        let _: String = TopicMember.updated_at;
        let _: Option<std::collections::HashMap<String, String>> = TopicMember.extra;
    }
    {
        let TopicNotice = None::<restsend_sdk::models::topic::TopicNotice>.unwrap();
        let _: String = TopicNotice.text;
        let _: String = TopicNotice.publisher;
        let _: String = TopicNotice.updated_at;
    }
    {
        let User = None::<restsend_sdk::models::user::User>.unwrap();
        let _: String = User.user_id;
        let _: String = User.name;
        let _: String = User.avatar;
        let _: String = User.public_key;
        let _: String = User.remark;
        let _: bool = User.is_contact;
        let _: bool = User.is_star;
        let _: bool = User.is_blocked;
        let _: String = User.locale;
        let _: String = User.city;
        let _: String = User.country;
        let _: String = User.source;
        let _: String = User.created_at;
        let _: String = User.gender;
        let _: String = User.memo;
        let _: Option<std::collections::HashMap<String, String>> = User.extra;
        let _: bool = User.is_staff;
        let _: i64 = User.cached_at;
        let _: bool = User.is_partial;
    }
    {
        let UserProfile = None::<restsend_sdk::models::user::UserProfile>.unwrap();
        let _: String = UserProfile.avatar;
        let _: String = UserProfile.gender;
        let _: String = UserProfile.city;
        let _: String = UserProfile.region;
        let _: String = UserProfile.country;
        let _: Option<std::collections::HashMap<String, String>> = UserProfile.private_extra;
    }
};

// Section: related_funcs

flutter_rust_bridge::frb_generated_moi_arc_impl_value!(
    flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Client>
);
flutter_rust_bridge::frb_generated_moi_arc_impl_value!(
    flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ContentType>
);

// Section: dart2rust

impl SseDecode for flutter_rust_bridge::for_generated::anyhow::Error {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <String>::sse_decode(deserializer);
        return flutter_rust_bridge::for_generated::anyhow::anyhow!("{}", inner);
    }
}

impl SseDecode for Client {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <RustOpaqueMoi<
            flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Client>,
        >>::sse_decode(deserializer);
        return flutter_rust_bridge::for_generated::rust_auto_opaque_decode_owned(inner);
    }
}

impl SseDecode for ContentType {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <RustOpaqueMoi<
            flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ContentType>,
        >>::sse_decode(deserializer);
        return flutter_rust_bridge::for_generated::rust_auto_opaque_decode_owned(inner);
    }
}

impl SseDecode for std::collections::HashMap<String, String> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <Vec<(String, String)>>::sse_decode(deserializer);
        return inner.into_iter().collect();
    }
}

impl SseDecode for RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Client>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return decode_rust_opaque_moi(inner);
    }
}

impl SseDecode
    for RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ContentType>>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return decode_rust_opaque_moi(inner);
    }
}

impl SseDecode for String {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <Vec<u8>>::sse_decode(deserializer);
        return String::from_utf8(inner).unwrap();
    }
}

impl SseDecode for restsend_sdk::models::chat_log::Attachment {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_url = <String>::sse_decode(deserializer);
        let mut var_size = <i64>::sse_decode(deserializer);
        let mut var_thumbnail = <String>::sse_decode(deserializer);
        let mut var_fileName = <String>::sse_decode(deserializer);
        let mut var_filePath = <String>::sse_decode(deserializer);
        let mut var_urlOrData = <String>::sse_decode(deserializer);
        let mut var_isPrivate = <bool>::sse_decode(deserializer);
        let mut var_status =
            <restsend_sdk::models::chat_log::AttachmentStatus>::sse_decode(deserializer);
        return restsend_sdk::models::chat_log::Attachment {
            url: var_url,
            size: var_size,
            thumbnail: var_thumbnail,
            file_name: var_fileName,
            file_path: var_filePath,
            url_or_data: var_urlOrData,
            is_private: var_isPrivate,
            status: var_status,
        };
    }
}

impl SseDecode for restsend_sdk::models::chat_log::AttachmentStatus {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <i32>::sse_decode(deserializer);
        return match inner {
            0 => restsend_sdk::models::chat_log::AttachmentStatus::ToUpload,
            1 => restsend_sdk::models::chat_log::AttachmentStatus::ToDownload,
            2 => restsend_sdk::models::chat_log::AttachmentStatus::Uploading,
            3 => restsend_sdk::models::chat_log::AttachmentStatus::Downloading,
            4 => restsend_sdk::models::chat_log::AttachmentStatus::Paused,
            5 => restsend_sdk::models::chat_log::AttachmentStatus::Done,
            6 => restsend_sdk::models::chat_log::AttachmentStatus::Failed,
            _ => unreachable!("Invalid variant for AttachmentStatus: {}", inner),
        };
    }
}

impl SseDecode for restsend_sdk::models::user::AuthInfo {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_endpoint = <String>::sse_decode(deserializer);
        let mut var_userId = <String>::sse_decode(deserializer);
        let mut var_avatar = <String>::sse_decode(deserializer);
        let mut var_name = <String>::sse_decode(deserializer);
        let mut var_token = <String>::sse_decode(deserializer);
        let mut var_isStaff = <bool>::sse_decode(deserializer);
        let mut var_isCrossDomain = <bool>::sse_decode(deserializer);
        let mut var_privateExtra =
            <Option<std::collections::HashMap<String, String>>>::sse_decode(deserializer);
        return restsend_sdk::models::user::AuthInfo {
            endpoint: var_endpoint,
            user_id: var_userId,
            avatar: var_avatar,
            name: var_name,
            token: var_token,
            is_staff: var_isStaff,
            is_cross_domain: var_isCrossDomain,
            private_extra: var_privateExtra,
        };
    }
}

impl SseDecode for bool {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_u8().unwrap() != 0
    }
}

impl SseDecode for restsend_sdk::models::chat_log::ChatLog {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_topicId = <String>::sse_decode(deserializer);
        let mut var_id = <String>::sse_decode(deserializer);
        let mut var_seq = <i64>::sse_decode(deserializer);
        let mut var_createdAt = <String>::sse_decode(deserializer);
        let mut var_senderId = <String>::sse_decode(deserializer);
        let mut var_content = <restsend_sdk::models::chat_log::Content>::sse_decode(deserializer);
        let mut var_read = <bool>::sse_decode(deserializer);
        let mut var_recall = <bool>::sse_decode(deserializer);
        let mut var_status =
            <restsend_sdk::models::chat_log::ChatLogStatus>::sse_decode(deserializer);
        let mut var_cachedAt = <i64>::sse_decode(deserializer);
        return restsend_sdk::models::chat_log::ChatLog {
            topic_id: var_topicId,
            id: var_id,
            seq: var_seq,
            created_at: var_createdAt,
            sender_id: var_senderId,
            content: var_content,
            read: var_read,
            recall: var_recall,
            status: var_status,
            cached_at: var_cachedAt,
        };
    }
}

impl SseDecode for restsend_sdk::models::chat_log::ChatLogStatus {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <i32>::sse_decode(deserializer);
        return match inner {
            0 => restsend_sdk::models::chat_log::ChatLogStatus::Uploading,
            1 => restsend_sdk::models::chat_log::ChatLogStatus::Sending,
            2 => restsend_sdk::models::chat_log::ChatLogStatus::Sent,
            3 => restsend_sdk::models::chat_log::ChatLogStatus::Downloading,
            4 => restsend_sdk::models::chat_log::ChatLogStatus::Received,
            5 => restsend_sdk::models::chat_log::ChatLogStatus::Read,
            6 => restsend_sdk::models::chat_log::ChatLogStatus::SendFailed,
            _ => unreachable!("Invalid variant for ChatLogStatus: {}", inner),
        };
    }
}

impl SseDecode for restsend_sdk::models::chat_log::Content {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_contentType = <String>::sse_decode(deserializer);
        let mut var_encrypted = <bool>::sse_decode(deserializer);
        let mut var_checksum = <u32>::sse_decode(deserializer);
        let mut var_text = <String>::sse_decode(deserializer);
        let mut var_placeholder = <String>::sse_decode(deserializer);
        let mut var_thumbnail = <String>::sse_decode(deserializer);
        let mut var_duration = <String>::sse_decode(deserializer);
        let mut var_size = <u64>::sse_decode(deserializer);
        let mut var_width = <f32>::sse_decode(deserializer);
        let mut var_height = <f32>::sse_decode(deserializer);
        let mut var_mentions = <Vec<String>>::sse_decode(deserializer);
        let mut var_mentionAll = <bool>::sse_decode(deserializer);
        let mut var_reply = <String>::sse_decode(deserializer);
        let mut var_replyContent = <Option<String>>::sse_decode(deserializer);
        let mut var_createdAt = <String>::sse_decode(deserializer);
        let mut var_attachment =
            <Option<restsend_sdk::models::chat_log::Attachment>>::sse_decode(deserializer);
        let mut var_extra =
            <Option<std::collections::HashMap<String, String>>>::sse_decode(deserializer);
        let mut var_unreadable = <bool>::sse_decode(deserializer);
        return restsend_sdk::models::chat_log::Content {
            content_type: var_contentType,
            encrypted: var_encrypted,
            checksum: var_checksum,
            text: var_text,
            placeholder: var_placeholder,
            thumbnail: var_thumbnail,
            duration: var_duration,
            size: var_size,
            width: var_width,
            height: var_height,
            mentions: var_mentions,
            mention_all: var_mentionAll,
            reply: var_reply,
            reply_content: var_replyContent,
            created_at: var_createdAt,
            attachment: var_attachment,
            extra: var_extra,
            unreadable: var_unreadable,
        };
    }
}

impl SseDecode for restsend_sdk::models::conversation::Conversation {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_ownerId = <String>::sse_decode(deserializer);
        let mut var_topicId = <String>::sse_decode(deserializer);
        let mut var_updatedAt = <String>::sse_decode(deserializer);
        let mut var_startSeq = <i64>::sse_decode(deserializer);
        let mut var_lastSeq = <i64>::sse_decode(deserializer);
        let mut var_lastReadSeq = <i64>::sse_decode(deserializer);
        let mut var_lastReadAt = <Option<String>>::sse_decode(deserializer);
        let mut var_multiple = <bool>::sse_decode(deserializer);
        let mut var_attendee = <String>::sse_decode(deserializer);
        let mut var_members = <i64>::sse_decode(deserializer);
        let mut var_name = <String>::sse_decode(deserializer);
        let mut var_icon = <String>::sse_decode(deserializer);
        let mut var_sticky = <bool>::sse_decode(deserializer);
        let mut var_mute = <bool>::sse_decode(deserializer);
        let mut var_source = <String>::sse_decode(deserializer);
        let mut var_unread = <i64>::sse_decode(deserializer);
        let mut var_lastSenderId = <String>::sse_decode(deserializer);
        let mut var_lastMessage =
            <Option<restsend_sdk::models::chat_log::Content>>::sse_decode(deserializer);
        let mut var_lastMessageAt = <String>::sse_decode(deserializer);
        let mut var_lastMessageSeq = <Option<i64>>::sse_decode(deserializer);
        let mut var_remark = <Option<String>>::sse_decode(deserializer);
        let mut var_extra =
            <Option<std::collections::HashMap<String, String>>>::sse_decode(deserializer);
        let mut var_topicExtra =
            <Option<std::collections::HashMap<String, String>>>::sse_decode(deserializer);
        let mut var_topicOwnerId = <Option<String>>::sse_decode(deserializer);
        let mut var_tags =
            <Option<Vec<restsend_sdk::models::conversation::Tag>>>::sse_decode(deserializer);
        let mut var_cachedAt = <i64>::sse_decode(deserializer);
        let mut var_isPartial = <bool>::sse_decode(deserializer);
        return restsend_sdk::models::conversation::Conversation {
            owner_id: var_ownerId,
            topic_id: var_topicId,
            updated_at: var_updatedAt,
            start_seq: var_startSeq,
            last_seq: var_lastSeq,
            last_read_seq: var_lastReadSeq,
            last_read_at: var_lastReadAt,
            multiple: var_multiple,
            attendee: var_attendee,
            members: var_members,
            name: var_name,
            icon: var_icon,
            sticky: var_sticky,
            mute: var_mute,
            source: var_source,
            unread: var_unread,
            last_sender_id: var_lastSenderId,
            last_message: var_lastMessage,
            last_message_at: var_lastMessageAt,
            last_message_seq: var_lastMessageSeq,
            remark: var_remark,
            extra: var_extra,
            topic_extra: var_topicExtra,
            topic_owner_id: var_topicOwnerId,
            tags: var_tags,
            cached_at: var_cachedAt,
            is_partial: var_isPartial,
        };
    }
}

impl SseDecode for restsend_sdk::models::conversation::ConversationUpdateFields {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_sticky = <Option<bool>>::sse_decode(deserializer);
        let mut var_mute = <Option<bool>>::sse_decode(deserializer);
        let mut var_remark = <Option<String>>::sse_decode(deserializer);
        let mut var_extra =
            <Option<std::collections::HashMap<String, String>>>::sse_decode(deserializer);
        let mut var_tags =
            <Option<Vec<restsend_sdk::models::conversation::Tag>>>::sse_decode(deserializer);
        return restsend_sdk::models::conversation::ConversationUpdateFields {
            sticky: var_sticky,
            mute: var_mute,
            remark: var_remark,
            extra: var_extra,
            tags: var_tags,
        };
    }
}

impl SseDecode for f32 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_f32::<NativeEndian>().unwrap()
    }
}

impl SseDecode for i32 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_i32::<NativeEndian>().unwrap()
    }
}

impl SseDecode for i64 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_i64::<NativeEndian>().unwrap()
    }
}

impl SseDecode for Vec<String> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<String>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<u8> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<u8>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<(String, String)> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<(String, String)>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<restsend_sdk::models::conversation::Tag> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<restsend_sdk::models::conversation::Tag>::sse_decode(
                deserializer,
            ));
        }
        return ans_;
    }
}

impl SseDecode for Vec<restsend_sdk::models::user::User> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<restsend_sdk::models::user::User>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for restsend_sdk::models::ListUserResult {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_hasMore = <bool>::sse_decode(deserializer);
        let mut var_updatedAt = <String>::sse_decode(deserializer);
        let mut var_items = <Vec<restsend_sdk::models::user::User>>::sse_decode(deserializer);
        return restsend_sdk::models::ListUserResult {
            has_more: var_hasMore,
            updated_at: var_updatedAt,
            items: var_items,
        };
    }
}

impl SseDecode for Option<std::collections::HashMap<String, String>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<std::collections::HashMap<String, String>>::sse_decode(
                deserializer,
            ));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<String> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<String>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<restsend_sdk::models::chat_log::Attachment> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<restsend_sdk::models::chat_log::Attachment>::sse_decode(
                deserializer,
            ));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<bool> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<bool>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<restsend_sdk::models::chat_log::Content> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<restsend_sdk::models::chat_log::Content>::sse_decode(
                deserializer,
            ));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<i64> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<i64>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<restsend_sdk::models::topic::TopicNotice> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<restsend_sdk::models::topic::TopicNotice>::sse_decode(
                deserializer,
            ));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<Vec<restsend_sdk::models::conversation::Tag>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<Vec<restsend_sdk::models::conversation::Tag>>::sse_decode(
                deserializer,
            ));
        } else {
            return None;
        }
    }
}

impl SseDecode for (String, String) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_field0 = <String>::sse_decode(deserializer);
        let mut var_field1 = <String>::sse_decode(deserializer);
        return (var_field0, var_field1);
    }
}

impl SseDecode for restsend_sdk::models::conversation::Tag {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_id = <String>::sse_decode(deserializer);
        let mut var_tagType = <String>::sse_decode(deserializer);
        let mut var_label = <String>::sse_decode(deserializer);
        return restsend_sdk::models::conversation::Tag {
            id: var_id,
            tag_type: var_tagType,
            label: var_label,
        };
    }
}

impl SseDecode for restsend_sdk::models::topic::Topic {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_id = <String>::sse_decode(deserializer);
        let mut var_name = <String>::sse_decode(deserializer);
        let mut var_icon = <String>::sse_decode(deserializer);
        let mut var_remark = <String>::sse_decode(deserializer);
        let mut var_ownerId = <String>::sse_decode(deserializer);
        let mut var_attendeeId = <String>::sse_decode(deserializer);
        let mut var_admins = <Vec<String>>::sse_decode(deserializer);
        let mut var_members = <u32>::sse_decode(deserializer);
        let mut var_lastSeq = <i64>::sse_decode(deserializer);
        let mut var_multiple = <bool>::sse_decode(deserializer);
        let mut var_source = <String>::sse_decode(deserializer);
        let mut var_private = <bool>::sse_decode(deserializer);
        let mut var_createdAt = <String>::sse_decode(deserializer);
        let mut var_updatedAt = <String>::sse_decode(deserializer);
        let mut var_notice =
            <Option<restsend_sdk::models::topic::TopicNotice>>::sse_decode(deserializer);
        let mut var_extra =
            <Option<std::collections::HashMap<String, String>>>::sse_decode(deserializer);
        let mut var_silent = <bool>::sse_decode(deserializer);
        let mut var_cachedAt = <i64>::sse_decode(deserializer);
        return restsend_sdk::models::topic::Topic {
            id: var_id,
            name: var_name,
            icon: var_icon,
            remark: var_remark,
            owner_id: var_ownerId,
            attendee_id: var_attendeeId,
            admins: var_admins,
            members: var_members,
            last_seq: var_lastSeq,
            multiple: var_multiple,
            source: var_source,
            private: var_private,
            created_at: var_createdAt,
            updated_at: var_updatedAt,
            notice: var_notice,
            extra: var_extra,
            silent: var_silent,
            cached_at: var_cachedAt,
        };
    }
}

impl SseDecode for restsend_sdk::models::TopicKnock {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_createdAt = <String>::sse_decode(deserializer);
        let mut var_updatedAt = <String>::sse_decode(deserializer);
        let mut var_topicId = <String>::sse_decode(deserializer);
        let mut var_userId = <String>::sse_decode(deserializer);
        let mut var_message = <String>::sse_decode(deserializer);
        let mut var_source = <String>::sse_decode(deserializer);
        let mut var_status = <String>::sse_decode(deserializer);
        let mut var_adminId = <String>::sse_decode(deserializer);
        return restsend_sdk::models::TopicKnock {
            created_at: var_createdAt,
            updated_at: var_updatedAt,
            topic_id: var_topicId,
            user_id: var_userId,
            message: var_message,
            source: var_source,
            status: var_status,
            admin_id: var_adminId,
        };
    }
}

impl SseDecode for restsend_sdk::models::topic_member::TopicMember {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_topicId = <String>::sse_decode(deserializer);
        let mut var_userId = <String>::sse_decode(deserializer);
        let mut var_name = <String>::sse_decode(deserializer);
        let mut var_source = <String>::sse_decode(deserializer);
        let mut var_silenceAt = <Option<String>>::sse_decode(deserializer);
        let mut var_joinedAt = <String>::sse_decode(deserializer);
        let mut var_updatedAt = <String>::sse_decode(deserializer);
        let mut var_extra =
            <Option<std::collections::HashMap<String, String>>>::sse_decode(deserializer);
        return restsend_sdk::models::topic_member::TopicMember {
            topic_id: var_topicId,
            user_id: var_userId,
            name: var_name,
            source: var_source,
            silence_at: var_silenceAt,
            joined_at: var_joinedAt,
            updated_at: var_updatedAt,
            extra: var_extra,
        };
    }
}

impl SseDecode for restsend_sdk::models::topic::TopicNotice {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_text = <String>::sse_decode(deserializer);
        let mut var_publisher = <String>::sse_decode(deserializer);
        let mut var_updatedAt = <String>::sse_decode(deserializer);
        return restsend_sdk::models::topic::TopicNotice {
            text: var_text,
            publisher: var_publisher,
            updated_at: var_updatedAt,
        };
    }
}

impl SseDecode for u32 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_u32::<NativeEndian>().unwrap()
    }
}

impl SseDecode for u64 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_u64::<NativeEndian>().unwrap()
    }
}

impl SseDecode for u8 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_u8().unwrap()
    }
}

impl SseDecode for () {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {}
}

impl SseDecode for restsend_sdk::models::user::User {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_userId = <String>::sse_decode(deserializer);
        let mut var_name = <String>::sse_decode(deserializer);
        let mut var_avatar = <String>::sse_decode(deserializer);
        let mut var_publicKey = <String>::sse_decode(deserializer);
        let mut var_remark = <String>::sse_decode(deserializer);
        let mut var_isContact = <bool>::sse_decode(deserializer);
        let mut var_isStar = <bool>::sse_decode(deserializer);
        let mut var_isBlocked = <bool>::sse_decode(deserializer);
        let mut var_locale = <String>::sse_decode(deserializer);
        let mut var_city = <String>::sse_decode(deserializer);
        let mut var_country = <String>::sse_decode(deserializer);
        let mut var_source = <String>::sse_decode(deserializer);
        let mut var_createdAt = <String>::sse_decode(deserializer);
        let mut var_gender = <String>::sse_decode(deserializer);
        let mut var_memo = <String>::sse_decode(deserializer);
        let mut var_extra =
            <Option<std::collections::HashMap<String, String>>>::sse_decode(deserializer);
        let mut var_isStaff = <bool>::sse_decode(deserializer);
        let mut var_cachedAt = <i64>::sse_decode(deserializer);
        let mut var_isPartial = <bool>::sse_decode(deserializer);
        return restsend_sdk::models::user::User {
            user_id: var_userId,
            name: var_name,
            avatar: var_avatar,
            public_key: var_publicKey,
            remark: var_remark,
            is_contact: var_isContact,
            is_star: var_isStar,
            is_blocked: var_isBlocked,
            locale: var_locale,
            city: var_city,
            country: var_country,
            source: var_source,
            created_at: var_createdAt,
            gender: var_gender,
            memo: var_memo,
            extra: var_extra,
            is_staff: var_isStaff,
            cached_at: var_cachedAt,
            is_partial: var_isPartial,
        };
    }
}

impl SseDecode for restsend_sdk::models::user::UserProfile {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_avatar = <String>::sse_decode(deserializer);
        let mut var_gender = <String>::sse_decode(deserializer);
        let mut var_city = <String>::sse_decode(deserializer);
        let mut var_region = <String>::sse_decode(deserializer);
        let mut var_country = <String>::sse_decode(deserializer);
        let mut var_privateExtra =
            <Option<std::collections::HashMap<String, String>>>::sse_decode(deserializer);
        return restsend_sdk::models::user::UserProfile {
            avatar: var_avatar,
            gender: var_gender,
            city: var_city,
            region: var_region,
            country: var_country,
            private_extra: var_privateExtra,
        };
    }
}

impl SseDecode for usize {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_u64::<NativeEndian>().unwrap() as _
    }
}

fn pde_ffi_dispatcher_primary_impl(
    func_id: i32,
    port: flutter_rust_bridge::for_generated::MessagePort,
    ptr: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len: i32,
    data_len: i32,
) {
    // Codec=Pde (Serialization + dispatch), see doc to use other codecs
    match func_id {
        1 => wire__crate__client__client__Client_app_active_impl(port, ptr, rust_vec_len, data_len),
        2 => wire__crate__client__client__Client_connect_impl(port, ptr, rust_vec_len, data_len),
        4 => wire__crate__client__client__Client_new_impl(port, ptr, rust_vec_len, data_len),
        6 => wire__crate__client__client__Client_shutdown_impl(port, ptr, rust_vec_len, data_len),
        7 => wire__restsend_sdk__models__chat_log__attachment_default_impl(
            port,
            ptr,
            rust_vec_len,
            data_len,
        ),
        8 => wire__restsend_sdk__models__chat_log__attachment_from_local_impl(
            port,
            ptr,
            rust_vec_len,
            data_len,
        ),
        9 => wire__restsend_sdk__models__chat_log__attachment_from_url_impl(
            port,
            ptr,
            rust_vec_len,
            data_len,
        ),
        10 => wire__restsend_sdk__models__chat_log__attachment_status_default_impl(
            port,
            ptr,
            rust_vec_len,
            data_len,
        ),
        11 => wire__restsend_sdk__models__user__auth_info_default_impl(
            port,
            ptr,
            rust_vec_len,
            data_len,
        ),
        12 => {
            wire__restsend_sdk__models__user__auth_info_new_impl(port, ptr, rust_vec_len, data_len)
        }
        13 => wire__restsend_sdk__models__chat_log__chat_log_default_impl(
            port,
            ptr,
            rust_vec_len,
            data_len,
        ),
        14 => wire__restsend_sdk__models__chat_log__chat_log_new_impl(
            port,
            ptr,
            rust_vec_len,
            data_len,
        ),
        15 => wire__restsend_sdk__models__chat_log__chat_log_sort_key_impl(
            port,
            ptr,
            rust_vec_len,
            data_len,
        ),
        16 => wire__restsend_sdk__models__chat_log__chat_log_status_default_impl(
            port,
            ptr,
            rust_vec_len,
            data_len,
        ),
        17 => wire__restsend_sdk__models__chat_log__content_default_impl(
            port,
            ptr,
            rust_vec_len,
            data_len,
        ),
        18 => wire__restsend_sdk__models__chat_log__content_new_impl(
            port,
            ptr,
            rust_vec_len,
            data_len,
        ),
        19 => wire__restsend_sdk__models__chat_log__content_new_text_impl(
            port,
            ptr,
            rust_vec_len,
            data_len,
        ),
        20 => wire__restsend_sdk__models__conversation__conversation_default_impl(
            port,
            ptr,
            rust_vec_len,
            data_len,
        ),
        21 => wire__restsend_sdk__models__conversation__conversation_new_impl(
            port,
            ptr,
            rust_vec_len,
            data_len,
        ),
        22 => wire__restsend_sdk__models__conversation__conversation_sort_key_impl(
            port,
            ptr,
            rust_vec_len,
            data_len,
        ),
        23 => wire__restsend_sdk__models__conversation__conversation_update_fields_default_impl(
            port,
            ptr,
            rust_vec_len,
            data_len,
        ),
        24 => wire__crate__client__account__hello_impl(port, ptr, rust_vec_len, data_len),
        25 => wire__crate__client__client__init_app_impl(port, ptr, rust_vec_len, data_len),
        26 => wire__restsend_sdk__models__list_user_result_default_impl(
            port,
            ptr,
            rust_vec_len,
            data_len,
        ),
        27 => wire__crate__client__account__logout_impl(port, ptr, rust_vec_len, data_len),
        28 => wire__crate__client__client__set_logging_impl(port, ptr, rust_vec_len, data_len),
        29 => wire__crate__client__account__signin_impl(port, ptr, rust_vec_len, data_len),
        30 => wire__crate__client__account__signup_impl(port, ptr, rust_vec_len, data_len),
        31 => wire__restsend_sdk__models__conversation__tag_default_impl(
            port,
            ptr,
            rust_vec_len,
            data_len,
        ),
        32 => {
            wire__restsend_sdk__models__topic__topic_default_impl(port, ptr, rust_vec_len, data_len)
        }
        33 => wire__restsend_sdk__models__topic_knock_new_impl(port, ptr, rust_vec_len, data_len),
        34 => wire__restsend_sdk__models__topic_member__topic_member_default_impl(
            port,
            ptr,
            rust_vec_len,
            data_len,
        ),
        35 => wire__restsend_sdk__models__topic_member__topic_member_new_impl(
            port,
            ptr,
            rust_vec_len,
            data_len,
        ),
        36 => wire__restsend_sdk__models__topic__topic_new_impl(port, ptr, rust_vec_len, data_len),
        37 => wire__restsend_sdk__models__topic__topic_notice_new_impl(
            port,
            ptr,
            rust_vec_len,
            data_len,
        ),
        38 => {
            wire__restsend_sdk__models__user__user_default_impl(port, ptr, rust_vec_len, data_len)
        }
        39 => wire__restsend_sdk__models__user__user_merge_impl(port, ptr, rust_vec_len, data_len),
        40 => wire__restsend_sdk__models__user__user_new_impl(port, ptr, rust_vec_len, data_len),
        41 => wire__restsend_sdk__models__user__user_profile_default_impl(
            port,
            ptr,
            rust_vec_len,
            data_len,
        ),
        42 => {
            wire__restsend_sdk__models__user__user_sort_key_impl(port, ptr, rust_vec_len, data_len)
        }
        _ => unreachable!(),
    }
}

fn pde_ffi_dispatcher_sync_impl(
    func_id: i32,
    ptr: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len: i32,
    data_len: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    // Codec=Pde (Serialization + dispatch), see doc to use other codecs
    match func_id {
        3 => {
            wire__crate__client__client__Client_connection_status_impl(ptr, rust_vec_len, data_len)
        }
        5 => wire__crate__client__client__Client_set_keepalive_impl(ptr, rust_vec_len, data_len),
        _ => unreachable!(),
    }
}

// Section: rust2dart

// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<Client> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, MoiArc<_>>(self.0)
            .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for FrbWrapper<Client> {}

impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<Client>> for Client {
    fn into_into_dart(self) -> FrbWrapper<Client> {
        self.into()
    }
}

// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<ContentType> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, MoiArc<_>>(self.0)
            .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for FrbWrapper<ContentType> {}

impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<ContentType>> for ContentType {
    fn into_into_dart(self) -> FrbWrapper<ContentType> {
        self.into()
    }
}

// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<restsend_sdk::models::chat_log::Attachment> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.0.url.into_into_dart().into_dart(),
            self.0.size.into_into_dart().into_dart(),
            self.0.thumbnail.into_into_dart().into_dart(),
            self.0.file_name.into_into_dart().into_dart(),
            self.0.file_path.into_into_dart().into_dart(),
            self.0.url_or_data.into_into_dart().into_dart(),
            self.0.is_private.into_into_dart().into_dart(),
            self.0.status.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<restsend_sdk::models::chat_log::Attachment>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<restsend_sdk::models::chat_log::Attachment>>
    for restsend_sdk::models::chat_log::Attachment
{
    fn into_into_dart(self) -> FrbWrapper<restsend_sdk::models::chat_log::Attachment> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for FrbWrapper<restsend_sdk::models::chat_log::AttachmentStatus>
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self.0 {
            restsend_sdk::models::chat_log::AttachmentStatus::ToUpload => 0.into_dart(),
            restsend_sdk::models::chat_log::AttachmentStatus::ToDownload => 1.into_dart(),
            restsend_sdk::models::chat_log::AttachmentStatus::Uploading => 2.into_dart(),
            restsend_sdk::models::chat_log::AttachmentStatus::Downloading => 3.into_dart(),
            restsend_sdk::models::chat_log::AttachmentStatus::Paused => 4.into_dart(),
            restsend_sdk::models::chat_log::AttachmentStatus::Done => 5.into_dart(),
            restsend_sdk::models::chat_log::AttachmentStatus::Failed => 6.into_dart(),
            _ => unreachable!(),
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<restsend_sdk::models::chat_log::AttachmentStatus>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<restsend_sdk::models::chat_log::AttachmentStatus>>
    for restsend_sdk::models::chat_log::AttachmentStatus
{
    fn into_into_dart(self) -> FrbWrapper<restsend_sdk::models::chat_log::AttachmentStatus> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<restsend_sdk::models::user::AuthInfo> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.0.endpoint.into_into_dart().into_dart(),
            self.0.user_id.into_into_dart().into_dart(),
            self.0.avatar.into_into_dart().into_dart(),
            self.0.name.into_into_dart().into_dart(),
            self.0.token.into_into_dart().into_dart(),
            self.0.is_staff.into_into_dart().into_dart(),
            self.0.is_cross_domain.into_into_dart().into_dart(),
            self.0.private_extra.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<restsend_sdk::models::user::AuthInfo>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<restsend_sdk::models::user::AuthInfo>>
    for restsend_sdk::models::user::AuthInfo
{
    fn into_into_dart(self) -> FrbWrapper<restsend_sdk::models::user::AuthInfo> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<restsend_sdk::models::chat_log::ChatLog> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.0.topic_id.into_into_dart().into_dart(),
            self.0.id.into_into_dart().into_dart(),
            self.0.seq.into_into_dart().into_dart(),
            self.0.created_at.into_into_dart().into_dart(),
            self.0.sender_id.into_into_dart().into_dart(),
            self.0.content.into_into_dart().into_dart(),
            self.0.read.into_into_dart().into_dart(),
            self.0.recall.into_into_dart().into_dart(),
            self.0.status.into_into_dart().into_dart(),
            self.0.cached_at.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<restsend_sdk::models::chat_log::ChatLog>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<restsend_sdk::models::chat_log::ChatLog>>
    for restsend_sdk::models::chat_log::ChatLog
{
    fn into_into_dart(self) -> FrbWrapper<restsend_sdk::models::chat_log::ChatLog> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<restsend_sdk::models::chat_log::ChatLogStatus> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self.0 {
            restsend_sdk::models::chat_log::ChatLogStatus::Uploading => 0.into_dart(),
            restsend_sdk::models::chat_log::ChatLogStatus::Sending => 1.into_dart(),
            restsend_sdk::models::chat_log::ChatLogStatus::Sent => 2.into_dart(),
            restsend_sdk::models::chat_log::ChatLogStatus::Downloading => 3.into_dart(),
            restsend_sdk::models::chat_log::ChatLogStatus::Received => 4.into_dart(),
            restsend_sdk::models::chat_log::ChatLogStatus::Read => 5.into_dart(),
            restsend_sdk::models::chat_log::ChatLogStatus::SendFailed => 6.into_dart(),
            _ => unreachable!(),
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<restsend_sdk::models::chat_log::ChatLogStatus>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<restsend_sdk::models::chat_log::ChatLogStatus>>
    for restsend_sdk::models::chat_log::ChatLogStatus
{
    fn into_into_dart(self) -> FrbWrapper<restsend_sdk::models::chat_log::ChatLogStatus> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<restsend_sdk::models::chat_log::Content> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.0.content_type.into_into_dart().into_dart(),
            self.0.encrypted.into_into_dart().into_dart(),
            self.0.checksum.into_into_dart().into_dart(),
            self.0.text.into_into_dart().into_dart(),
            self.0.placeholder.into_into_dart().into_dart(),
            self.0.thumbnail.into_into_dart().into_dart(),
            self.0.duration.into_into_dart().into_dart(),
            self.0.size.into_into_dart().into_dart(),
            self.0.width.into_into_dart().into_dart(),
            self.0.height.into_into_dart().into_dart(),
            self.0.mentions.into_into_dart().into_dart(),
            self.0.mention_all.into_into_dart().into_dart(),
            self.0.reply.into_into_dart().into_dart(),
            self.0.reply_content.into_into_dart().into_dart(),
            self.0.created_at.into_into_dart().into_dart(),
            self.0.attachment.into_into_dart().into_dart(),
            self.0.extra.into_into_dart().into_dart(),
            self.0.unreadable.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<restsend_sdk::models::chat_log::Content>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<restsend_sdk::models::chat_log::Content>>
    for restsend_sdk::models::chat_log::Content
{
    fn into_into_dart(self) -> FrbWrapper<restsend_sdk::models::chat_log::Content> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for FrbWrapper<restsend_sdk::models::conversation::Conversation>
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.0.owner_id.into_into_dart().into_dart(),
            self.0.topic_id.into_into_dart().into_dart(),
            self.0.updated_at.into_into_dart().into_dart(),
            self.0.start_seq.into_into_dart().into_dart(),
            self.0.last_seq.into_into_dart().into_dart(),
            self.0.last_read_seq.into_into_dart().into_dart(),
            self.0.last_read_at.into_into_dart().into_dart(),
            self.0.multiple.into_into_dart().into_dart(),
            self.0.attendee.into_into_dart().into_dart(),
            self.0.members.into_into_dart().into_dart(),
            self.0.name.into_into_dart().into_dart(),
            self.0.icon.into_into_dart().into_dart(),
            self.0.sticky.into_into_dart().into_dart(),
            self.0.mute.into_into_dart().into_dart(),
            self.0.source.into_into_dart().into_dart(),
            self.0.unread.into_into_dart().into_dart(),
            self.0.last_sender_id.into_into_dart().into_dart(),
            self.0.last_message.into_into_dart().into_dart(),
            self.0.last_message_at.into_into_dart().into_dart(),
            self.0.last_message_seq.into_into_dart().into_dart(),
            self.0.remark.into_into_dart().into_dart(),
            self.0.extra.into_into_dart().into_dart(),
            self.0.topic_extra.into_into_dart().into_dart(),
            self.0.topic_owner_id.into_into_dart().into_dart(),
            self.0.tags.into_into_dart().into_dart(),
            self.0.cached_at.into_into_dart().into_dart(),
            self.0.is_partial.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<restsend_sdk::models::conversation::Conversation>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<restsend_sdk::models::conversation::Conversation>>
    for restsend_sdk::models::conversation::Conversation
{
    fn into_into_dart(self) -> FrbWrapper<restsend_sdk::models::conversation::Conversation> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for FrbWrapper<restsend_sdk::models::conversation::ConversationUpdateFields>
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.0.sticky.into_into_dart().into_dart(),
            self.0.mute.into_into_dart().into_dart(),
            self.0.remark.into_into_dart().into_dart(),
            self.0.extra.into_into_dart().into_dart(),
            self.0.tags.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<restsend_sdk::models::conversation::ConversationUpdateFields>
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        FrbWrapper<restsend_sdk::models::conversation::ConversationUpdateFields>,
    > for restsend_sdk::models::conversation::ConversationUpdateFields
{
    fn into_into_dart(
        self,
    ) -> FrbWrapper<restsend_sdk::models::conversation::ConversationUpdateFields> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<restsend_sdk::models::ListUserResult> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.0.has_more.into_into_dart().into_dart(),
            self.0.updated_at.into_into_dart().into_dart(),
            self.0.items.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<restsend_sdk::models::ListUserResult>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<restsend_sdk::models::ListUserResult>>
    for restsend_sdk::models::ListUserResult
{
    fn into_into_dart(self) -> FrbWrapper<restsend_sdk::models::ListUserResult> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<restsend_sdk::models::conversation::Tag> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.0.id.into_into_dart().into_dart(),
            self.0.tag_type.into_into_dart().into_dart(),
            self.0.label.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<restsend_sdk::models::conversation::Tag>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<restsend_sdk::models::conversation::Tag>>
    for restsend_sdk::models::conversation::Tag
{
    fn into_into_dart(self) -> FrbWrapper<restsend_sdk::models::conversation::Tag> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<restsend_sdk::models::topic::Topic> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.0.id.into_into_dart().into_dart(),
            self.0.name.into_into_dart().into_dart(),
            self.0.icon.into_into_dart().into_dart(),
            self.0.remark.into_into_dart().into_dart(),
            self.0.owner_id.into_into_dart().into_dart(),
            self.0.attendee_id.into_into_dart().into_dart(),
            self.0.admins.into_into_dart().into_dart(),
            self.0.members.into_into_dart().into_dart(),
            self.0.last_seq.into_into_dart().into_dart(),
            self.0.multiple.into_into_dart().into_dart(),
            self.0.source.into_into_dart().into_dart(),
            self.0.private.into_into_dart().into_dart(),
            self.0.created_at.into_into_dart().into_dart(),
            self.0.updated_at.into_into_dart().into_dart(),
            self.0.notice.into_into_dart().into_dart(),
            self.0.extra.into_into_dart().into_dart(),
            self.0.silent.into_into_dart().into_dart(),
            self.0.cached_at.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<restsend_sdk::models::topic::Topic>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<restsend_sdk::models::topic::Topic>>
    for restsend_sdk::models::topic::Topic
{
    fn into_into_dart(self) -> FrbWrapper<restsend_sdk::models::topic::Topic> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<restsend_sdk::models::TopicKnock> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.0.created_at.into_into_dart().into_dart(),
            self.0.updated_at.into_into_dart().into_dart(),
            self.0.topic_id.into_into_dart().into_dart(),
            self.0.user_id.into_into_dart().into_dart(),
            self.0.message.into_into_dart().into_dart(),
            self.0.source.into_into_dart().into_dart(),
            self.0.status.into_into_dart().into_dart(),
            self.0.admin_id.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<restsend_sdk::models::TopicKnock>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<restsend_sdk::models::TopicKnock>>
    for restsend_sdk::models::TopicKnock
{
    fn into_into_dart(self) -> FrbWrapper<restsend_sdk::models::TopicKnock> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<restsend_sdk::models::topic_member::TopicMember> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.0.topic_id.into_into_dart().into_dart(),
            self.0.user_id.into_into_dart().into_dart(),
            self.0.name.into_into_dart().into_dart(),
            self.0.source.into_into_dart().into_dart(),
            self.0.silence_at.into_into_dart().into_dart(),
            self.0.joined_at.into_into_dart().into_dart(),
            self.0.updated_at.into_into_dart().into_dart(),
            self.0.extra.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<restsend_sdk::models::topic_member::TopicMember>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<restsend_sdk::models::topic_member::TopicMember>>
    for restsend_sdk::models::topic_member::TopicMember
{
    fn into_into_dart(self) -> FrbWrapper<restsend_sdk::models::topic_member::TopicMember> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<restsend_sdk::models::topic::TopicNotice> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.0.text.into_into_dart().into_dart(),
            self.0.publisher.into_into_dart().into_dart(),
            self.0.updated_at.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<restsend_sdk::models::topic::TopicNotice>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<restsend_sdk::models::topic::TopicNotice>>
    for restsend_sdk::models::topic::TopicNotice
{
    fn into_into_dart(self) -> FrbWrapper<restsend_sdk::models::topic::TopicNotice> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<restsend_sdk::models::user::User> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.0.user_id.into_into_dart().into_dart(),
            self.0.name.into_into_dart().into_dart(),
            self.0.avatar.into_into_dart().into_dart(),
            self.0.public_key.into_into_dart().into_dart(),
            self.0.remark.into_into_dart().into_dart(),
            self.0.is_contact.into_into_dart().into_dart(),
            self.0.is_star.into_into_dart().into_dart(),
            self.0.is_blocked.into_into_dart().into_dart(),
            self.0.locale.into_into_dart().into_dart(),
            self.0.city.into_into_dart().into_dart(),
            self.0.country.into_into_dart().into_dart(),
            self.0.source.into_into_dart().into_dart(),
            self.0.created_at.into_into_dart().into_dart(),
            self.0.gender.into_into_dart().into_dart(),
            self.0.memo.into_into_dart().into_dart(),
            self.0.extra.into_into_dart().into_dart(),
            self.0.is_staff.into_into_dart().into_dart(),
            self.0.cached_at.into_into_dart().into_dart(),
            self.0.is_partial.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<restsend_sdk::models::user::User>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<restsend_sdk::models::user::User>>
    for restsend_sdk::models::user::User
{
    fn into_into_dart(self) -> FrbWrapper<restsend_sdk::models::user::User> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<restsend_sdk::models::user::UserProfile> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.0.avatar.into_into_dart().into_dart(),
            self.0.gender.into_into_dart().into_dart(),
            self.0.city.into_into_dart().into_dart(),
            self.0.region.into_into_dart().into_dart(),
            self.0.country.into_into_dart().into_dart(),
            self.0.private_extra.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<restsend_sdk::models::user::UserProfile>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<restsend_sdk::models::user::UserProfile>>
    for restsend_sdk::models::user::UserProfile
{
    fn into_into_dart(self) -> FrbWrapper<restsend_sdk::models::user::UserProfile> {
        self.into()
    }
}

impl SseEncode for flutter_rust_bridge::for_generated::anyhow::Error {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(format!("{:?}", self), serializer);
    }
}

impl SseEncode for Client {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Client>>>::sse_encode(flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, MoiArc<_>>(self), serializer);
    }
}

impl SseEncode for ContentType {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ContentType>>>::sse_encode(flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, MoiArc<_>>(self), serializer);
    }
}

impl SseEncode for std::collections::HashMap<String, String> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<(String, String)>>::sse_encode(self.into_iter().collect(), serializer);
    }
}

impl SseEncode for RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Client>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode
    for RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ContentType>>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode for String {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<u8>>::sse_encode(self.into_bytes(), serializer);
    }
}

impl SseEncode for restsend_sdk::models::chat_log::Attachment {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.url, serializer);
        <i64>::sse_encode(self.size, serializer);
        <String>::sse_encode(self.thumbnail, serializer);
        <String>::sse_encode(self.file_name, serializer);
        <String>::sse_encode(self.file_path, serializer);
        <String>::sse_encode(self.url_or_data, serializer);
        <bool>::sse_encode(self.is_private, serializer);
        <restsend_sdk::models::chat_log::AttachmentStatus>::sse_encode(self.status, serializer);
    }
}

impl SseEncode for restsend_sdk::models::chat_log::AttachmentStatus {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(
            match self {
                restsend_sdk::models::chat_log::AttachmentStatus::ToUpload => 0,
                restsend_sdk::models::chat_log::AttachmentStatus::ToDownload => 1,
                restsend_sdk::models::chat_log::AttachmentStatus::Uploading => 2,
                restsend_sdk::models::chat_log::AttachmentStatus::Downloading => 3,
                restsend_sdk::models::chat_log::AttachmentStatus::Paused => 4,
                restsend_sdk::models::chat_log::AttachmentStatus::Done => 5,
                restsend_sdk::models::chat_log::AttachmentStatus::Failed => 6,
                _ => {
                    unimplemented!("");
                }
            },
            serializer,
        );
    }
}

impl SseEncode for restsend_sdk::models::user::AuthInfo {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.endpoint, serializer);
        <String>::sse_encode(self.user_id, serializer);
        <String>::sse_encode(self.avatar, serializer);
        <String>::sse_encode(self.name, serializer);
        <String>::sse_encode(self.token, serializer);
        <bool>::sse_encode(self.is_staff, serializer);
        <bool>::sse_encode(self.is_cross_domain, serializer);
        <Option<std::collections::HashMap<String, String>>>::sse_encode(
            self.private_extra,
            serializer,
        );
    }
}

impl SseEncode for bool {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_u8(self as _).unwrap();
    }
}

impl SseEncode for restsend_sdk::models::chat_log::ChatLog {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.topic_id, serializer);
        <String>::sse_encode(self.id, serializer);
        <i64>::sse_encode(self.seq, serializer);
        <String>::sse_encode(self.created_at, serializer);
        <String>::sse_encode(self.sender_id, serializer);
        <restsend_sdk::models::chat_log::Content>::sse_encode(self.content, serializer);
        <bool>::sse_encode(self.read, serializer);
        <bool>::sse_encode(self.recall, serializer);
        <restsend_sdk::models::chat_log::ChatLogStatus>::sse_encode(self.status, serializer);
        <i64>::sse_encode(self.cached_at, serializer);
    }
}

impl SseEncode for restsend_sdk::models::chat_log::ChatLogStatus {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(
            match self {
                restsend_sdk::models::chat_log::ChatLogStatus::Uploading => 0,
                restsend_sdk::models::chat_log::ChatLogStatus::Sending => 1,
                restsend_sdk::models::chat_log::ChatLogStatus::Sent => 2,
                restsend_sdk::models::chat_log::ChatLogStatus::Downloading => 3,
                restsend_sdk::models::chat_log::ChatLogStatus::Received => 4,
                restsend_sdk::models::chat_log::ChatLogStatus::Read => 5,
                restsend_sdk::models::chat_log::ChatLogStatus::SendFailed => 6,
                _ => {
                    unimplemented!("");
                }
            },
            serializer,
        );
    }
}

impl SseEncode for restsend_sdk::models::chat_log::Content {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.content_type, serializer);
        <bool>::sse_encode(self.encrypted, serializer);
        <u32>::sse_encode(self.checksum, serializer);
        <String>::sse_encode(self.text, serializer);
        <String>::sse_encode(self.placeholder, serializer);
        <String>::sse_encode(self.thumbnail, serializer);
        <String>::sse_encode(self.duration, serializer);
        <u64>::sse_encode(self.size, serializer);
        <f32>::sse_encode(self.width, serializer);
        <f32>::sse_encode(self.height, serializer);
        <Vec<String>>::sse_encode(self.mentions, serializer);
        <bool>::sse_encode(self.mention_all, serializer);
        <String>::sse_encode(self.reply, serializer);
        <Option<String>>::sse_encode(self.reply_content, serializer);
        <String>::sse_encode(self.created_at, serializer);
        <Option<restsend_sdk::models::chat_log::Attachment>>::sse_encode(
            self.attachment,
            serializer,
        );
        <Option<std::collections::HashMap<String, String>>>::sse_encode(self.extra, serializer);
        <bool>::sse_encode(self.unreadable, serializer);
    }
}

impl SseEncode for restsend_sdk::models::conversation::Conversation {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.owner_id, serializer);
        <String>::sse_encode(self.topic_id, serializer);
        <String>::sse_encode(self.updated_at, serializer);
        <i64>::sse_encode(self.start_seq, serializer);
        <i64>::sse_encode(self.last_seq, serializer);
        <i64>::sse_encode(self.last_read_seq, serializer);
        <Option<String>>::sse_encode(self.last_read_at, serializer);
        <bool>::sse_encode(self.multiple, serializer);
        <String>::sse_encode(self.attendee, serializer);
        <i64>::sse_encode(self.members, serializer);
        <String>::sse_encode(self.name, serializer);
        <String>::sse_encode(self.icon, serializer);
        <bool>::sse_encode(self.sticky, serializer);
        <bool>::sse_encode(self.mute, serializer);
        <String>::sse_encode(self.source, serializer);
        <i64>::sse_encode(self.unread, serializer);
        <String>::sse_encode(self.last_sender_id, serializer);
        <Option<restsend_sdk::models::chat_log::Content>>::sse_encode(
            self.last_message,
            serializer,
        );
        <String>::sse_encode(self.last_message_at, serializer);
        <Option<i64>>::sse_encode(self.last_message_seq, serializer);
        <Option<String>>::sse_encode(self.remark, serializer);
        <Option<std::collections::HashMap<String, String>>>::sse_encode(self.extra, serializer);
        <Option<std::collections::HashMap<String, String>>>::sse_encode(
            self.topic_extra,
            serializer,
        );
        <Option<String>>::sse_encode(self.topic_owner_id, serializer);
        <Option<Vec<restsend_sdk::models::conversation::Tag>>>::sse_encode(self.tags, serializer);
        <i64>::sse_encode(self.cached_at, serializer);
        <bool>::sse_encode(self.is_partial, serializer);
    }
}

impl SseEncode for restsend_sdk::models::conversation::ConversationUpdateFields {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Option<bool>>::sse_encode(self.sticky, serializer);
        <Option<bool>>::sse_encode(self.mute, serializer);
        <Option<String>>::sse_encode(self.remark, serializer);
        <Option<std::collections::HashMap<String, String>>>::sse_encode(self.extra, serializer);
        <Option<Vec<restsend_sdk::models::conversation::Tag>>>::sse_encode(self.tags, serializer);
    }
}

impl SseEncode for f32 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_f32::<NativeEndian>(self).unwrap();
    }
}

impl SseEncode for i32 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_i32::<NativeEndian>(self).unwrap();
    }
}

impl SseEncode for i64 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_i64::<NativeEndian>(self).unwrap();
    }
}

impl SseEncode for Vec<String> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <String>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<u8> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <u8>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<(String, String)> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <(String, String)>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<restsend_sdk::models::conversation::Tag> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <restsend_sdk::models::conversation::Tag>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<restsend_sdk::models::user::User> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <restsend_sdk::models::user::User>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for restsend_sdk::models::ListUserResult {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.has_more, serializer);
        <String>::sse_encode(self.updated_at, serializer);
        <Vec<restsend_sdk::models::user::User>>::sse_encode(self.items, serializer);
    }
}

impl SseEncode for Option<std::collections::HashMap<String, String>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <std::collections::HashMap<String, String>>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<String> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <String>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<restsend_sdk::models::chat_log::Attachment> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <restsend_sdk::models::chat_log::Attachment>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<bool> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <bool>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<restsend_sdk::models::chat_log::Content> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <restsend_sdk::models::chat_log::Content>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<i64> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <i64>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<restsend_sdk::models::topic::TopicNotice> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <restsend_sdk::models::topic::TopicNotice>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<Vec<restsend_sdk::models::conversation::Tag>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <Vec<restsend_sdk::models::conversation::Tag>>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for (String, String) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.0, serializer);
        <String>::sse_encode(self.1, serializer);
    }
}

impl SseEncode for restsend_sdk::models::conversation::Tag {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.id, serializer);
        <String>::sse_encode(self.tag_type, serializer);
        <String>::sse_encode(self.label, serializer);
    }
}

impl SseEncode for restsend_sdk::models::topic::Topic {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.id, serializer);
        <String>::sse_encode(self.name, serializer);
        <String>::sse_encode(self.icon, serializer);
        <String>::sse_encode(self.remark, serializer);
        <String>::sse_encode(self.owner_id, serializer);
        <String>::sse_encode(self.attendee_id, serializer);
        <Vec<String>>::sse_encode(self.admins, serializer);
        <u32>::sse_encode(self.members, serializer);
        <i64>::sse_encode(self.last_seq, serializer);
        <bool>::sse_encode(self.multiple, serializer);
        <String>::sse_encode(self.source, serializer);
        <bool>::sse_encode(self.private, serializer);
        <String>::sse_encode(self.created_at, serializer);
        <String>::sse_encode(self.updated_at, serializer);
        <Option<restsend_sdk::models::topic::TopicNotice>>::sse_encode(self.notice, serializer);
        <Option<std::collections::HashMap<String, String>>>::sse_encode(self.extra, serializer);
        <bool>::sse_encode(self.silent, serializer);
        <i64>::sse_encode(self.cached_at, serializer);
    }
}

impl SseEncode for restsend_sdk::models::TopicKnock {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.created_at, serializer);
        <String>::sse_encode(self.updated_at, serializer);
        <String>::sse_encode(self.topic_id, serializer);
        <String>::sse_encode(self.user_id, serializer);
        <String>::sse_encode(self.message, serializer);
        <String>::sse_encode(self.source, serializer);
        <String>::sse_encode(self.status, serializer);
        <String>::sse_encode(self.admin_id, serializer);
    }
}

impl SseEncode for restsend_sdk::models::topic_member::TopicMember {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.topic_id, serializer);
        <String>::sse_encode(self.user_id, serializer);
        <String>::sse_encode(self.name, serializer);
        <String>::sse_encode(self.source, serializer);
        <Option<String>>::sse_encode(self.silence_at, serializer);
        <String>::sse_encode(self.joined_at, serializer);
        <String>::sse_encode(self.updated_at, serializer);
        <Option<std::collections::HashMap<String, String>>>::sse_encode(self.extra, serializer);
    }
}

impl SseEncode for restsend_sdk::models::topic::TopicNotice {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.text, serializer);
        <String>::sse_encode(self.publisher, serializer);
        <String>::sse_encode(self.updated_at, serializer);
    }
}

impl SseEncode for u32 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_u32::<NativeEndian>(self).unwrap();
    }
}

impl SseEncode for u64 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_u64::<NativeEndian>(self).unwrap();
    }
}

impl SseEncode for u8 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_u8(self).unwrap();
    }
}

impl SseEncode for () {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {}
}

impl SseEncode for restsend_sdk::models::user::User {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.user_id, serializer);
        <String>::sse_encode(self.name, serializer);
        <String>::sse_encode(self.avatar, serializer);
        <String>::sse_encode(self.public_key, serializer);
        <String>::sse_encode(self.remark, serializer);
        <bool>::sse_encode(self.is_contact, serializer);
        <bool>::sse_encode(self.is_star, serializer);
        <bool>::sse_encode(self.is_blocked, serializer);
        <String>::sse_encode(self.locale, serializer);
        <String>::sse_encode(self.city, serializer);
        <String>::sse_encode(self.country, serializer);
        <String>::sse_encode(self.source, serializer);
        <String>::sse_encode(self.created_at, serializer);
        <String>::sse_encode(self.gender, serializer);
        <String>::sse_encode(self.memo, serializer);
        <Option<std::collections::HashMap<String, String>>>::sse_encode(self.extra, serializer);
        <bool>::sse_encode(self.is_staff, serializer);
        <i64>::sse_encode(self.cached_at, serializer);
        <bool>::sse_encode(self.is_partial, serializer);
    }
}

impl SseEncode for restsend_sdk::models::user::UserProfile {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.avatar, serializer);
        <String>::sse_encode(self.gender, serializer);
        <String>::sse_encode(self.city, serializer);
        <String>::sse_encode(self.region, serializer);
        <String>::sse_encode(self.country, serializer);
        <Option<std::collections::HashMap<String, String>>>::sse_encode(
            self.private_extra,
            serializer,
        );
    }
}

impl SseEncode for usize {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer
            .cursor
            .write_u64::<NativeEndian>(self as _)
            .unwrap();
    }
}

#[cfg(not(target_family = "wasm"))]
mod io {
    // This file is automatically generated, so please do not edit it.
    // @generated by `flutter_rust_bridge`@ 2.6.0.

    // Section: imports

    use super::*;
    use crate::client::client::*;
    use flutter_rust_bridge::for_generated::byteorder::{
        NativeEndian, ReadBytesExt, WriteBytesExt,
    };
    use flutter_rust_bridge::for_generated::{transform_result_dco, Lifetimeable, Lockable};
    use flutter_rust_bridge::{Handler, IntoIntoDart};
    use restsend_sdk::models::chat_log::*;
    use restsend_sdk::storage::StoreModel;

    // Section: boilerplate

    flutter_rust_bridge::frb_generated_boilerplate_io!();

    #[no_mangle]
    pub extern "C" fn frbgen_restsend_dart_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerClient(
        ptr: *const std::ffi::c_void,
    ) {
        MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Client>>::increment_strong_count(ptr as _);
    }

    #[no_mangle]
    pub extern "C" fn frbgen_restsend_dart_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerClient(
        ptr: *const std::ffi::c_void,
    ) {
        MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Client>>::decrement_strong_count(ptr as _);
    }

    #[no_mangle]
    pub extern "C" fn frbgen_restsend_dart_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerContentType(
        ptr: *const std::ffi::c_void,
    ) {
        MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ContentType>>::increment_strong_count(ptr as _);
    }

    #[no_mangle]
    pub extern "C" fn frbgen_restsend_dart_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerContentType(
        ptr: *const std::ffi::c_void,
    ) {
        MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ContentType>>::decrement_strong_count(ptr as _);
    }
}
#[cfg(not(target_family = "wasm"))]
pub use io::*;
